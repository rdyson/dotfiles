HTTP/2.0 200 OK
Alt-Svc: h3=":443"; ma=86400
Cache-Control: public, max-age=600
Cf-Cache-Status: DYNAMIC
Cf-Ray: 83c250197fd1417f-LHR
Content-Type: application/json
Date: Wed, 27 Dec 2023 14:39:25 GMT
Etag: "BYt3dA"
Expires: Wed, 27 Dec 2023 14:49:25 GMT
Nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=DD6zgUIUAKZIOifxDaih3K3gZMBpIKkkbG1rJYJCWYpfUG0dLYuhyzAkhySnfVeEgarOf9zJWxXgjJaOAWNrJIxM4I4SpeeUGVE4dTZHaZhpXdjjBO%2Bb4QzOhxf76A%3D%3D"}],"group":"cf-nel","max_age":604800}
Server: cloudflare
X-Cloud-Trace-Context: ba31a4b9f92a943d4d70c0d83d771aa6

{
	"version": "v2.1.7-beta-32-g06577f4",
	"lastUpdated": "15 Jul 23 09:53 BST",
	"plugins": [
		{
			"files": [
				{
					"path": "Time/aideadlines.15m.py",
					"filename": "aideadlines.15m.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eAI deadlines counter\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eJiseob Kim\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003enzer0\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eCount the days to the submission deadlines of AI conferences.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://github.com/nzer0/bitbar-aideadlines/blob/master/aid-screenshot.png?raw=true\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython3 (pyyaml, pytz, tzlocal, wget)\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/nzer0/bitbar-aideadlines\u003c/xbar.abouturl\u003e\n\n\nimport os, re, sys\nimport datetime as dt\n\nME_PATH = os.path.realpath(__file__)\nROOT = os.path.dirname(ME_PATH)\nDL_FNAME = os.path.join(ROOT, '.aid.aideadlines.yaml')\nDLG_FNAME = os.path.join(ROOT, '.aid.processed.yaml')\nSEL_FNAME = os.path.join(ROOT, '.aid.seldl')\nSHB_FNAME = os.path.join(ROOT, '.aid.ammend_shebang')\nAID_URL = \"https://raw.githubusercontent.com/abhshkdz/ai-deadlines/gh-pages/_data/conferences.yml\"\n\n'''Write bash script to ammend the shebang'''\nif not os.path.exists(SHB_FNAME):\n\twith open(SHB_FNAME, \"w\") as sf:\n\t\tsf.write('#!/bin/bash\\n')\n\t\tsf.write('SB=`which python3`\\n')\n\t\tsf.write('sed -i \"\" -e \"1s:#!/usr/bin/env python3:#!/usr/bin/env $SB:\" \"$1\"\\n')\n\t\tsf.write('echo \"\u003e\u003e\u003e Now refresh the Bitbar \u003c\u003c\u003c\"')\n\tos.chmod(SHB_FNAME, 0o755)\n\n'''Display instructions if the dependencies are not installed'''\ntry:\n\timport yaml\n\tfrom pytz import timezone\n\tfrom tzlocal import get_localzone\n\timport wget\nexcept:\n\tprint(\"Install Dependencies\")\n\tprint(\"---\")\n\tprint(\"Please install the dependencies by clicking below | color=black\")\n\tprint(\"$ pip3 install pyyaml pytz tzlocal wget | color=green bash='pip3 install pyyaml pytz tzlocal wget' refresh=true\")\n\tprint(\"---\")\n\tprint(\"If it is still not working, click below | color=black\")\n\tprint(f\"Ammend shebang | color=green bash='{SHB_FNAME}' param1={ME_PATH}\")\n\tprint(\"then refresh the BitBar | color=black\")\n\tsys.exit(1)\n\n'''Replace UTC with Etc/GMT to be handled by pytz'''\ndef normalize_tz(tz):\n\tmo = re.search(r'UTC([+-]\\d+)', tz)\n\tif mo is None:\n\t\treturn tz\n\telse:\n\t\treturn f\"Etc/GMT{-int(mo.group(1)):+d}\"\n\n'''Parse the string to make a datetime obj with an appropriate local'''\ndef make_datetime(c, abs=False):\n\tdl_key = 'abstract_deadline' if abs else 'deadline'\n\treturn timezone(normalize_tz(c['timezone'])).localize(dt.datetime.strptime(c[dl_key], '%Y-%m-%d %H:%M:%S'))\n\n'''Compute the datetime diff with now'''\ndef get_diff(due):\n\treturn due - get_localzone().localize(dt.datetime.now())\n\n'''main Bitbar display'''\ndef main():\n\tif not os.path.exists(DL_FNAME):\n\t\tgetdl()\n\twith open(DLG_FNAME, 'r') as yf:\n\t\tdlg = yaml.safe_load(yf)\n\n\ttry:\n\t\t'''If there is a selected deadline'''\n\t\twith open(SEL_FNAME, 'r') as sf:\n\t\t\tsel = sf.readline().rstrip('\\n')\n\n\t\tconf = dlg['full'][sel]\n\t\tname = conf['title']\n\t\tdl = make_datetime(conf)\n\t\tdiff = get_diff(dl)\n\t\tdays = f\"+{-diff.days}\" if diff.days \u003c 0 else f\"-{diff.days}\"\n\t\thours = f\"{diff.seconds//3600}\"\n\t\tprint(f\"{name} D{days} {hours}h+\")\n\t\tprint(\"---\")\n\t\tprint(f\"About {name} {conf['year']}\")\n\t\tprint(f\"--:date: {conf['date']}\")\n\t\tprint(f\"--:round_pushpin: {conf['place']}\")\n\t\tprint(f\"--:house: Go to Website | href={conf['link']}\")\n\t\tprint(\"-----\")\n\t\tif 'abstract_deadline' in conf.keys():\n\t\t\tabs_dl = make_datetime(conf, abs=True)\n\t\t\tprint(f\"--Abs: {abs_dl.strftime('%Y-%m-%d %H:%M')} ({conf['timezone']})\")\t\n\t\tprint(f\"--Due: {dl.strftime('%Y-%m-%d %H:%M')} ({conf['timezone']})\")\n\texcept:\n\t\tname = \"N/A\"\n\t\tprint(\"Select the conference\")\n\n\n\tprint(\"---\")\n\tfor urg in dlg['urgent'][:10]:\n\t\tconf = dlg['full'][urg]\n\t\toutstr = f\"{conf['title']} | bash={ME_PATH} param1=seldl param2={conf['title']} terminal=false refresh=true\"\n\t\tif conf['title'] == name:\n\t\t\toutstr += \" checked=true\"\n\t\tprint(outstr)\n\tprint(\"More...\")\n\tfor sub_name, sub in dlg['subs'].items():\n\t\tprint(f\"--{sub_name}\")\n\t\tfor t in sub:\n\t\t\tconf = dlg['full'][t]\n\t\t\toutstr = f\"----{conf['title']} | bash={ME_PATH} param1=seldl param2={conf['title']} terminal=false refresh=true\"\n\t\t\tif get_diff(make_datetime(conf)).days \u003c 0:\n\t\t\t\toutstr += \" color=red\"\n\t\t\tprint(outstr)\n\tprint(\"---\")\n\tprint(f\"Update Conferences Info | bash={ME_PATH} param1=getdl terminal=false refresh=true\")\n\tprint(\"Go to aideadlin.es | href='https://aideadlin.es'\")\n\tprint(\"About this plugin | href='https://github.com/nzer0/bitbar-aideadlines\")\n\n\n'''Select a particular deadline'''\ndef seldl(conf_title):\n\twith open(SEL_FNAME, 'w') as sf:\n\t\tsf.write(conf_title)\n\n'''Get the deadlines list from aideadlin.es and process it'''\ndef getdl():\n\tif os.path.exists(DL_FNAME):\n\t\t\tos.remove(DL_FNAME)\n\twget.download(AID_URL, DL_FNAME, False)\n\n\twith open(DL_FNAME, 'r') as yf:\n\t\tdl = yaml.safe_load(yf)\n\tfull = {}\n\tsubs = {}\n\tfor conf in dl:\n\t\tfull[conf['title']] = conf\n\t\tsub = conf['sub']\n\t\tif sub in subs.keys():\n\t\t\tsubs[sub].append(conf['title'])\n\t\telse:\n\t\t\tsubs[sub] = [conf['title']]\n\n\turgent = sorted(list(full.keys()), key=lambda t: make_datetime(full[t]))\n\turgent = [t for t in urgent if get_diff(make_datetime(full[t])).days \u003e -7]\n\n\tfor sub in subs.values():\n\t \tsub.sort(key=lambda t: make_datetime(full[t]))\n\n\twith open(DLG_FNAME, 'w') as yf:\n\t\tyaml.safe_dump(dict(full=full, subs=subs, urgent=urgent), yf)\n\n\nif __name__ == \"__main__\":\n\tif len(sys.argv) == 1:\n\t\tmain()\n\n\telif sys.argv[1] == 'seldl':\n\t\tseldl(sys.argv[2])\n\n\telif sys.argv[1] == 'getdl':\n\t\tgetdl()\n\n"
				}
			],
			"path": "Time/aideadlines.15m.py",
			"filename": "aideadlines.15m.py",
			"dir": "Time",
			"docsPlugin": "Time/aideadlines.15m.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "AI deadlines counter",
			"version": "v0.1",
			"author": "Jiseob Kim",
			"authors": [
				{
					"name": "Jiseob Kim",
					"githubUsername": "nzer0",
					"imageURL": "https://avatars.githubusercontent.com/u/2021812?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Count the days to the submission deadlines of AI conferences.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/aideadlines.15m.py.png?raw=true",
			"dependencies": [
				"python3 (pyyaml",
				"pytz",
				"tzlocal",
				"wget)"
			],
			"aboutURL": "https://github.com/nzer0/bitbar-aideadlines",
			"lastUpdated": "2023-07-15T09:53:35.715742+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/age-ticker.1s.py",
					"filename": "age-ticker.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eAge Ticker\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eGary Thung\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003egarythung\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplays your age ticking in years with decimals. Set your birthday in the script.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://github.com/garythung/bitbar-age-ticker/blob/master/bitbar-age-ticker.gif?raw=true\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/garythung/bitbar-age-ticker\u003c/xbar.abouturl\u003e\n\nimport datetime\n\n# Your Birthday\nbirthday_year = 1970\nbirthday_month = 1\nbirthday_day = 1\n\nbirthday = datetime.datetime(birthday_year, birthday_month, birthday_day)\nnow = datetime.datetime.now()\nseconds = (now - birthday).total_seconds()\nyears = seconds / 31536000\n\nprint(\"%.12f\" % years) # change the number to change precision\n"
				}
			],
			"path": "Time/age-ticker.1s.py",
			"filename": "age-ticker.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/age-ticker.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Age Ticker",
			"version": "v1.1",
			"author": "Gary Thung",
			"authors": [
				{
					"name": "Gary Thung",
					"githubUsername": "garythung",
					"imageURL": "https://avatars.githubusercontent.com/u/7055455?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays your age ticking in years with decimals. Set your birthday in the script.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/age-ticker.1s.py.gif?raw=true",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/garythung/bitbar-age-ticker",
			"lastUpdated": "2023-07-15T09:53:35.587466+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/alarmclock.1s.sh",
					"filename": "alarmclock.1s.sh",
					"content": "#!/bin/bash\n#\n# \u003cxbar.title\u003eAlarm Clock\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eCarlson Orozco\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ecarlsonorozco\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eAlarm Clock is a plugin for BitBar that notifies/make a sound at a specific time.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/carlsonorozco/alarmclock/master/image.png\u003c/xbar.image\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/carlsonorozco/alarmclock\u003c/xbar.abouturl\u003e\n\n# Set Alarm\nif [ \"$1\" = 'set' ]; then\n    alarm=\"$(osascript -e 'Tell application \"System Events\" to display dialog \"Enter Alarm in 24 Hour Time format:\" default answer \"\"' -e 'text returned of result' 2\u003e/dev/null)\"\n    # shellcheck disable=SC2181\n    if [ $? -ne 0 ]; then\n        # Cancelled\n        exit\n    elif [ -z \"$alarm\" ]; then\n        osascript -e 'Tell application \"System Events\" to display alert \"Alarm not set\" as warning'\n        exit\n    elif [[ ! $alarm =~ ^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$ ]]; then\n        osascript -e 'Tell application \"System Events\" to display alert \"Alarm not set. Invalid time format\" as warning'\n        exit\n    fi\n\n    echo \"$alarm\" \u003e\u003e /tmp/alarmclock.data\n    exit\nfi\n\n# Remove Alarm\nif [ \"$1\" = 'remove' ]; then\n    touch /tmp/alarmclock_tmp.data\n    while IFS= read -r line; do\n        if [ \"$2\" != \"$line\" ]; then\n            echo \"$line\" \u003e\u003e /tmp/alarmclock_tmp.data\n        fi\n    done \u003c/tmp/alarmclock.data\n    mv /tmp/alarmclock_tmp.data /tmp/alarmclock.data\n    exit\nfi\n\n# Stop Alarm\nif [ \"$1\" = 'stop' ]; then\n    rm /tmp/alarmclock_trigger.data\n    exit\nfi\n\n# Create alarmclock.data if not exist\nif [ ! -f '/tmp/alarmclock.data' ]; then\n    touch '/tmp/alarmclock.data'\nfi\n\n# Count all alarms\ntotal_alarms=$(grep -c ':' /tmp/alarmclock.data)\n\n# Header Display\nif [ $((total_alarms)) -gt 0 ]; then\n    if [ ! -f '/tmp/alarmclock_trigger.data' ] ; then\n        echo \"$total_alarms⏰\"\n    else\n        echo \"$total_alarms⏰ | color=red\"\n    fi\n    echo '---'\nelse\n    echo \"⏰\"\nfi\n\n# Parse alarms\nwhile IFS= read -r line; do\n    echo \"$line | color=red bash='$0' param1=remove param2=$line terminal=false\"\n    now=$(date +%R)\n    if [ \"$line\" == \"$now\" ] \u0026\u0026 [ \"$(date +%S)\" -le '03' ] \u0026\u0026 [ ! -f '/tmp/alarmclock_trigger.data' ]; then\n        echo \"$now\" \u003e '/tmp/alarmclock_trigger.data'\n    fi\ndone \u003c/tmp/alarmclock.data\n\n# Set new alarm\necho '---'\necho \"Set Alarm | color=green bash='$0' param1=set terminal=false\"\n\n# Trigger alarm\nif [ -f '/tmp/alarmclock_trigger.data' ]; then\n    echo \"Stop Alarm | color=red bash='$0' param1=stop terminal=false\"\n    afplay /System/Library/Sounds/Tink.aiff\n    afplay /System/Library/Sounds/Tink.aiff\n    afplay /System/Library/Sounds/Tink.aiff\n    afplay /System/Library/Sounds/Tink.aiff\nfi"
				}
			],
			"path": "Time/alarmclock.1s.sh",
			"filename": "alarmclock.1s.sh",
			"dir": "Time",
			"docsPlugin": "Time/alarmclock.1s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Alarm Clock",
			"version": "v1.0",
			"author": "Carlson Orozco",
			"authors": [
				{
					"name": "Carlson Orozco",
					"githubUsername": "carlsonorozco",
					"imageURL": "https://avatars.githubusercontent.com/u/2333279?v=4",
					"bio": "Christianprenuer • Makinilya.com • Dad",
					"primary": true
				}
			],
			"desc": "Alarm Clock is a plugin for BitBar that notifies/make a sound at a specific time.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/alarmclock.1s.sh.png",
			"dependencies": null,
			"aboutURL": "https://github.com/carlsonorozco/alarmclock",
			"lastUpdated": "2023-07-15T09:53:35.865033+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/solar-time.1s.py",
					"filename": "solar-time.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eApparent Solar Time\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAlexandre André\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eXanderLeaDaren\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplays the apparent solar time. Specify your longitude in the script.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://github.com/XanderLeaDaren/bitbar-solar-time/blob/master/bitbar_solar-time.jpg?raw=true\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/XanderLeaDaren/bitbar-solar-time\u003c/xbar.abouturl\u003e\n\nimport datetime\nfrom math import sin\nimport time\n\n# Local time and day of the year\ntoday = datetime.datetime.now()\nday = today.timetuple().tm_yday\n\n# Longitude on Earth (easily find it on http://ipinfo.io/json)\nlg = 5.1413\npos = lg/360*24*60\n\n# Time zone and Equation of time\ntz = time.timezone\neq_time = 7.655*sin(2*(day-4))+9.873*sin(4*(day-172))\n\n# Local solar time\nsun = today - datetime.timedelta(minutes=-pos+eq_time,seconds=-tz)\nprint(\"☀️ \"+sun.strftime('%H:%M:%S'))\nprint(\"---\")\nprint(\"Time Zone Offset: \"+str(tz/3600)+\" h\")\nprint(\"Position Offset: %.3f\" % pos+\" min\")\nprint(\"Equation of Time: %.3f\" % -eq_time+\" min\")\n"
				}
			],
			"path": "Time/solar-time.1s.py",
			"filename": "solar-time.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/solar-time.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Apparent Solar Time",
			"version": "v1.1",
			"author": "Alexandre André",
			"authors": [
				{
					"name": "Aleks ANDRÉ",
					"githubUsername": "XanderLeaDaren",
					"imageURL": "https://avatars.githubusercontent.com/u/28948599?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the apparent solar time. Specify your longitude in the script.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/solar-time.1s.py.jpg?raw=true",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/XanderLeaDaren/bitbar-solar-time",
			"lastUpdated": "2023-07-15T09:53:36.778053+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/beats.1s.lisp",
					"filename": "beats.1s.lisp",
					"content": "#!/usr/local/bin/clisp\n\n; \u003cxbar.title\u003eBeats Time\u003c/xbar.title\u003e\n; \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n; \u003cxbar.author\u003eJannis Segebrecht\u003c/xbar.author\u003e\n; \u003cxbar.author.github\u003equeitsch\u003c/xbar.author.github\u003e\n; \u003cxbar.desc\u003eDisplays Swatch .beats time.\u003c/xbar.desc\u003e\n; \u003cxbar.dependencies\u003eclisp\u003c/xbar.dependencies\u003e\n; \u003cxbar.image\u003ehttp://i.imgur.com/W0iKDfu.png\u003c/xbar.image\u003e\n\n(format t \"~A\" ;print without quotes\n\t(concatenate 'string\n\t\t\"@\"\n\t\t(format nil \"~$\" ;print two decimal places\n\t\t\t(/ (mod (+ (mod \n\t\t\t\t(get-universal-time) 86400) 3600) 86400) 86.4))))\n"
				}
			],
			"path": "Time/beats.1s.lisp",
			"filename": "beats.1s.lisp",
			"dir": "Time",
			"docsPlugin": "Time/beats.1s.lisp.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Beats Time",
			"version": "v1.1",
			"author": "Jannis Segebrecht",
			"authors": [
				{
					"name": "Jannis Segebrecht",
					"githubUsername": "queitsch",
					"imageURL": "https://avatars.githubusercontent.com/u/1434770?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Swatch .beats time.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/beats.1s.lisp.png",
			"dependencies": [
				"clisp"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:35.884028+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/ts-convert.sh",
					"filename": "ts-convert.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eClipboard Timestamp converter\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eM. Peter\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003empneuried\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eThis plugin converts timestamps from the clipboard to a date.\n# It's inspired by the original clipboard-base64-encoder plugin\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/dXzJNOS.jpg?1\u003c/birtbar.image\u003e\n# \u003cxbar.dependencies\u003e\u003c/xbar.dependencies\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\n# user clicks on 'encodepaste'\nif [[ \"$1\" = \"encodepaste\" ]]; then\n  CONVERTED=$(date -r \"$(pbpaste)\" +'%Y-%m-%d %H:%M:%S')\n  echo -n \"$CONVERTED\" | pbcopy\n  osascript -e \"display notification \\\"$CONVERTED\\\" with title \\\"DATE:\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\n# user clicks on 'encoding'\nif [[ \"$1\" = \"encode\" ]]; then\n  CONVERTED=$(date -r \"$(pbpaste)\" +'%Y-%m-%d %H:%M:%S')\n  osascript -e \"display notification \\\"$CONVERTED\\\" with title \\\"DATE:\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\n# user clicks on 'now'\nif [[ \"$1\" = \"now\" ]]; then\n  NOW=$(date +%s)\n  echo -n \"$NOW\" | pbcopy\n  osascript -e \"display notification \\\"$NOW\\\" with title \\\"Save to Clipboard:\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\n# Print icon\necho \"⏱\"\necho \"---\"\necho \"Convert clipboard timestamp to date | bash='$0' param1=encode terminal=false\"\necho \"Convert clipboard timestamp to date and write it to the clipboard | bash='$0' param1=encodepaste terminal=false\"\necho \"Write the current timestamp to the clipboard | bash='$0' param1=now terminal=false\"\n"
				}
			],
			"path": "Time/ts-convert.sh",
			"filename": "ts-convert.sh",
			"dir": "Time",
			"docsPlugin": "Time/ts-convert.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Clipboard Timestamp converter",
			"version": "v0.1",
			"author": "M. Peter",
			"authors": [
				{
					"name": "M. Peter",
					"githubUsername": "mpneuried",
					"imageURL": "https://avatars.githubusercontent.com/u/300631?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/ts-convert.sh.jpg?1",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.202768+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/CalendarLite.1m.sh",
					"filename": "CalendarLite.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eClock with calendar\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eWeibing Chen\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eWeibingChen17\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eA clock with a simple calendar\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.ibb.co/Krmg0P8/Screen-Shot-2019-11-08-at-23-04-29.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/WeibingChen17/\u003c/xbar.abouturl\u003e\n\n# If using alongside apples default clock, one can uncomment the following - \n#formatted_date=$(date '+%d/%b/%Y')\n#printf '\\xF0\\x9F\\x93\\x85 %s\\n' \"$formatted_date\"\n# don't forget to comment out the following `date ` command:\ndate \"+%l:%M %p\"\n\necho \"---\"\nfont=\"Monaco\"\ncolor=\"red\"\n\n#Uncomment the below line and comment out all other following lines to trigger the three-month mode\n#cal - 3 |awk 'NF'|sed 's/ $//' |while IFS= read -r i; do echo \" $i|trim=false font=$font color=$color\"|  perl -pe '$b=\"\\b\";s/ _$b(\\d)_$b(\\d) /(\\1\\2)/' |perl -pe '$b=\"\\b\";s/_$b _$b(\\d) /(\\1)/'  ; done\n\n#Comment out these lines to remove \"last month\"\nlast_month=$(date -v-1m +%m)\nlast_year=$(date -v-1m +%Y)\nlast_month_name=$(date -jf %Y-%m-%d \"$last_year\"-\"$last_month\"-01 '+%b')\necho \"Prev: $last_month_name $last_year|trim=false font=$font\"\ncal -d \"$last_year\"-\"$last_month\" |awk 'NF'|sed 's/ *$//'| while IFS= read -r i; do echo \"--$i|trim=false font=$font\"; done \necho \"---\"\n\n#cal |awk 'NF'|while IFS= read -r i; do echo \" $i|trim=false font=$font color=$color\"|  perl -pe '$b=\"\\b\";s/ _$b(\\d)_$b(\\d) /(\\1\\2)/' |perl -pe '$b=\"\\b\";s/_$b _$b(\\d) /(\\1)/' |sed 's/ *$//'; done \ncal |awk 'NF'|while IFS= read -r i; do echo \" $i\"|perl -pe '$b=\"\\b\";s/ _$b(\\d)_$b(\\d) /(\\1\\2)/' |perl -pe '$b=\"\\b\";s/_$b _$b(\\d) /(\\1)/' |sed 's/ *$//' |sed \"s/$/|trim=false font=$font color=$color/\"; done \n\n#Comment out these lines to remove \"next month\"\necho \"---\"\nnext_month=$(date -v+1m +%m)\nnext_year=$(date -v+1m +%Y)\nnext_month_name=$(date -jf %Y-%m-%d \"$next_year\"-\"$next_month\"-01 '+%b')\necho \"Next: $next_month_name $next_year|trim=false font=$font\"\ncal -d \"$next_year\"-\"$next_month\" | awk 'NF'|sed 's/ *$//' | while IFS= read -r i; do echo \"--$i|trim=false font=$font\";done\n"
				}
			],
			"path": "Time/CalendarLite.1m.sh",
			"filename": "CalendarLite.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/CalendarLite.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Clock with calendar",
			"version": "v1.0",
			"author": "Weibing Chen",
			"authors": [
				{
					"name": "Weibing Chen",
					"githubUsername": "WeibingChen17",
					"imageURL": "https://avatars.githubusercontent.com/u/25602873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A clock with a simple calendar",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/CalendarLite.1m.sh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/WeibingChen17/",
			"lastUpdated": "2023-07-15T09:53:35.492353+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/countdown.1s.py",
					"filename": "countdown.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eCountdown\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev2.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003ePere Albujer\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eP4R\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows countdown of established date.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://cloud.githubusercontent.com/assets/7404532/12356787/ae62636c-bba4-11e5-8ff8-6a1eaffcbfc2.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n# \u003cxbar.var\u003estring(VAR_TITLE=\"Countdown Timer\"): Title to display in menu bar\u003c/xbar.var\u003e\n# \u003cxbar.var\u003estring(VAR_DATE_FORMAT=\"%d-%m-%Y\"): The date / time format for the timers you are setting up\u003c/xbar.var\u003e\n# \u003cxbar.var\u003eboolean(VAR_NO_CYCLE=false): If true, times will not cycle in the menu bar but will be displayed in the drop-down menu\u003c/xbar.var\u003e\n# \u003cxbar.var\u003estring(VAR_TIMERS=\"Time #1:17-07-2073,Time #2:15-08-2073\"): Comma delimited list of timers you wish to set. Each list entry is a colon separated label and date / time matching the format set in the DATE_FORMAT variable.\u003c/xbar.var\u003e\n\nfrom datetime import datetime\nimport sys\nimport os\n\n\ndef dateDiffInSeconds(date1, date2):\n    timedelta = date2 - date1\n    return timedelta.days * 24 * 3600 + timedelta.seconds\n\n\ndef daysHoursMinutesSecondsFromSeconds(seconds):\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    days, hours = divmod(hours, 24)\n    return (days, hours, minutes)\n\n\ndef main():\n    bar_title = os.environ.get(\"VAR_TITLE\")\n    date_format = os.environ.get(\"VAR_DATE_FORMAT\")\n    no_cycle = os.environ.get(\"VAR_NO_CYCLE\")\n    timers = os.environ.get(\"VAR_TIMERS\").split(\",\")\n\n    now = datetime.now()\n    time = None\n\n    if no_cycle == \"false\":\n        print(bar_title + \" | font=\\'Monospace\\'\")\n        print(\"---\")\n\n    for timer in timers:\n        timerData = timer.split(\":\")\n        label = timerData[0]\n        timer_date = timerData[1]\n\n        try:\n            time = datetime.strptime(timer_date, date_format)\n            print(label + \": %d d, %d h, %d m | font=\\'Monospace\\'\" % daysHoursMinutesSecondsFromSeconds(dateDiffInSeconds(now, time)))\n        except ValueError as e:\n            print(e)\n\n\nif __name__ == \"__main__\":\n    main()\n"
				}
			],
			"path": "Time/countdown.1s.py",
			"filename": "countdown.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/countdown.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Countdown",
			"version": "v2.1",
			"author": "Pere Albujer",
			"authors": [
				{
					"name": "Pere Albujer",
					"githubUsername": "P4R",
					"imageURL": "https://avatars.githubusercontent.com/u/7404532?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows countdown of established date.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/countdown.1s.py.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:35.910277+01:00",
			"vars": [
				{
					"type": "string",
					"name": "VAR_TITLE",
					"label": "Title",
					"default": "Countdown Timer",
					"desc": "Title to display in menu bar",
					"options": null
				},
				{
					"type": "string",
					"name": "VAR_DATE_FORMAT",
					"label": "Date format",
					"default": "%d-%m-%Y",
					"desc": "The date / time format for the timers you are setting up",
					"options": null
				},
				{
					"type": "boolean",
					"name": "VAR_NO_CYCLE",
					"label": "No cycle",
					"default": "false",
					"desc": "If true, times will not cycle in the menu bar but will be displayed in the drop-down menu",
					"options": null
				},
				{
					"type": "string",
					"name": "VAR_TIMERS",
					"label": "Timers",
					"default": "Time #1:17-07-2073,Time #2:15-08-2073",
					"desc": "Comma delimited list of timers you wish to set. Each list entry is a colon separated label and date / time matching the format set in the DATE_FORMAT variable.",
					"options": null
				}
			],
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/countdown_timer.1s.rb",
					"filename": "countdown_timer.1s.rb",
					"content": "#!/usr/bin/ruby\n# \u003cxbar.title\u003eCountdown Timer\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eChris Yuen\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ekizzx2\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eSimple countdown timer. Set the time by calling the script from terminal.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eruby\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/kizzx2/bitbar-countdown-timer/master/screenshot.png\u003c/xbar.image\u003e\n# \u003cxbar.abouturl\u003ehttp://github.com/kizzx2/bitbar-countdown-timer\u003c/xbar.abouturl\u003e\n\nfn = File.join(File.dirname($0), '.countdown')\n\nif ARGV.count == 0\n  task = nil\n\n  if File.file?(fn)\n    lines = File.read(fn).lines\n\n    time = Time.at(lines.first.to_i)\n    task = lines[1] if lines.count \u003e 1\n  else\n    time = Time.at(0)\n  end\n\n  remain = time - Time.now\n\n  if remain.to_i == 0\n    system %(osascript -e 'display notification \"Times up!\" with title \"Times up!\" sound name \"Glass\"')\n  end\n\n  remain = 0 if remain \u003c 0\n\n  color = nil\n\n  if remain \u003c 15 * 60 \u0026\u0026 remain != 0\n    color = \"red\"\n  elsif remain \u003c 30 * 60 \u0026\u0026 remain != 0\n    color = \"orange\"\n  end\n\n  h = (remain / 3600).to_i\n  remain -= h * 3600\n\n  m = (remain / 60).to_i\n  remain -= m * 60\n\n  s = remain\n\n  str = \"\"\n  str \u003c\u003c \"#{task}: \" if task\n  str \u003c\u003c \"%02i:%02i:%02i\" % [h, m, s]\n  str \u003c\u003c \"| color=#{color}\" if color\n\n  puts str\nelse\n  case ARGV.first\n  when '0'\n    time = 0\n  when /^(\\d+)s$/\n    time = Time.now + $1.to_i\n  when /^(\\d+)m$/\n    time = Time.now + $1.to_i * 60\n  when /^(\\d+)h$/\n    time = Time.now + $1.to_i * 3600\n  else\n    puts \"Error: Invalid argument '#{ARGV.first}'\"\n    exit 1\n  end\n\n  str = \"\"\n  str \u003c\u003c time.to_i.to_s\n\n  if ARGV.count \u003e 1\n    str \u003c\u003c \"\\n\"\n    str \u003c\u003c ARGV.drop(1).join(' ')\n  end\n\n  File.write(fn, str)\nend\n"
				}
			],
			"path": "Time/countdown_timer.1s.rb",
			"filename": "countdown_timer.1s.rb",
			"dir": "Time",
			"docsPlugin": "Time/countdown_timer.1s.rb.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Countdown Timer",
			"version": "v1.0",
			"author": "Chris Yuen",
			"authors": [
				{
					"name": "Chris Yuen",
					"githubUsername": "kizzx2",
					"imageURL": "https://avatars.githubusercontent.com/u/92614?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple countdown timer. Set the time by calling the script from terminal.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/countdown_timer.1s.rb.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "http://github.com/kizzx2/bitbar-countdown-timer",
			"lastUpdated": "2023-07-15T09:53:35.944872+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/countdown_timer_2.1s.py",
					"filename": "countdown_timer_2.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eCountdown Timer 2\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eFederico Ferri\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003efferri\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eSimple countdown timer.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/fferri/bitbar-countdown-timer/master/screenshot.gif\u003c/xbar.image\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/fferri/bitbar-countdown-timer\u003c/xbar.abouturl\u003e\n\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\n\nicon='iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAxZJREFUWAntlluITVEYx8+4jbuQ++CFSC655Tau8aA8eFKaJzKvlHfFwzwg1+TVRJNQU5SSUAZNIyNyy4gQcikkJLn9/lnLrHXss9bee868zVe/sy7f9//WOmvvvdYqFLosvAIVYXfQW4n3JPRLiNpGX3NCf6d29Sf77xKszztyt7zCiK6z8kaGLRTWEvEY3JXaTXtoVJkzYD66IQGt3qM74E6oJhDfIddkM1ArpTupWbTr4IXxu5Ox9a/46mEZlMWqyPIT7ADDqWs16p0++b7DXTgNjXAV3oPVqWyBBZDbqlG6CTWxBnji9B+lvhAGQbH1pGMCbIa3YHPtpJ7LZqJqA5vILa/QvyhD1t7E7nJy7cmg9UL1eFbDWbATOuhFZGusJFyPV7nqskn9aL0fSnLI787Vsh+J8ulxZ7bzKCR+kFnpC3o5zVrqyvnR6UtVHWeEEk9Lpfg/SF/q8wS93kPl1SuR2vYRKdGR1Ao/cKTR64DVV+ea/Yq1oaYy3QA+gya0JpXCD+pjtLoJlLI3OJR/SqkAt3+eCf5BOdh1BOrd8ekaMhZ+QQOETJ+/JqS9yrOkU3muibhN+cGLTm4sN3GvKe/BMYidZ03EyPQHPEua0GgToZ05ZtJfghOgk78vHICYvTQBA4sDkyZkX0I9sphZvVblogleERPh13Eks2P9bfHb41+tvfLJVIe1d5WsadLb4QK8gsuwH2Jmbw+6FXiWNKFHJmKGF1m6sQNXC0yCNI9LmabqB9PNIGpjiNAXIGZHo/MFXDP5U9+9bxnB1nzjBVVVJrf+8IBgpONcZ0TPnL5yVfea3IezJrSPrSPXjuIxx5vJKPeoYmesXeuIs1zKQnm1t2kyx0NBId85k0DHwZJQYMSnr1kbqCbzFHKbDsqHoERiI2S16QhugPTfQO0OWSXq+2An1UR9aYqM2j7sISqtbhC6NQatIuj1ndqBtzhd2kCvQyu0gXZtnYNagWqYA9bOUNkE72xHucpVJGoEu1qxUkfJhiyDZ1khN+9EGtplF8MI0AanXF9Aq3ATTkEzdFlZV+APQ77IUZhTv+IAAAAASUVORK5CYII='\n\ndef prompt(text='', defaultAnswer='', icon='note', buttons=('Cancel','Ok'), defaultButton=1):\n    try:\n        d = locals()\n        d['buttonsStr'] = ', '.join('\"%s\"' % button for button in buttons)\n        d['defaultButtonStr'] = isinstance(defaultButton, int) and buttons[defaultButton] or defaultButton\n        return subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            const response = app.displayDialog(\"{text}\", {{\n                defaultAnswer: \"{defaultAnswer}\",\n                withIcon: \"{icon}\",\n                buttons: [{buttonsStr}],\n                defaultButton: \"{defaultButtonStr}\"\n            }})\n            response.textReturned\n        '''.format(**d)]).rstrip().decode(\"utf-8\")\n    except subprocess.CalledProcessError:\n        pass\n\ndef notify(text, title, sound='Glass'):\n    os.system('osascript -e \\'display notification \"{}\" with title \"{}\" sound name \"{}\"\\''.format(text, title, sound))\n\ndef entry(title='---', **kwargs):\n    args = ' '.join('{}=\\'{}\\''.format(k,v) for k,v in list(kwargs.items()) if v is not None)\n    if args: args = '|' + args\n    print((title + args))\n\ndef parse_time(s):\n    m = re.match('^((\\d+)h)?((\\d+)m)?((\\d+)s?)?$', s)\n    if m is None: raise Exception('invalid time: %s' % s)\n    h, m, s = list(map(int, (m.group(i) or 0 for i in (2, 4, 6))))\n    return s + 60 * (m + 60 * h)\n\ndef render_time(t):\n    t = int(round(t))\n    h = t // 3600\n    t -= h * 3600\n    m = t // 60\n    t -= m * 60\n    k, v = 'hms', (h, m, t)\n    return ''.join('%d%s' % (v[i], k[i]) for i in range(3) if i == 2 or any(v[:i+1]))\n\ndef read_data_file(filename):\n    with open(data_file, 'rt') as f:\n        lines = f.readlines()\n    t = float(lines[0])\n    task = lines[1].rstrip() if len(lines) \u003e 1 else None\n    return t, task\n\ndef write_data_file(filename, t, task=None):\n    with open(data_file, 'wt') as f:\n        f.write('{:f}{}{}'.format(t, '\\n' if task else '', task or ''))\n\ndef usage():\n    print(('''usage: {0} \u003ctime\u003e [task_name]\ntime can be:\n    N or Ns: number of seconds\n    Nm: number of minutes\n    Nh: number of hours\n\nexample:\n    {0} 5m30s 'Egg is ready!'\n'''.format(__file__)))\n    sys.exit(1)\n\ndata_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), '.' + os.path.basename(__file__) + '.countdown')\n\nif len(sys.argv) == 1:\n    if os.path.isfile(data_file):\n        t, task = read_data_file(data_file)\n        remain = int(round(max(0, t - time.time())))\n        if remain == 0:\n            notify('Times up!', task or 'Times up!')\n            os.remove(data_file)\n        title = '{}{}{}'.format(task or '', task and ': ' or '', render_time(remain))\n        entry(title, color=('red' if remain \u003c= 10 else 'orange' if remain \u003c 60 else None))\n    else:\n        entry('|templateImage=\\'%s\\'' % icon)\n    entry('---')\n    if os.path.isfile(data_file):\n        entry('Cancel timer', bash=__file__, param1='cancel', terminal='false')\n    else:\n        entry('Set timer...', bash=__file__, param1='set', terminal='false')\nelif len(sys.argv) == 2 and sys.argv[1] == 'set':\n    timestr = prompt('Input time (example: 30s, 15m, 1h, 1m30s)', '5m', 'note', ('Cancel','Set'), 1)\n    task = prompt('Input task name')\n    t = time.time() + parse_time(timestr)\n    write_data_file(data_file, t, task)\nelif len(sys.argv) == 2 and sys.argv[1] == 'cancel':\n    os.remove(data_file)\n"
				}
			],
			"path": "Time/countdown_timer_2.1s.py",
			"filename": "countdown_timer_2.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/countdown_timer_2.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Countdown Timer 2",
			"version": "v1.1",
			"author": "Federico Ferri",
			"authors": [
				{
					"name": "Federico Ferri",
					"githubUsername": "fferri",
					"imageURL": "https://avatars.githubusercontent.com/u/5294568?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple countdown timer.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/countdown_timer_2.1s.py.gif",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/fferri/bitbar-countdown-timer",
			"lastUpdated": "2023-07-15T09:53:35.964878+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/date-picker.1m.sh",
					"filename": "date-picker.1m.sh",
					"content": "#!/bin/bash\n\n# Display todays date and time in various formats including ISO8601 and allows copying to clipboard.\n\n# Comment out the dates you don't need.\n\n# \u003cxbar.title\u003eDate Picker\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eTim Battersby\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003euglygus\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay todays date in various forms including iso8601 and copies to the clipboard.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003e\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/GVSUqFX.png\u003c/xbar.image\u003e\n\n# Appears in the menubar YYYY-MM-DD\ndate +%F\necho \"---\"\n\n#---ISO8601\n\nYMD=$(date +%F)\necho \"$YMD |bash='$0' param1=copy param2=$YMD terminal=false\"\n\nDATETIME=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\necho \"$DATETIME |bash='$0' param1=copy param2=$DATETIME terminal=false\"\n\necho \"---\"\n\n#---USA\n\nMDY=$(date \"+%D\")\necho \"$MDY |bash='$0' param1=copy param2=$MDY terminal=false\"\n\n MonDY=$(date +\"%b %d %Y\")\n echo \"$MonDY |bash='$0' param1=copy param2=\\\"$MonDY\\\" terminal=false\"\n\nTIME12=$(date +\"%r\")\necho \"$TIME12 |bash='$0' param1=copy param2=\\\"$TIME12\\\" terminal=false\"\n\necho \"---\"\n\n\n#---REST OF THE WORLD\n\nDMY=$(date +\"%d/%m/%y\")\necho \"$DMY |bash='$0' param1=copy param2=$YMD terminal=false\"\n\nDMonY=$(date +\"%d %b %Y\")\necho \"$DMonY |bash='$0' param1=copy param2=\\\"$DMonY\\\" terminal=false\"\n\nTIMESTAMP=$(date +\"%T %D\")\necho \"$TIMESTAMP |bash='$0' param1=copy param2=\\\"$TIMESTAMP\\\" terminal=false\"\n\n\nTIME24=$(date +\"%R:%S\")\necho \"$TIME24 |bash='$0' param1=copy param2=\\\"$TIME24\\\" terminal=false\"\n\n\n\nif [[ \"$#\" -ge 1 ]];then\n    if [[ \"$1\" == 'copy' ]] ; then\n\n        echo -n \"$2\" | pbcopy\n        echo COPIED \"$2\"\n    fi\nfi\n"
				}
			],
			"path": "Time/date-picker.1m.sh",
			"filename": "date-picker.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/date-picker.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Date Picker",
			"version": "v1.0",
			"author": "Tim Battersby",
			"authors": [
				{
					"name": "Tim Battersby",
					"githubUsername": "uglygus",
					"imageURL": "https://avatars.githubusercontent.com/u/11585473?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display todays date in various forms including iso8601 and copies to the clipboard.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/date-picker.1m.sh.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.0181+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/DayAndNightClock.sh",
					"filename": "DayAndNightClock.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eDayAndNightClock\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eFusionX\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eFusionX13\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eA clock that can do many things.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.ibb.co/6YQYS0k/Screen-Shot-2020-04-24-at-11-38-18-AM.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/FusionX13/\u003c/xbar.abouturl\u003e\n\n# Gets Emoji Moon\nget_phase_day () {\n  local lp=2551443\n  local now=$(date -ju +\"%s\")\n  local newmoon=592500\n  local phase=$((($now - $newmoon) % $lp))\n  echo $(((phase / 86400) + 1))\n}\n\n# Gets Emoji Moon\nget_moon_icon () {\n  local phase_number=$(get_phase_day)\n  # Multiply by 100000 so we can do integer comparison.  Go Bash!\n  local phase_number_biggened=$((phase_number * 100000))\n\n  if   [ $phase_number_biggened -lt 184566 ];  then date \"+%l:%M:%S %p 🌑\"  # new\n  elif [ $phase_number_biggened -lt 553699 ];  then date \"+%l:%M:%S %p 🌒\"  # waxing crescent\n  elif [ $phase_number_biggened -lt 922831 ];  then date \"+%l:%M:%S %p 🌓\"  # first quarter\n  elif [ $phase_number_biggened -lt 1291963 ]; then date \"+%l:%M:%S %p 🌔\"  # waxing gibbous\n  elif [ $phase_number_biggened -lt 1661096 ]; then date \"+%l:%M:%S %p 🌕\"  # full\n  elif [ $phase_number_biggened -lt 2030228 ]; then date \"+%l:%M:%S %p 🌖\"  # waning gibbous\n  elif [ $phase_number_biggened -lt 2399361 ]; then date \"+%l:%M:%S %p 🌗\"  # last quarter\n  elif [ $phase_number_biggened -lt 2768493 ]; then date \"+%l:%M:%S %p 🌘\"  # waning crescent\n  else                                     date \"+%l:%M:%S %p 🌑\"  # new\n  fi\n}\n\n# Determines what time it is and what to show\nH=$(date +%H)\nif (( 6 \u003c= 10#$H \u0026\u0026 10#$H \u003c 12 )); then\n    date \"+%l:%M:%S %p ☀️⇡\"\nelif (( 13 \u003c= 16#$H \u0026\u0026 10#$H \u003c 16 )); then\n    date \"+%l:%M:%S %p ☀️⇣\"\nelif (( 13 \u003c= 10#$H \u0026\u0026 10#$H \u003c 23 )); then\n    get_moon_icon\nelse  \n    get_moon_icon\nfi\n\necho \"---\"\nfont=\"Monaco\"\ncolor=\"yellow\"\n\n# The month, date, and year\ndate \"+%b-%d-%Y\"\n\n# Determines what time it is and what to show for a nice greeting\nH=$(date +%H)\nif (( 8 \u003c= 10#$H \u0026\u0026 10#$H \u003c 12 )); then\n    echo Good Morning\nelif (( 13 \u003c= 16#$H \u0026\u0026 10#$H \u003c 16 )); then\n    echo Good Afternoon\nelif (( 13 \u003c= 10#$H \u0026\u0026 10#$H \u003c 23 )); then\n    echo Good Evening\nelse\n    echo Good Night\nfi\n\necho \"---\"\nfont=\"Monaco\"\ncolor=\"yellow\"\n\n# Calendar script\ncal |awk 'NF'|while IFS= read -r i; do echo \" $i\"|perl -pe '$b=\"\\b\";s/ _$b(\\d)_$b(\\d) /(\\1\\2)/' |perl -pe '$b=\"\\b\";s/_$b _$b(\\d) /(\\1)/' |sed 's/ *$//' |sed \"s/$/|trim=false font=$font color=$color/\"; done\n\n\necho \"---\"\nfont=\"Monaco\"\ncolor=\"yellow\"\n\n# Change your name\necho \"Hello User\"\nfont=\"Monaco\"\ncolor=\"yellow\"\n"
				}
			],
			"path": "Time/DayAndNightClock.sh",
			"filename": "DayAndNightClock.sh",
			"dir": "Time",
			"docsPlugin": "Time/DayAndNightClock.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "DayAndNightClock",
			"version": "v1.0",
			"author": "FusionX",
			"authors": [
				{
					"name": "FusionX",
					"githubUsername": "FusionX13",
					"imageURL": "https://avatars.githubusercontent.com/u/62614658?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A clock that can do many things.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/DayAndNightClock.sh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/FusionX13/",
			"lastUpdated": "2023-07-15T09:53:35.492344+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/fuzzyclock.1s.py",
					"filename": "fuzzyclock.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eFuzzy Clock\u003c/xbar.title\u003e\n# \u003cxbar.author\u003eDylan Evans\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ewhonut\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay the current system time in a 'fuzzy' manner, rounding to the nearest 5 minutes and using words.\u003c/xbar.desc\u003e\n# \u003cxbar.version\u003e1.1\u003c/xbar.version\u003e\n\n# 1 second refresh rate may be overkill. Wording \u0026 formatting of the time may\n# also be easily altered below.\n\nfrom time import localtime\n\n\ndef round_to_nearest_five(n):\n    '''Round the float n to the nearest 5.'''\n    return int(5 * round(n / 5))\n\n\ndef next_hour(hour):\n    # modulo before adding one so that 11 =\u003e 12 and not 0\n    return (hour % 12) + 1\n\n\ndef fuzzy_time(struct_time):\n    '''Return the current 'fuzzy time' (rounded to the nearest 5 minutes) as a\n       string.'''\n\n    # Split it into hours \u0026 minutes and rounding the minutes to make the time\n    # 'fuzzy'. Use 12-hour clock.\n    hour = (struct_time.tm_hour % 12) or 12\n    minute = struct_time.tm_min + (struct_time.tm_sec / 60)\n    rounded_min = round_to_nearest_five(minute)\n    if rounded_min == 60:\n        rounded_min = 0\n        hour = next_hour(hour)\n\n    num_word = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\",\n                7: \"seven\", 8: \"eight\", 9: \"nine\", 10: \"ten\", 11: \"eleven\",\n                12: \"twelve\", 20: \"twenty\", 25: \"twenty-five\"}\n\n    # Work out what to display and display it.\n    if rounded_min == 0:\n        return \"{hr} o'clock\".format(hr=num_word[hour])\n    elif rounded_min == 15:\n        return \"quarter past {hr}\".format(hr=num_word[hour])\n    elif rounded_min \u003c 30:\n        return \"{min} past {hr}\".format(min=num_word[rounded_min],\n                                        hr=num_word[hour])\n    elif rounded_min == 30:\n        return \"half past {hr}\".format(hr=num_word[hour])\n    elif rounded_min == 45:\n        return \"quarter to {hr}\".format(hr=num_word[next_hour(hour)])\n    else:\n        return \"{min} to {hr}\".format(min=num_word[60-rounded_min],\n                                      hr=num_word[next_hour(hour)])\n\nif __name__ == '__main__':\n    print(fuzzy_time(localtime()))\n"
				}
			],
			"path": "Time/fuzzyclock.1s.py",
			"filename": "fuzzyclock.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/fuzzyclock.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Fuzzy Clock",
			"version": "1.1",
			"author": "Dylan Evans",
			"authors": [
				{
					"name": "Dylan",
					"githubUsername": "whonut",
					"imageURL": "https://avatars.githubusercontent.com/u/3856888?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display the current system time in a 'fuzzy' manner, rounding to the nearest 5 minutes and using words.",
			"imageURL": "",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.308561+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/googlecal.30m.js",
					"filename": "googlecal.30m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion: 6, loopfunc: true */\n\n/*\n\u003cxbar.title\u003eGoogle Calendar\u003c/xbar.title\u003e\n\u003cxbar.version\u003ev1.2.0\u003c/xbar.version\u003e\n\u003cxbar.author\u003eKodie Grantham\u003c/xbar.author\u003e\n\u003cxbar.author.github\u003ekodie\u003c/xbar.author.github\u003e\n\u003cxbar.desc\u003eShows upcoming events from your Google Calendar - Be sure to read the installation instructions here: https://github.com/kodie/bitbar-googlecal\u003c/xbar.desc\u003e\n\u003cxbar.image\u003ehttps://raw.githubusercontent.com/kodie/bitbar-googlecal/master/screenshot.png\u003c/xbar.image\u003e\n\u003cxbar.dependencies\u003enode, npm\u003c/xbar.dependencies\u003e\n\u003cxbar.dependencies.npm\u003enpm/home-config, npm/googleapis, npm/@hapi/hapi, npm/moment, npm/open\u003c/xbar.dependencies.npm\u003e\n\u003cxbar.abouturl\u003ehttps://github.com/kodie/bitbar-googlecal\u003c/xbar.abouturl\u003e\n*/\n\nvar ver = '1.2.1';\n\nvar defaults = {\n  clientId: '529707498278-prhql6kn67hevctqkt0qkgeha51bdhv7.apps.googleusercontent.com',\n  clientSecret: 'TokBYwcOxjSFfxUPk2cxkuyS',\n  clientRedirect: 'http://localhost:3000',\n  calendarId: 'primary',\n  dateColor: false,\n  dateFont: false,\n  dateFormat: 'dddd M/D',\n  dateSize: 12,\n  days: 7,\n  eventColor: false,\n  eventFont: false,\n  eventLength: 80,\n  eventSize: false,\n  expandEvents: true,\n  limit: 25,\n  showAllOfFirstDay: true,\n  showEmptyDays: false,\n  serverHost: 'localhost',\n  serverPort: 3000,\n  startDate: Date.now(),\n  textToday: ' (Today)',\n  textTomorrow: ' (Tomorrow)',\n  timeFormat: 'h:mma',\n  tokenFile: '.googlecal.json'\n};\n\nif (process.env.BitBar) {\n  var icon = 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAABD/WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMTEgNzkuMTU4MzI1LCAyMDE1LzA5LzEwLTAxOjEw' +\n  'OjIwICAgICAgICAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgeG1s' +\n  'bnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIgogICAgICAgICAgICB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhv' +\n  'dG9zaG9wLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDE2LTAyLTI3VDA4OjQ1OjQwWjwveG1wOkNyZWF0ZURhdGU+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE3LTAyLTIxVDE0OjQ4OjQ4LTA2OjAwPC94bXA6' +\n  'TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAxNy0wMi0yMVQxNDo0ODo0OC0wNjowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAg' +\n  'PHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGltYWdlL3BuZyB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjps' +\n  'aT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDozRTNFRTE5RTBCMjA2ODExODIyQUM1MTg3MTkxRkQ2Qzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxNi0wMi0yN1Qx' +\n  'MzoxNTo1NiswNDowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVy' +\n  'cz5mcm9tIGltYWdlL3BuZyB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDoz' +\n  'RjNFRTE5RTBCMjA2ODExODIyQUM1MTg3MTkxRkQ2Qzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxNi0wMi0yN1QxMzoxNTo1NiswNDowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2Ui' +\n  'PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6ZDVlNDdmMzItMTk5YS00Mzc5LWEwMDEtMjYzODFlMTEzOWI3PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDE2LTAyLTI3VDEzOjMxOjIxKzA0OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8' +\n  'c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNCAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRl' +\n  'ZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+ZGVyaXZlZDwvc3RFdnQ6' +\n  'YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5jb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZzwvc3RFdnQ6cGFyYW1ldGVycz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDph' +\n  'Y3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6ZDAyY2E5NTUtM2IyYy00MTIyLTkzZTAtOTJmZDI2YzY4ZTdlPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDE2LTAyLTI3VDEzOjMxOjIxKzA0OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNCAoTWFj' +\n  'aW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlE' +\n  'PnhtcC5paWQ6MDU2OTA0MWQtNzJmNy00MjFkLTgyZGMtMTAzNGIxZWE4NjE4PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDE3LTAyLTIxVDE0OjQ4OjQ4LTA2OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAg' +\n  'ICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgIDwvcmRmOlNlcT4KICAgICAgICAgPC94bXBNTTpIaXN0b3J5PgogICAgICAgICA8eG1wTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD54bXAuaWlkOmQ1ZTQ3ZjMyLTE5OWEtNDM3OS1hMDAxLTI2MzgxZTExMzliNzwv' +\n  'c3RSZWY6aW5zdGFuY2VJRD4KICAgICAgICAgICAgPHN0UmVmOmRvY3VtZW50SUQ+eG1wLmRpZDozRTNFRTE5RTBCMjA2ODExODIyQUM1MTg3MTkxRkQ2Qzwvc3RSZWY6ZG9jdW1lbnRJRD4KICAgICAgICAgICAgPHN0UmVmOm9yaWdpbmFsRG9jdW1lbnRJRD54bXAuZGlkOjNFM0VFMTlFMEIyMDY4MTE4MjJBQzUxODcxOTFGRDZDPC9zdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDwveG1wTU06RGVyaXZlZEZyb20+' +\n  'CiAgICAgICAgIDx4bXBNTTpEb2N1bWVudElEPmFkb2JlOmRvY2lkOnBob3Rvc2hvcDo4NzMxODkyMC0zOTA1LTExN2EtOTlkNS1kZjA0MGM5YWI5NTg8L3htcE1NOkRvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6MDU2OTA0MWQtNzJmNy00MjFkLTgyZGMtMTAzNGIxZWE4NjE4PC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6M0Uz' +\n  'RUUxOUUwQjIwNjgxMTgyMkFDNTE4NzE5MUZENkM8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICAgICAgICAgPHBob3Rvc2hvcDpDb2xvck1vZGU+MzwvcGhvdG9zaG9wOkNvbG9yTW9kZT4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+MTQ0MDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRp' +\n  'b24+MTQ0MDAwMC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxZ' +\n  'RGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PlQH85QAAAAgY0hSTQAAeiUAAICD' +\n  'AAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAc5JREFUeNrsl7FOAkEQhr9biSaEi5hYaaUliYWND2DrS/gCVlZ21iTSUVvyBD4EsTDB0GostAUPQpREzmYuGZbdYyV3WOifbPaY2X93bvef2QPy0QBepDUIx6q8BTSBVFqzDF5F+jpwDBj5/Qw8AVM1Nns+BA4884XyZsADMAQ4BQYq4hRoycBrZbsWW8sauypvAJwaoCM7oDHO2bWifHWgY4Bdx+AP6beVbdvyUQBv1wATh2NL+p6y9SwfBfAmAInjLPtq0IW0DP0cDfyUl/gCSIG2' +\n  'I+J2zuKr8JJIAog9W/oI3MnzGXAUWAdCeaNlAZSNkeGXUbEq1o1VxcrAJnApPVqEwzW++DATod4BI1oYARFQ81SzVHJ60/JNgc8AbqzunLkd0GKsAa9iy9qrmvjK8iViC+HGes2KZ4sMsGfZdOQ7jszZCeQuLORCKkcxlzJix1O+J4HcoAAixxvGYgeoOjjVQK43DTVmwJs10UjsyF1uv+UgkLsAlwjLxJwIf70S+gIoMw2DNPCfhn8zDd/XKP53fRcYSzzZeY092RHJeX9Zvg05hmVcLUgTKXGkS/5YFIma1kQ34Eu3rNaNgH3gFjjJyYqi' +\n  'MQPugfPvAQDFEQJT9lX76gAAAABJRU5ErkJggg==';\n\n  console.log(` | dropdown=false templateImage=${icon}`);\n  console.log('---');\n}\n\nvar npmDeps = 'home-config@0.1.0 googleapis@44 @hapi/hapi@18.4.0 moment@2.24.0 open@7.0.0';\nvar dirHome = (process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE);\nvar dirPlugins = process.argv[1].split('/').slice(0, -1).join('/');\n\ntry {\n  var cfg = Object.assign({}, defaults, require('home-config').load('.bitbarrc').googlecal);\n  var fs = require('fs');\n  var { google } = require('googleapis');\n  var Hapi = require('@hapi/hapi');\n  var moment = require('moment');\n  var open = require('open');\n\n  var oauth2Client = new google.auth.OAuth2(cfg.clientId, cfg.clientSecret, cfg.clientRedirect);\n} catch(e) {\n  if (process.env.BitBar) {\n    console.log(`Run Installation | bash=\"cd ${dirPlugins} \u0026\u0026 npm install ${npmDeps} \u0026\u0026 rm package-lock.json || true \u0026\u0026 node ${process.argv[1]} getNewToken\"`);\n    footer();\n  } else {\n    console.log(e);\n  }\n  process.exit(1);\n}\n\ncfg.tokenFile = cfg.tokenFile.replace('~', dirHome);\nif (cfg.tokenFile.indexOf('/') \u003c 0) { cfg.tokenFile = dirPlugins + '/' + cfg.tokenFile; }\n\nfunction refresh() {\n  open('bitbar://refreshPlugin?name=googlecal.*?.js');\n}\n\nfunction getNewToken() {\n  var authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: ['https://www.googleapis.com/auth/calendar.readonly']\n  });\n\n  open(authUrl);\n\n  console.log('');\n  console.log('If your browser did not do so automatically, please visit the following URL:');\n  console.log(authUrl);\n  console.log('');\n\n  var server = new Hapi.server({\n    port: cfg.serverPort,\n    host: cfg.serverHost,\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/',\n    handler: function(request, h) {\n      var code = request.query.code;\n\n      return new Promise((resolve) =\u003e {\n        oauth2Client.getToken(code, function(error, token) {\n          if (!error) {\n            fs.writeFileSync(cfg.tokenFile, JSON.stringify(token));\n            refresh();\n            msg = 'We\\'re all done here! You may now close this window.';\n          } else {\n            msg = 'An error occured while trying to get your authorization code: ' + error.message;\n          }\n  \n          server.stop({ timeout: 2000 });\n          console.log(msg);\n          resolve(msg);\n        });\n      });\n    }\n  });\n\n  server.start(function(error) {\n    if (error) {\n      console.log('An error occured while trying to start the server: ' + error.message);\n      process.exit(1);\n    } else {\n      console.log('Server running at ' + server.info.uri);\n      console.log('Waiting for authorization...');\n    }\n  });\n}\n\nfunction refreshToken(oauth2Client, cb) {\n  oauth2Client.refreshAccessToken(function(error, token) {\n    if (!error) {\n      oauth2Client.credentials = Object.assign({}, oauth2Client.credentials, token);\n\n      fs.writeFile(cfg.tokenFile, JSON.stringify(oauth2Client.credentials), function(error, data) {\n        if (!error) {\n          cb(oauth2Client);\n        } else {\n          footer([error.message]);\n          process.exit(1);\n        }\n      });\n    } else {\n      footer([error.message]);\n      process.exit(1);\n    }\n  });\n}\n\nfunction listEvents(oauth2Client) {\n  var calendar = google.calendar({ version: 'v3', auth: oauth2Client });\n  var processedCalendars = 0;\n  var today = moment().format('L');\n  var tomorrow = moment().add(1, 'days').format('L');\n  var start = moment(new Date(cfg.startDate));\n  var dateLimit, evnts = {}, errors = [];\n\n  if (!(cfg.calendarId instanceof Array)) {\n    cfg.calendarId = cfg.calendarId.split(',');\n  }\n\n  if (cfg.days) {\n    dateLimit = moment(start).add((cfg.days - 1), 'days').format('L');\n\n    if (cfg.showEmptyDays) {\n      for (var x = 0; x \u003c cfg.days; x++) {\n        evnts[moment(start).add(x, 'days').format('L')] = [];\n      }\n    }\n  }\n\n  for (var i = 0; i \u003c cfg.calendarId.length; i++) {\n    calendar.events.list({\n      calendarId: cfg.calendarId[i],\n      timeMin: (cfg.showAllOfFirstDay ? (new Date(moment(start).format('L'))) : (new Date(moment(start)))).toISOString(),\n      maxResults: cfg.limit,\n      singleEvents: true,\n      orderBy: 'startTime'\n    }, function(error, response) {\n      processedCalendars++;\n\n      if (!error) {\n        var events = response.items;\n\n        if (events.length) {\n          for (var j = 0; j \u003c events.length; j++) {\n            var event = events[j];\n            var eventStart = moment(event.start.dateTime || event.start.date).format('L');\n            var eventEnd = moment(event.end.dateTime || event.end.date).format('L');\n\n            if (cfg.days \u0026\u0026 eventStart \u003e dateLimit) { break; }\n\n            if (!evnts[eventStart]) { evnts[eventStart] = []; }\n            event.date = eventStart;\n            event.time = moment(event.start.dateTime || event.start.date).format(cfg.timeFormat);\n            evnts[eventStart].push(event);\n\n            if (cfg.expandEvents \u0026\u0026 eventStart != eventEnd) {\n              var day = new Date(eventStart);\n\n              while (new Date(day) \u003c= new Date(eventEnd)) {\n                var me = JSON.parse(JSON.stringify(event));\n\n                day.setDate(day.getDate() + 1);\n                me.date = moment(day).format('L');\n                me.time = moment(day).format(cfg.timeFormat);\n\n                if ((cfg.days \u0026\u0026 day \u003e dateLimit) || (event.end.date \u0026\u0026 me.date == moment(event.end.date).format('L'))) { break; }\n\n                if (!evnts[me.date]) { evnts[me.date] = []; }\n                evnts[me.date].push(me);\n              }\n            }\n          }\n        }\n\n        if (processedCalendars \u003e= cfg.calendarId.length) {\n          var dates = Object.keys(evnts);\n          var date, d, l, e = 0;\n\n          dates.sort();\n\n          for (var di = 0; di \u003c dates.length; di++) {\n            d = dates[di];\n\n            if (!evnts.hasOwnProperty(d)) { continue; }\n            if (e \u003e= cfg.limit) { break; }\n\n            if (date != d) {\n              if (date) { console.log('---'); }\n\n              date = moment(new Date(d).toISOString()).format(cfg.dateFormat);\n\n              if (d == today) { date += cfg.textToday; }\n              if (d == tomorrow) { date += cfg.textTomorrow; }\n\n              if (process.env.BitBar) {\n                date += ' |';\n                if (cfg.dateColor) { date += ` color=${cfg.dateColor}`; }\n                if (cfg.dateFont) { date += ` font=${cfg.dateFont}`; }\n                if (cfg.dateSize) { date += ` size=${cfg.dateSize}`; }\n              }\n\n              console.log(date);\n            }\n\n            if (evnts[d].length) {\n              evnts[d].sort(function(a, b) {\n                return moment(`${a.date} ${a.time}`, `MM/DD/YYYY ${cfg.timeFormat}`) - moment(`${b.date} ${b.time}`, `MM/DD/YYYY ${cfg.timeFormat}`);\n              });\n\n              for (var s = 0; (s \u003c evnts[d].length \u0026\u0026 s \u003c cfg.limit); s++) {\n                var str = `${evnts[d][s].time} - ${evnts[d][s].summary}`;\n\n                if (process.env.BitBar) {\n                  str += ` | href=${evnts[d][s].htmlLink}`;\n\n                  if (cfg.eventColor) { str += ` color=${cfg.eventColor}`; }\n                  if (cfg.eventFont) { str += ` font=${cfg.eventFont}`; }\n                  if (cfg.eventLength) { str += ` length=${cfg.eventLength}`; }\n                  if (cfg.eventSize) { str += ` size=${cfg.eventSize}`; }\n                }\n\n                console.log(str);\n                e++;\n              }\n            }\n          }\n\n          if (Object.keys(evnts).length === 0) {\n            console.log('No upcoming events found.');\n          }\n        }\n      } else {\n        errors.push(error.message + ' (calendar: ' + cfg.calendarId[i] +')');\n      }\n\n      if (processedCalendars \u003e= cfg.calendarId.length) {\n        footer(errors);\n      }\n    });\n  }\n}\n\nfunction run() {\n  if (fs.existsSync(cfg.tokenFile)) {\n    var token = fs.readFileSync(cfg.tokenFile, 'utf8');\n    if (token) { oauth2Client.credentials = JSON.parse(token); }\n\n    if (!oauth2Client.credentials.refresh_token) {\n      fs.unlinkSync(cfg.tokenFile);\n\n      console.log('No refresh token set');\n      console.log('You need to re-authorize this plugin with Google');\n\n      if (process.env.BitBar) {\n        console.log('Click here to view your currently authorized apps | href=https://myaccount.google.com/permissions');\n      } else {\n        console.log('Visit this URL to view your currently authorized apps: https://myaccount.google.com/permissions');\n      }\n\n      console.log('You will want to find this plugin and click \\'Remove\\'');\n\n      if (process.env.BitBar) {\n        console.log(`After you have done that, click here to re-authorize this plugin | bash=${process.argv[1]} param1=getNewToken refresh=false terminal=true`);\n      } else {\n        console.log('After you have done that, refresh this plugin and run the setup process again');\n      }\n\n      footer();\n      process.exit(1);\n    } else if (new Date(Date.now()) \u003e oauth2Client.credentials.expiry_date) {\n      refreshToken(oauth2Client, listEvents);\n    } else {\n      listEvents(oauth2Client);\n    }\n  } else {\n    if (process.env.BitBar) {\n      console.log(`Login To Google | bash=${process.argv[1]} param1=getNewToken refresh=false terminal=true`);\n      footer();\n    } else {\n      console.log('Google login required.');\n      getNewToken();\n    }\n  }\n}\n\nfunction footer(errors) {\n  if (errors \u0026\u0026 errors.length) {\n    console.log('---');\n    console.log('Errors:');\n\n    for (var e = 0; e \u003c errors.length; e++) {\n      console.log(errors[e]);\n    }\n  }\n\n  if (process.env.BitBar) {\n    console.log('---');\n    console.log(`BitBar Google Calendar Plugin v${ver}`);\n    console.log('--by Kodie Grantham | href=http://kodieg.com');\n    console.log('-----');\n    console.log('--GitHub Page | href=https://github.com/kodie/bitbar-googlecal');\n    console.log('--Changelog | href=https://github.com/kodie/bitbar-googlecal/blob/master/CHANGELOG.md');\n    console.log('-----');\n    console.log('--Refresh | refresh=true terminal=false');\n  }\n}\n\nif (process.argv[2] == 'getNewToken') {\n  getNewToken();\n} else if (process.argv[2] == 'refresh') {\n  refresh();\n} else {\n  run();\n}\n"
				}
			],
			"path": "Time/googlecal.30m.js",
			"filename": "googlecal.30m.js",
			"dir": "Time",
			"docsPlugin": "Time/googlecal.30m.js.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Google Calendar",
			"version": "v1.2.0",
			"author": "Kodie Grantham",
			"authors": [
				{
					"name": "Kodie Grantham",
					"githubUsername": "kodie",
					"imageURL": "https://avatars.githubusercontent.com/u/603949?v=4",
					"bio": "Lead Engineer/Systems Administrator for @itsahappymedium",
					"primary": true
				}
			],
			"desc": "Shows upcoming events from your Google Calendar - Be sure to read the installation instructions here: https://github.com/kodie/bitbar-googlecal",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/googlecal.30m.js.png",
			"dependencies": [
				"node",
				"npm"
			],
			"aboutURL": "https://github.com/kodie/bitbar-googlecal",
			"lastUpdated": "2023-07-15T09:53:36.324987+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/itstimeto.15m.py",
					"filename": "itstimeto.15m.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eIt's time to\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eKouji Anzai\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ekanzmrsw\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows emoji means that it's time to do something.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/qRgqIVq.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n\nimport datetime\n\nd = datetime.datetime.now().time()\nmorning = datetime.time(9,0,0)\ndaytime = datetime.time(17,30,0)\nnight = datetime.time(22,0,0)\n\nif d \u003c morning:\n\tprint('🌅')\nelif morning \u003c= d \u003c daytime:\n\tprint('👷')\nelif daytime \u003c= d \u003c night:\n\tprint('🍺')\nelse:\n\tprint('💤')\n"
				}
			],
			"path": "Time/itstimeto.15m.py",
			"filename": "itstimeto.15m.py",
			"dir": "Time",
			"docsPlugin": "Time/itstimeto.15m.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "It's time to",
			"version": "v1.1",
			"author": "Kouji Anzai",
			"authors": [
				{
					"name": "Koji Anzai",
					"githubUsername": "kanzmrsw",
					"imageURL": "https://avatars.githubusercontent.com/u/388826?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows emoji means that it's time to do something.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/itstimeto.15m.py.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.326134+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/lapse.30m.sh",
					"filename": "lapse.30m.sh",
					"content": "#!/usr/bin/env bash\n# Lapse: Progress Bar of Day, Week, Month, Year, and Life\n#\n# by Sai G (http://github.com/SaiG18)\n#\n# \u003cxbar.title\u003eLapse\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eSaiG18\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eSaiG18\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProgress Bar of Day, Week, Month, Year, and Life.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttp://github.com/SaiG18/\u003c/xbar.abouturl\u003e\n\n\n#Design\nwidth=20\nfill_char=\"▄\"\nempty_char=\"__\"\nbitbar=\"size=15 color=white font='Avenir'\"\nnow=$(date +%s)\n\n#Year Calculation\nyearStart=$(date -j 01010000 +%s)\nyearEnd=$(date -jr \"$yearStart\" -v +1y +%s)\nyearProgress=$(\necho \"($now - $yearStart) * 100 / ($yearEnd - $yearStart)\" | bc -l\n)\n\n#Month Calculation\nmonthStart=$(date -j \"$(date +%m)010000\" +%s)\nmonthEnd=$(date -jr \"$monthStart\" -v +1m +%s)\nmonthProgress=$(\necho \"($now - $monthStart) * 100 / ($monthEnd - $monthStart)\" | bc -l\n)\n\n#Day Calculation\ndayStart=$(date -j \"$(date +%m%d)0000\" +%s)\ndayEnd=$(date -jr \"$dayStart\" -v +1d +%s)\ndayProgress=$(\necho \"($now - $dayStart) * 100 / ($dayEnd - $dayStart)\" | bc -l\n)\n\n#Week Calculation\nweek_start=$(date +%u)\nweekProgress=$(\necho \"($week_start) * 100 / (7)\" | bc -l\n)\n\n#Life Calculation\n#Assuming Birth Year is 2000\npresentYear=$(date +%Y-2001)\npresentMonth=$(date +%m/12)\nlifeExpected=80\nlifeProgress=$(\necho \"($presentYear + $presentMonth) * 100 /($lifeExpected)\" | bc -l\n)\n\n#Percentage Rounding\nround() {\nprintf %.0f \"$1\"; \n}\n\n#Progress Bar Design\nprogress() {\nfilled=$(round \"$(echo \"$1 * $width / 100\" | bc -l)\")\nempty=$((width - filled))\nprintf \"$fill_char%0.s\" $(seq \"$filled\")\nprintf \"$empty_char%0.s\" $(seq \"$empty\")\n}\n\n#Menu Bar Main Display\necho \"Day: $(round \"$dayProgress\")%\"\necho ---\n\n# Day progress bar\necho \"Day: $(round \"$dayProgress\")%   | $bitbar\"\necho \"$(progress \"$dayProgress\")      | $bitbar\"\n\n# Week progress bar\necho \" | $bitbar\"\necho \"Week: $(round \"$weekProgress\")%   | $bitbar\"\necho \"$(progress \"$weekProgress\")       | $bitbar\"\n\n# Month progress bar\necho \" | $bitbar\"\necho \"Month: $(round \"$monthProgress\")%   | $bitbar\"\necho \"$(progress \"$monthProgress\")        | $bitbar\"\n\n# Year progress bar\necho \" | $bitbar\"\necho \"Year: $(round \"$yearProgress\")%   | $bitbar\"\necho \"$(progress \"$yearProgress\")       | $bitbar\"\n\n# Life progress bar\necho \" | $bitbar\"\necho \"Life: $(round \"$lifeProgress\")%   | $bitbar\"\necho \"$(progress \"$lifeProgress\")       | $bitbar\"\n"
				}
			],
			"path": "Time/lapse.30m.sh",
			"filename": "lapse.30m.sh",
			"dir": "Time",
			"docsPlugin": "Time/lapse.30m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Lapse",
			"version": "v1.0",
			"author": "SaiG18",
			"authors": [
				{
					"name": "Sai Gurrapu",
					"githubUsername": "SaiG18",
					"imageURL": "https://avatars.githubusercontent.com/u/9091157?v=4",
					"bio": "ML Engineer ",
					"primary": true
				}
			],
			"desc": "Progress Bar of Day, Week, Month, Year, and Life.",
			"imageURL": "",
			"dependencies": [
				"bash"
			],
			"aboutURL": "http://github.com/SaiG18/",
			"lastUpdated": "2023-07-15T09:53:36.360468+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/persiandate.1m.sh",
					"filename": "persiandate.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003ePersian Date\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eIlia Vakili\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003etheReticent\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows Persian date\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003e\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ejcal\u003c/xbar.dependencies\u003e\n\n# To fix the \"command not found\" caused by installing jcal using brew\nPATH=/usr/local/bin:$PATH\n\njdate \"+%W\"\necho \"---\"\njdate \"+%G %d %V %Y\"\n"
				}
			],
			"path": "Time/persiandate.1m.sh",
			"filename": "persiandate.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/persiandate.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Persian Date",
			"version": "v0.1",
			"author": "Ilia Vakili",
			"authors": [
				{
					"name": "Ilia Vakili",
					"githubUsername": "theReticent",
					"imageURL": "https://avatars.githubusercontent.com/u/10159793?v=4",
					"bio": "CTO @EtickPars",
					"primary": true
				}
			],
			"desc": "Shows Persian date",
			"imageURL": "",
			"dependencies": [
				"jcal"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.390162+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/pomodoro.1s.sh",
					"filename": "pomodoro.1s.sh",
					"content": "#!/bin/bash\n#\n# \u003cxbar.title\u003ePomodoro Timer\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eGoran Gajic\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003egorangajic\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003ePomodoro Timer that uses Pomodoro Technique™\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/T0zFY89.png\u003c/xbar.image\u003e\n\nWORK_TIME=25\nBREAK_TIME=3\n\nTMP_DIR='/tmp'\n\nSAVE_LOCATION=$TMPDIR/bitbar-promodo\nTOMATO='🍅'\n\nWORK_TIME_IN_SECONDS=$((WORK_TIME * 60))\nBREAK_TIME_IN_SECONDS=$((BREAK_TIME * 60))\n\nCURRENT_TIME=$(date +%s)\n\nif [ -f \"$SAVE_LOCATION\" ];\nthen\n    DATA=$(cat \"$SAVE_LOCATION\")\n\nelse\n    DATA=\"$CURRENT_TIME|0\"\nfi\n\nTIME=$(echo \"$DATA\" | cut -d \"|\" -f1)\nSTATUS=$(echo \"$DATA\" | cut -d \"|\" -f2)\n\nfunction changeStatus {\n    echo \"$CURRENT_TIME|$1\" \u003e \"$SAVE_LOCATION\";\n    osascript -e \"display notification \\\"$2\\\" with title \\\"$TOMATO Pomodoro\\\" sound name \\\"$3\\\"\" \u0026\u003e /dev/null\n}\n\nfunction breakMode {\n    changeStatus \"2\" \"Break Mode\" \"Glass\"\n}\n\nfunction workMode {\n    changeStatus \"1\" \"Work Mode\" \"Blow\"\n}\n\nfunction disabledMode {\n    changeStatus \"0\" \"Disabled\" \"Pebble\"\n}\n\ncase \"$1\" in\n\"work\")\n    workMode\n    exit\n  ;;\n\"break\")\n    breakMode\n    exit\n  ;;\n\"disable\")\n    disabledMode\n    exit\n  ;;\nesac\n\n\n\nfunction timeLeft {\n    local FROM=$1\n    local TIME_DIFF=$((CURRENT_TIME - TIME))\n    local TIME_LEFT=$((FROM - TIME_DIFF))\n    echo \"$TIME_LEFT\";\n}\n\nfunction getSeconds {\n    echo $(($1 % 60))\n}\n\nfunction getMinutes {\n    echo $(($1 / 60))\n}\n\nfunction printTime {\n    SECONDS=$(getSeconds \"$1\")\n    MINUTES=$(getMinutes \"$1\")\n    printf \"%s %02d:%02d| color=%s\\n\" \"$TOMATO\" \"$MINUTES\" \"$SECONDS\"  \"$2\"\n}\n\ncase \"$STATUS\" in\n# STOP MODE\n\"0\")\n    echo \"$TOMATO\"\n  ;;\n\"1\")\n    TIME_LEFT=$(timeLeft $WORK_TIME_IN_SECONDS)\n    if (( \"$TIME_LEFT\" \u003c 0 )); then\n        breakMode\n    fi\n    printTime \"$TIME_LEFT\" \"red\"\n  ;;\n\"2\")\n    TIME_LEFT=$(timeLeft $BREAK_TIME_IN_SECONDS)\n    if ((\"$TIME_LEFT\" \u003c 0)); then\n        workMode\n    fi\n    printTime \"$TIME_LEFT\" \"green\"\n  ;;\nesac\n\necho \"---\";\necho \"👔 Work | bash=\\\"$0\\\" param1=work terminal=false\"\necho \"☕ Break | bash=\\\"$0\\\" param1=break terminal=false\"\necho \"🔌 Disable | bash=\\\"$0\\\" param1=disable terminal=false\"\n"
				}
			],
			"path": "Time/pomodoro.1s.sh",
			"filename": "pomodoro.1s.sh",
			"dir": "Time",
			"docsPlugin": "Time/pomodoro.1s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Pomodoro Timer",
			"version": "v1.0",
			"author": "Goran Gajic",
			"authors": [
				{
					"name": "Goran Gajic",
					"githubUsername": "gorangajic",
					"imageURL": "https://avatars.githubusercontent.com/u/249310?v=4",
					"bio": "Full Stack Developer \r\n- \r\nNode.js, React, React-Native",
					"primary": true
				}
			],
			"desc": "Pomodoro Timer that uses Pomodoro Technique™",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/pomodoro.1s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.410802+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/pomodoro2.30s.sh",
					"filename": "pomodoro2.30s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003ePomodoro Timer\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eMartin Kourim\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003emkoura\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eTimer that uses Pomodoro timeboxing\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/WswKpT4.png\u003c/xbar.image\u003e\n\n# pomodoro duration\nreadonly POMODORO=1500 # 25 min\n# break duration\nreadonly BREAK=240 # 4 min\n# long break duration\nreadonly LONG_BREAK=1200 # 20 min\n# script to run (file path)\nSCRIPT=\"\"\n\n# SCRIPT file example\n##!/bin/bash\n## plays sound when activity is finished\n#case \"$1\" in\n#  \"finished\"|\"break_finished\"|\"long_break_finished\" )\n#    play some_sound_file\n#esac\n\n# icons\nreadonly TOMATO_ICON=\"🍅\"\nreadonly BREAK_ICON=\"☕\"\nreadonly LONG_BREAK_ICON=\"🎉\"\nreadonly PAUSE_BIG_ICON=\"▮▮\"\nreadonly PAUSE_ICON=\"⏸\"\nreadonly STOP_ICON=\"⏹\"\nreadonly CHECKED_ICON=\"✓\"\nreadonly UNCHECKED_ICON=\"✗\"\n\n# ---\n\n# must be updated at least every $MAX_UPDATE_INTERVAL seconds\nreadonly MAX_UPDATE_INTERVAL=60\n\n# file for saving status\nreadonly STATUS_FILE=\"$HOME/.bitbar_pomodoro\"\n\n# running on Linux or Mac OS X?\n[ -e /proc/uptime ] \u0026\u0026 LINUX=\"true\" || LINUX=\"\"\nreadonly LINUX\n\n# checks if script is executable\n[ -x \"$SCRIPT\" ] || SCRIPT=\"\"\nreadonly SCRIPT\n\n# saves current timestamp to the \"now\" variable\nset_now() {\n  [ -n \"$now\" ] \u0026\u0026 return\n\n  # avoid spawning processes if possible\n  if [ -n \"$LINUX\" ]; then\n    now=\"$(read -r s _  \u003c /proc/uptime \u0026\u0026 echo \"${s%.*}\")\"\n  else\n    now=\"$(date +%s)\"\n  fi\n}\n\nrun_script() {\n  [ -n \"$SCRIPT\" ] \u0026\u0026 $SCRIPT \"$@\" \u0026\n}\n\n# displays desktop notification\nnotify_osd() {\n  if [ -n \"$LINUX\" ]; then\n    notify-send \"$@\" 2\u003e/dev/null\n  else\n    osascript -e \"display notification \\\"$*\\\" with title \\\"$TOMATO_ICON Pomodoro\\\"\" 2\u003e/dev/null\n  fi\n}\n\n# writes current status to status file\nstatus_write() {\n  echo \"$tstamp $togo $pomodoros $state $activity $loop\" \u003e \"$STATUS_FILE\"\n}\n\n# resets the status file\nstatus_reset() {\n  tstamp=0; togo=0; pomodoros=0; state=\"STOP\"; activity=\"pomodoro\"; loop=\"${loop:-on}\"\n  status_write\n}\n\n# toggles whether to loop pomodoros\nloop_toggle() {\n  [ \"$loop\" = \"on\" ] \u0026\u0026 loop=\"off\" || loop=\"on\"\n  status_write\n}\n\n# starts pomodoro\npomodoro_start() {\n  set_now\n  tstamp=\"$now\"; togo=\"$POMODORO\"; state=\"RUN\"; activity=\"pomodoro\"\n  status_write\n  run_script start\n}\n\n# starts break\npomodoro_break() {\n  set_now\n  tstamp=\"$now\"; togo=\"$BREAK\"; state=\"RUN\"; activity=\"break\"\n  status_write\n  run_script break\n}\n\n# starts long break\npomodoro_long_break() {\n  set_now\n  tstamp=\"$now\"; togo=\"$LONG_BREAK\"; pomodoros=0; state=\"RUN\"; activity=\"long_break\"\n  status_write\n  run_script long_break\n}\n\n# detects stale records, i.e. when computer\n# was turned off during pomodoro\nstale_record() {\n  case \"$activity\" in\n    \"pomodoro\")\n      local interval=\"$POMODORO\"\n      ;;\n    \"break\")\n      local interval=\"$BREAK\"\n      ;;\n    \"long_break\")\n      local interval=\"$LONG_BREAK\"\n      ;;\n  esac\n  if ((tdiff \u003c 0)) || ((tdiff \u003e (interval + MAX_UPDATE_INTERVAL + 1) )); then\n    status_reset\n    return 1\n  fi\n  return 0\n}\n\n# checks if activity is finished\n# notifies if so and starts a new activity\npomodoro_update() {\n  case \"$state\" in\n    \"STOP\"|\"PAUSE\")\n      return\n      ;;\n    \"RUN\")\n      ;;\n    *)\n      status_reset\n      return\n      ;;\n  esac\n\n  # RUN\n  set_now\n  tdiff=\"$((now - tstamp))\"\n  stale_record || return 1\n  case \"$activity\" in\n    \"pomodoro\")\n      togo=\"$((POMODORO - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        pomodoros=\"$((${pomodoros:-0} + 1))\"\n        run_script finished\n        if [ \"$pomodoros\" -lt 4 ]; then\n          notify_osd \"Pomodoro completed, take a break.\"\n          pomodoro_break\n        else\n          notify_osd \"Four pomodoros completed, take a long break.\"\n          pomodoro_long_break\n        fi\n      fi\n      ;;\n    \"break\")\n      togo=\"$((BREAK - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        run_script break_finished\n        if [ \"$loop\" = \"off\" ]; then\n          notify_osd \"Break is over.\"\n          status_reset\n        else\n          notify_osd \"Break is over, focus on new pomodoro.\"\n          pomodoro_start\n        fi\n      fi\n      ;;\n    \"long_break\")\n      togo=\"$((LONG_BREAK - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        run_script long_break_finished\n        if [ \"$loop\" = \"off\" ]; then\n          notify_osd \"Long break is over.\"\n          status_reset\n        else\n          notify_osd \"Long break is over, focus on new pomodoro.\"\n          pomodoro_start\n        fi\n      fi\n      ;;\n    *)\n      status_reset\n      ;;\n  esac\n}\n\n# pauses or resumes activity\npause_resume() {\n  pomodoro_update\n  case \"$state\" in\n    \"RUN\")\n      # pause\n      state=\"PAUSE\"\n      status_write # saves also up-to-date \"togo\"\n      run_script pause\n      ;;\n    \"PAUSE\")\n      # resume\n      set_now\n      # sets new timestamp according to the saved \"togo\"\n      case \"$activity\" in\n        \"pomodoro\")\n          tstamp=\"$((now - (POMODORO - togo) ))\"\n          ;;\n        \"break\")\n          tstamp=\"$((now - (BREAK - togo) ))\"\n          ;;\n        \"long_break\")\n          tstamp=\"$((now - (LONG_BREAK - togo) ))\"\n          ;;\n      esac\n      state=\"RUN\"\n      status_write\n      run_script resume\n      ;;\n    *)\n      status_reset\n      ;;\n  esac\n}\n\n# calculates remaining time\n# saves remaining minutes to \"rem\"\n# saves remaining seconds to \"res\"\ncalc_remaining_time() {\n  [ -n \"$rem\" ] \u0026\u0026 return\n  rem=\"$((togo / 60 % 60))\"\n  res=\"$((togo % 60))\"\n}\n\n# prints remaining time in MIN:SEC format\nprint_remaining_time() {\n  calc_remaining_time\n  printf \"%02d:%02d\" \"$rem\" \"$res\"\n}\n\n# prints remaining time in whole minutes\nprint_remaining_minutes() {\n  calc_remaining_time\n  if [ \"$rem\" -eq 0 ]; then\n    printf \"\u0026lt;1m\"\n  else\n    [ \"$res\" -ge 30 ] \u0026\u0026 remaining=\"$((rem + 1))\" || remaining=\"$rem\"\n    printf \"%02dm\" \"$remaining\"\n  fi\n}\n\n# prints menu for argos/bitbar\nprint_menu() {\n  case \"$state\" in\n    \"STOP\")\n      echo \"$TOMATO_ICON\"\n      echo \"---\"\n      echo \"Pomodoro | bash=\\\"$0\\\" param1=start terminal=false refresh=true\"\n      echo \"Break | bash=\\\"$0\\\" param1=break terminal=false refresh=true\"\n      echo \"Long break | bash=\\\"$0\\\" param1=long_break terminal=false refresh=true\"\n      ;;\n    \"RUN\")\n      case \"$activity\" in\n        \"pomodoro\")\n          echo \"$TOMATO_ICON $(print_remaining_minutes)\"\n          local caption=\"\"\n          ;;\n        \"break\")\n          echo \"$BREAK_ICON $(print_remaining_minutes)\"\n          local caption=\"Break: \"\n          ;;\n        \"long_break\")\n          echo \"$LONG_BREAK_ICON $(print_remaining_minutes)\"\n          local caption=\"Long break: \"\n          ;;\n      esac\n      echo \"---\"\n      echo \"${caption}$(print_remaining_time) | refresh=true\"\n      echo \"${PAUSE_ICON} pause | bash=\\\"$0\\\" param1=pause terminal=false refresh=true\"\n      echo \"${STOP_ICON} stop | bash=\\\"$0\\\" param1=stop terminal=false refresh=true\"\n      ;;\n    \"PAUSE\")\n      echo \"$PAUSE_BIG_ICON $(print_remaining_minutes)\"\n      echo \"---\"\n      case \"$activity\" in\n        \"pomodoro\")\n          local caption=\"Paused\"\n          ;;\n        \"break\")\n          local caption=\"Break\"\n          ;;\n        \"long_break\")\n          local caption=\"Long break\"\n          ;;\n      esac\n      echo \"${caption}: $(print_remaining_time) | refresh=true\"\n      echo \"${PAUSE_ICON} resume | bash=\\\"$0\\\" param1=pause terminal=false refresh=true\"\n      echo \"${STOP_ICON} stop | bash=\\\"$0\\\" param1=stop terminal=false refresh=true\"\n      ;;\n  esac\n\n  echo \"---\"\n  if [ \"$loop\" = \"off\" ]; then local acheck=\"$UNCHECKED_ICON\"; else local acheck=\"$CHECKED_ICON\"; fi\n  echo \"Loop pomodoros: ${acheck} | bash=\\\"$0\\\" param1=loop_toggle terminal=false refresh=true\"\n}\n\nmain() {\n  [ ! -e \"$STATUS_FILE\" ] \u0026\u0026 : \u003e \"$STATUS_FILE\"\n\n  # reads current status from status file\n  read -r tstamp togo pomodoros state activity loop _ \\\n    \u003c \u003c({ read -r line; echo \"$line\"; } \u003c \"$STATUS_FILE\")\n\n  case \"$1\" in\n    \"start\")\n      pomodoro_start\n      ;;\n    \"stop\")\n      status_reset\n      run_script stop\n      ;;\n    \"pause\")\n      pause_resume\n      ;;\n    \"break\")\n      pomodoro_break\n      ;;\n    \"long_break\")\n      pomodoro_long_break\n      ;;\n    \"loop_toggle\")\n      loop_toggle\n      ;;\n    *)\n      pomodoro_update\n      ;;\n  esac\n\n  print_menu\n}\n\nmain \"$@\"\n"
				}
			],
			"path": "Time/pomodoro2.30s.sh",
			"filename": "pomodoro2.30s.sh",
			"dir": "Time",
			"docsPlugin": "Time/pomodoro2.30s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Pomodoro Timer",
			"version": "v1.1",
			"author": "Martin Kourim",
			"authors": [
				{
					"name": "Martin Kourim",
					"githubUsername": "mkoura",
					"imageURL": "https://avatars.githubusercontent.com/u/2352619?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Timer that uses Pomodoro timeboxing",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/pomodoro2.30s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.569722+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/prayer-time.1m.py",
					"filename": "prayer-time.1m.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003ePrayer Time\u003c/xbar.title\u003e\n# \u003cxbar.version\u003e1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eKagan Inan\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ekaaninan\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eImsak ve aksam ezani saatlerine ne kadar kaldigini takip edin !\u003c/xbar.desc\u003e\n\nimport urllib.request, urllib.error, urllib.parse\nimport json\nfrom datetime import datetime\nimport time\n\n# Istanbul, Turkey -\u003e 9541\n# For others: https://ezanvakti.herokuapp.com/\nlocation_code = 9541\n\nurl_prayer = \"https://ezanvakti.herokuapp.com/vakitler?ilce=%s\" % location_code\nurl_time = \"http://worldclockapi.com/api/json/utc/now\"\n\n\n# Get UTC time and convert to local time\nresult_time = urllib.request.urlopen(url_time).read()\njsonDataTime = json.loads(result_time)\nnow_server = jsonDataTime['currentDateTime']\nutc = datetime.strptime(now_server[:-1], '%Y-%m-%dT%H:%M')\nnow_timestamp = time.time()\noffset = datetime.fromtimestamp(now_timestamp) - datetime.utcfromtimestamp(now_timestamp)\nnow_server = utc + offset\n\n\n# Get Prayer Time\nresult = urllib.request.urlopen(url_prayer).read()\njsonData = json.loads(result)\nFMT = '%H:%M'\nimsak = datetime.strptime(jsonData[0][\"Imsak\"], FMT)\naksam = datetime.strptime(jsonData[0][\"Aksam\"], FMT)\nnow = datetime.strptime(now_server.strftime(FMT), FMT)\n\n\n# Select time gap\nif now \u003c imsak:\n\tprint(':watch: ' + str(imsak - now)[:-3])\nelse:\n\tprint(':watch: ' + str(aksam - now)[:-3])\n\nprint(\"---\")\nprint(\"Imsak: \" + datetime.strftime(imsak, FMT))\nprint(\"Aksam: \" + datetime.strftime(aksam, FMT))\n"
				}
			],
			"path": "Time/prayer-time.1m.py",
			"filename": "prayer-time.1m.py",
			"dir": "Time",
			"docsPlugin": "Time/prayer-time.1m.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Prayer Time",
			"version": "1.1",
			"author": "Kagan Inan",
			"authors": [
				{
					"name": "Kagan Inan",
					"githubUsername": "kaaninan",
					"imageURL": "https://avatars.githubusercontent.com/u/4940927?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Imsak ve aksam ezani saatlerine ne kadar kaldigini takip edin !",
			"imageURL": "",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.592097+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/epoch.60s.sh",
					"filename": "epoch.60s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cxbar.title\u003ePretty Epoch Time\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAnthony Jarvis-Clark\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eanthonyclarka2\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplays epoch (unix) time separated by commas.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/ltLqOcy.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash,gnu-sed\u003c/xbar.dependencies\u003e\n\nBREWPATH=/usr/local/bin\nif [[ $(sysctl -n machdep.cpu.brand_string) =~ \"Apple\" ]]; then\n  BREWPATH=/opt/homebrew/bin\nfi\n\nEPOCHNOW=$(/bin/date +%s | ${BREWPATH}/gsed ':a;s/\\B[0-9]\\{3\\}\\\u003e/,\u0026/;ta')\n\necho \"{\" \"${EPOCHNOW}\" \"}\"\n"
				}
			],
			"path": "Time/epoch.60s.sh",
			"filename": "epoch.60s.sh",
			"dir": "Time",
			"docsPlugin": "Time/epoch.60s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Pretty Epoch Time",
			"version": "v1.0",
			"author": "Anthony Jarvis-Clark",
			"authors": [
				{
					"name": "Anthony Clark",
					"githubUsername": "anthonyclarka2",
					"imageURL": "https://avatars.githubusercontent.com/u/5565189?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays epoch (unix) time separated by commas.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/epoch.60s.sh.png",
			"dependencies": [
				"bash",
				"gnu-sed"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.152007+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/ProcessBarOfYear.1d.sh",
					"filename": "ProcessBarOfYear.1d.sh",
					"content": "#!/usr/bin/env bash\n\n# Process Bar of Year: Dividing the year into 100 pieces.\n#\n# by Cnfn (http://github.com/cnfn)\n#\n# \u003cxbar.title\u003eProcess Bar of Year\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eCnfn\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ecnfn\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProcess Bar of Year: Dividing the year into 100 pieces. More info: https://github.com/cnfn/BitBarPlugins/tree/master/ProcessBarOfYear\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/cnfn/grocery/master/images/blog/bitbar_plugin_process_bar_of_year.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/cnfn/BitBarPlugins/tree/master/ProcessBarOfYear\u003c/xbar.abouturl\u003e\n\nget_total_days_of_year() {\n\tyear=$1\n\tif (( !(year % 4) \u0026\u0026 ( year % 100 || !(year % 400)  )  ))\n\tthen\n\t\techo 366\n\telse\n\t\techo 365\n\tfi\n}\n\ndays_of_year=\"$(get_total_days_of_year \"$(date +%Y)\")\"\n\necho \"$(echo \"$(date +%j) * 100 / $days_of_year\" | bc)\"\"%\"\necho \"---\"\necho -n \"$(date +%Y) has completed \"\necho -n \"$(date +%j | bc)\"\necho \" days\"\n"
				}
			],
			"path": "Time/ProcessBarOfYear.1d.sh",
			"filename": "ProcessBarOfYear.1d.sh",
			"dir": "Time",
			"docsPlugin": "Time/ProcessBarOfYear.1d.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Process Bar of Year",
			"version": "v1.0",
			"author": "Cnfn",
			"authors": [
				{
					"name": "Cnfn",
					"githubUsername": "cnfn",
					"imageURL": "https://avatars.githubusercontent.com/u/1445517?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Process Bar of Year: Dividing the year into 100 pieces. More info: https://github.com/cnfn/BitBarPlugins/tree/master/ProcessBarOfYear",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/ProcessBarOfYear.1d.sh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/cnfn/BitBarPlugins/tree/master/ProcessBarOfYear",
			"lastUpdated": "2023-07-15T09:53:35.497648+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/productivitycountdowns.1h.sh",
					"filename": "productivitycountdowns.1h.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cxbar.title\u003eProductivity Countdowns\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eJacopo Lorenzetti\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ejlorenzetti\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eThis plugin will show the current ISO week number and a few productivity boosting countdowns.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/jlorenzetti/xbar-productivity-countdowns/main/image.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003e\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/jlorenzetti/xbar-productivity-countdowns\u003c/xbar.abouturl\u003e\n# \u003cxbar.var\u003estring(VAR_DATE_OF_BIRTH=1980-12-31): Your date of birth in ISO 8601 format.\u003c/xbar.var\u003e\n# \u003cxbar.var\u003enumber(VAR_LIFE_EXPECTANCY=80): Your life expectancy in years.\u003c/xbar.var\u003e\n\nunix_time=$(date +%s)\nday_of_year=$(date +%j)\nday_of_week=$(date +%w)\nweek_number=$(date +%V)\nmonth_number=$(date +%m)\nquarter=$(((month_number - 1) / 3 + 1))\n\nfunction format_countdown {\n    if [[ $1 -lt 0 ]]; then\n        echo No \"$3\" left\n    elif [[ $1 -eq 0 ]]; then\n        echo Last \"$2\"\n    else\n        echo \"$1\" \"$3\"\n    fi\n}\n\nfunction workdays_to {\n    # Adapted from https://stackoverflow.com/a/60220672/18289443\n    days=$((($1 - unix_time) / 86400 - 2))\n    weeks=$((days / 7))\n    frac=$((days % 7))\n    if ((day_of_week == 0)); then\n        if ((frac \u003e 0)); then\n            add=1\n        else\n            add=0\n        fi\n    else\n        magic=$((frac + (day_of_week + 6) % 7))\n        if ((magic \u003c 6)); then\n            add=0\n        elif ((magic == 6)); then\n            add=1\n        else\n            add=2\n        fi\n    fi\n    holidays=$((weeks * 2 + add))\n    workdays=$((days - holidays))\n\n    format_countdown $workdays 'work day' 'work days'\n}\n\nend_of_week_unix_time=$(date -v+sun -v23H -v59M -v59S +%s)\nworkdays_in_week=$(workdays_to \"$end_of_week_unix_time\")\n\nnext_quarter=$((quarter + 1))\n[ $next_quarter -gt 4 ] \u0026\u0026 next_quarter=1\nstarting_month_of_next_quarter=$(((next_quarter - 1) * 3 + 1))\nstart_of_next_quarter_unix_time=$(date -j -f \"%m-%d %H:%M:%S\" \"$starting_month_of_next_quarter-01 00:00:00\" +%s)\nweeks_in_quarter=$(format_countdown $(((start_of_next_quarter_unix_time - unix_time) / 604800)) week weeks)\nworkdays_in_quarter=$(workdays_to \"$start_of_next_quarter_unix_time\")\n\nend_of_year_unix_time=$(date -j -f \"%m-%d %H:%M:%S\" \"12-31 23:59:59\" +%s)\nweeks_in_year=$(format_countdown $(((end_of_year_unix_time - unix_time) / 604800)) week weeks)\nworkdays_in_year=$(workdays_to \"$end_of_year_unix_time\")\n\nexpected_end_of_life_year=$((${VAR_DATE_OF_BIRTH:0:4} + VAR_LIFE_EXPECTANCY))\nexpected_end_of_life_unix_time=$(date -j -f \"%Y-%m-%d\" \"$expected_end_of_life_year-${VAR_DATE_OF_BIRTH:5:5}\" +%s)\nexpected_end_of_life_days=$(format_countdown $(((expected_end_of_life_unix_time - unix_time) / 86400)) day days)\nexpected_end_of_life_weeks=$(format_countdown $(((expected_end_of_life_unix_time - unix_time) / 604800)) week weeks)\nexpected_end_of_life_quarters=$(format_countdown $(((expected_end_of_life_unix_time - unix_time) / 7889400)) quarter quarters)\n\necho W\"$week_number\"\necho \"---\"\necho Quarter \"$quarter\" Week \"$week_number\" Day \"$day_of_year\"\necho \"---\"\necho \"$workdays_in_week\" in W\"$week_number\"\necho \"$workdays_in_quarter\" in Q\"$quarter\"\necho \"$workdays_in_year\" in the year\necho \"---\"\necho \"$weeks_in_quarter\" in Q\"$quarter\"\necho \"$weeks_in_year\" in the year\necho \"---\"\necho \"$expected_end_of_life_quarters\" to \"${VAR_LIFE_EXPECTANCY}\"\necho \"$expected_end_of_life_weeks\" to \"${VAR_LIFE_EXPECTANCY}\"\necho \"$expected_end_of_life_days\" to \"${VAR_LIFE_EXPECTANCY}\"\n"
				}
			],
			"path": "Time/productivitycountdowns.1h.sh",
			"filename": "productivitycountdowns.1h.sh",
			"dir": "Time",
			"docsPlugin": "Time/productivitycountdowns.1h.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Productivity Countdowns",
			"version": "v1.1",
			"author": "Jacopo Lorenzetti",
			"authors": [
				{
					"name": "Jacopo Lorenzetti",
					"githubUsername": "jlorenzetti",
					"imageURL": "https://avatars.githubusercontent.com/u/58301906?v=4",
					"bio": "Hybrid designer+developer based in Rome. Founder of Bunker.",
					"primary": true
				}
			],
			"desc": "This plugin will show the current ISO week number and a few productivity boosting countdowns.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/productivitycountdowns.1h.sh.png",
			"dependencies": [],
			"aboutURL": "https://github.com/jlorenzetti/xbar-productivity-countdowns",
			"lastUpdated": "2023-07-15T09:53:36.594945+01:00",
			"vars": [
				{
					"type": "string",
					"name": "VAR_DATE_OF_BIRTH",
					"label": "Date of birth",
					"default": "1980-12-31",
					"desc": "Your date of birth in ISO 8601 format.",
					"options": null
				},
				{
					"type": "number",
					"name": "VAR_LIFE_EXPECTANCY",
					"label": "Life expectancy",
					"default": "80",
					"desc": "Your life expectancy in years.",
					"options": null
				}
			],
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/progress.1h.sh",
					"filename": "progress.1h.sh",
					"content": "#!/usr/bin/env bash\n\n# Progress Bar of Year, Month and Day: See the big picture.\n#\n# by Mucahit (http://github.com/mucahit)\n#\n# \u003cxbar.title\u003eProgress Bar of Year, Month and Day\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eMucahit\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eMucahit\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProgress Bar of Year, Month and Day: See the big picture.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://user-images.githubusercontent.com/5108459/43047918-c946f6bc-8de7-11e8-940a-036f44087b92.jpg\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://gist.github.com/mucahit/0bd2ace80ded22328d0c638715a4911b\u003c/xbar.abouturl\u003e\n\nwidth=20\nfill_char=\"▄\"\nempty_char=\"\"\n\nbitbar=\"size=14 color=white font='Avenir'\"\n\nnow=$(date +%s)\n\nY_start=$(date -j 01010000 +%s)\nY_end=$(date -jr \"$Y_start\" -v +1y +%s)\nY_progress=$(\n    echo \"($now - $Y_start) * 100 / ($Y_end - $Y_start)\" | bc -l\n)\n\nm_start=$(date -j \"$(date +%m)010000\" +%s)\nm_end=$(date -jr \"$m_start\" -v +1m +%s)\nm_progress=$(\n    echo \"($now - $m_start) * 100 / ($m_end - $m_start)\" | bc -l\n)\n\nd_start=$(date -j \"$(date +%m%d)0000\" +%s)\nd_end=$(date -jr \"$d_start\" -v +1d +%s)\nd_progress=$(\n    echo \"($now - $d_start) * 100 / ($d_end - $d_start)\" | bc -l\n)\n\nround() { printf %.0f \"$1\"; }\n\nprogress() {\n    filled=$(round \"$(echo \"$1 * $width / 100\" | bc -l)\")\n    empty=$((width - filled))\n    # repeat the characters using printf\n    printf \"$fill_char%0.s\" $(seq \"$filled\")\n    printf \"$empty_char%0.s\" $(seq \"$empty\")\n}\n\necho \"$(round \"$Y_progress\")%\"\necho ---\n\n# day + progress bar\necho \"Day: $(round \"$d_progress\")%   | $bitbar\"\necho \"$(progress \"$d_progress\")      | $bitbar\"\n\n# month + progress bar\necho \" | $bitbar\"\necho \"Month: $(round \"$m_progress\")%   | $bitbar\"\necho \"$(progress \"$m_progress\")        | $bitbar\"\n\n# year + progress bar\"\necho \" | $bitbar\"\necho \"Year: $(round \"$Y_progress\")%   | $bitbar\"\necho \"$(progress \"$Y_progress\")       | $bitbar\"\n"
				}
			],
			"path": "Time/progress.1h.sh",
			"filename": "progress.1h.sh",
			"dir": "Time",
			"docsPlugin": "Time/progress.1h.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Progress Bar of Year, Month and Day",
			"version": "v1.0",
			"author": "Mucahit",
			"authors": [
				{
					"name": "Mucahit Tutuncu",
					"githubUsername": "Mucahit",
					"imageURL": "https://avatars.githubusercontent.com/u/5108459?v=4",
					"bio": "Frontend Engineer, Indie Maker - Building ⟡ @KomeAI ",
					"primary": true
				}
			],
			"desc": "Progress Bar of Year, Month and Day: See the big picture.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/progress.1h.sh.jpg",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://gist.github.com/mucahit/0bd2ace80ded22328d0c638715a4911b",
			"lastUpdated": "2023-07-15T09:53:36.781981+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/progress-procrastination.15s.sh",
					"filename": "progress-procrastination.15s.sh",
					"content": "#!/bin/sh\n\n# Progress Bar to Beat Procrastination!\n#\n# by jasonrwang (https://github.com/jasonrwang)\n# forked from aurorabbit (https://github.com/aurorabbit) and Mucahit (http://github.com/mucahit)\n#\n# \u003cxbar.title\u003eProgress Bar to Beat Procrastination!\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.2\u003c/xbar.version\u003e\n# \u003cxbar.author\u003ejasonrwang\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ejasonrwang\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProgress Bar of Year, Month, and (Work) Day, the latter of which helps you keep track of your time as a resource and beat procrastination!\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://user-images.githubusercontent.com/6628281/62536640-f7b71f00-b83d-11e9-9297-a63cc24ef115.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://gist.github.com/jasonrwang/49f76015627cf517fe77eca357401397\u003c/xbar.abouturl\u003e\n\n## !!!\n# add this to your bitbar directory\n# don't forget to chmod +x\n\n## time parameters\nworking_start=0900\nworking_end=2300\n\n## bitbar parameters\n# width and characters for the progress bars\n# feel free to configure these\nwidth=30\nfill_char=\"█\"\nempty_char=\"▁\"\n\n# use a monospace font if you want the percentages to be right-aligned\nbitbar=\"size=10 font='Menlo'\"\n## See Font Book.app's Fixed Width collection for what you can use\n## you can also download this font for free and drag it into Font Book.app.\n## https://github.com/belluzj/fantasque-sans/releases/latest\n\n## calculations\n# all of the calculations are done using unix timestamps from date(1)\n\n# mac uses bsd's date(1)\n# whenever we set a date, make sure to add -j so it doesn't change the clock\n\n# we use `date -j %m%d0000 +%s` to get the start timestamp, %Y is implied\n# then we use `date -jr $start -v +1y/+1m/+1d +%s` to get the ending timestamp\n# then we calculate the percentage with (now - start) / (end - start)\n\nnow=$(date +%s)\n\nY=$(date +%Y)\nY_start=$(date -j 01010000 +%s)\nY_end=$(date -jr \"$Y_start\" -v +1y +%s)\nY_progress=$(\n    echo \"($now - $Y_start) * 100 / ($Y_end - $Y_start)\" | bc -l\n)\n\nm=$(date +%m)\nm_start=$(date -j \"$(date +%m)\"010000 +%s)\nm_end=$(date -jr \"$m_start\" -v +1m +%s)\nm_progress=$(\n    echo \"($now - $m_start) * 100 / ($m_end - $m_start)\" | bc -l\n)\n\n# If time right now is working_start is less than the starting time but\n# midnight, set to \"SLP\" without %\n\nd=$(date +%d)\nd_start=$(date -j $working_start +%s) # starttime of today\n\n# set the end time\nd_today=$(date -j \"$(date +%m%d)\"0000 +%s)\nif [ $working_end -eq 0000 ]\nthen\n    d_end=$(date -jr \"$d_today\" -v +1d +%s) # beginning of next day\nelse\n    d_end=$(date -j \"$(date +%m%d)$working_end\" +%s) # set to working_end time of today\nfi\n\nd_progress=$(\n    echo \"($now - $d_start) * 100 / ($d_end - $d_start)\" | bc -l\n)\n\n## output prep\n# padding to align progress bar and text\n# Y-m-d = 10 + 2 spaces + 2 digits + percent sign = 15\n# progress bar width - 15 = padding\npadding=$(printf %$((width-6))s \"\")\n\n# round function\nround() { printf %.0f \"$1\"; }\n\n# progress bar display function\nprogress() {\n    filled=$(round \"$(echo \"$1 * $width / 100\" | bc -l)\")\n    empty=$((width - filled))\n    # repeat the characters using printf\n    printf \"$fill_char%0.s\" $(seq \"$filled\")\n    printf \"$empty_char%0.s\" $(seq $empty)\n}\n\n## output to bitbar\n# menu bar line\nif [ \"$now\" -lt \"$d_end\" ] # tell me to stop if I'm past $working_end\nthen\n    if [ \"$now\" -lt \"$d_start\" ] # basically captures post-midnight oil-burning\n    then\n        echo \"😴SLEEP!🛌 | $bitbar size=12 font='SF Compact Text Regular'\"\n    else\n        echo \"P: $(round \"$d_progress\")% | $bitbar size=12 font='SF Compact Text Regular'\"\n    fi\nelse\n    echo \"🛑STOP!✋ | $bitbar size=12 font='SF Compact Text Regular'\"\nfi\necho ---\n# day + progress bar\necho \"$Y-$m-$d $padding $(round \"$d_progress\")%   | $bitbar\"\necho \"$(progress \"$d_progress\")                   | $bitbar\"\necho ---\n# month + progress bar\necho \"$Y-$m    $padding $(round \"$m_progress\")%   | $bitbar\"\necho \"$(progress \"$m_progress\")                   | $bitbar\"\necho ---\n# year + progress bar\necho \"$Y       $padding $(round \"$Y_progress\")%   | $bitbar\"\necho \"$(progress \"$Y_progress\")                   | $bitbar\"\n"
				}
			],
			"path": "Time/progress-procrastination.15s.sh",
			"filename": "progress-procrastination.15s.sh",
			"dir": "Time",
			"docsPlugin": "Time/progress-procrastination.15s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Progress Bar to Beat Procrastination!",
			"version": "v1.2",
			"author": "jasonrwang",
			"authors": [
				{
					"name": "Jason R. Wang",
					"githubUsername": "jasonrwang",
					"imageURL": "https://avatars.githubusercontent.com/u/6628281?v=4",
					"bio": "Climate policy nerd. Civil servant, former M.Sc. Engineering and Policy Analysis at TU Delft.",
					"primary": true
				}
			],
			"desc": "Progress Bar of Year, Month, and (Work) Day, the latter of which helps you keep track of your time as a resource and beat procrastination!",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/progress-procrastination.15s.sh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://gist.github.com/jasonrwang/49f76015627cf517fe77eca357401397",
			"lastUpdated": "2023-07-15T09:53:36.696308+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/spent_time.1s.py",
					"filename": "spent_time.1s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eSpent time displayer\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eGabriel de Maeztu\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003emerqurio\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay the time of the year already gone as percentage\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003epython\u003c/xbar.dependencies\u003e\n\nimport datetime\nfrom calendar import monthrange, isleap\n\nnow = datetime.datetime.now()\nday = datetime.datetime(now.year, now.month, now.day)\nmonth = datetime.datetime(now.year, now.month, 1)\nyear = datetime.datetime(now.year, 1, 1)\n\nday_in_seconds = 24*60*60\n\nif isleap(year.year):\n    number_of_days = 366\nelse:\n    number_of_days = 365\n\nspent_day = ((now-day).seconds*100)/day_in_seconds\nspent_month = (int((now-month).total_seconds()) *100)/(monthrange(month.year, month.month)[1]*day_in_seconds)\nspent_year = (int((now-year).total_seconds())*100)/(number_of_days*day_in_seconds)\n\ndef display():\n    print(('Day → {:.0f}%'.format(spent_day)))\n    print('---')\n    print(('Day → {:.0f}%'.format(spent_day)))\n    print(('Month → {:.0f}%'.format(spent_month)))\n    print(('Year → {:.0f}%'.format(spent_year)))\n\nif __name__ == '__main__':\n    display()\n"
				}
			],
			"path": "Time/spent_time.1s.py",
			"filename": "spent_time.1s.py",
			"dir": "Time",
			"docsPlugin": "Time/spent_time.1s.py.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Spent time displayer",
			"version": "v1.1",
			"author": "Gabriel de Maeztu",
			"authors": [
				{
					"name": "Gabi Maeztu",
					"githubUsername": "merqurio",
					"imageURL": "https://avatars.githubusercontent.com/u/1485056?v=4",
					"bio": "\r\n    medical doctor and mathematician. I work at the intersection of medicine and machine learning.\r\n",
					"primary": true
				}
			],
			"desc": "Display the time of the year already gone as percentage",
			"imageURL": "",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.797485+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/stopwatch.1s.sh",
					"filename": "stopwatch.1s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eStopwatch\u003c/xbar.title\u003e\n# \u003cxbar.version\u003e1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eTim Baumgard\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003etbaumgard\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eSimple stopwatch for BitBar.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/tbaumgard/tbaumgard.github.io/master/_/img/bitbar-stopwatch.png\u003c/xbar.image\u003e\n\n### Configuration\n\nMAX_SPLITS=25\nSTART_FILE=\"$HOME/.bitbar-stopwatch-start\"\nPAUSE_FILE=\"$HOME/.bitbar-stopwatch-pause\"\nSPLIT_FILE=\"$HOME/.bitbar-stopwatch-split\"\nSPLITS_FILE=\"$HOME/.bitbar-stopwatch-splits\"\nSTART_TEXT=\"Start\"\nSTOP_TEXT=\"Stop\"\nSPLIT_TEXT=\"Split\"\nRESET_TEXT=\"Reset\"\n\n### Functions\n\nfunction stopwatch-print-splits {\n\tlocal COUNTER\n\tlocal CLOCK\n\n\tif [ ! -n \"$1\" ]; then\n\t\treturn\n\tfi\n\n\tCOUNTER=1\n\techo \"---\"\n\n\tfor SPLIT in $1; do\n\t\tCLOCK=\"$(stopwatch-print-clock \"$SPLIT\")\"\n\t\techo \"$COUNTER. $CLOCK\"\n\t\tCOUNTER=$((COUNTER + 1))\n\tdone\n}\n\nfunction stopwatch-print-clock {\n\tlocal NUM_SECONDS=$(($1))\n\tlocal HOURS=$((NUM_SECONDS / 3600))\n\tlocal MINUTES=$((NUM_SECONDS % 3600 / 60))\n\tlocal SECONDS=$((NUM_SECONDS % 3600 % 60))\n\n\tprintf \"%02d:%02d:%02d\" $HOURS $MINUTES $SECONDS\n}\n\n### Main\n\nSTART_TIME=\"$(cat \"$START_FILE\" 2\u003e /dev/null)\"\nPAUSE_TIME=\"$(cat \"$PAUSE_FILE\" 2\u003e /dev/null)\"\nSPLIT_TIME=\"$(cat \"$SPLIT_FILE\" 2\u003e /dev/null)\"\nSPLITS=\"$(cat \"$SPLITS_FILE\" 2\u003e /dev/null)\"\n\nif [ \"$1\" == \"start\" ]; then\n\tdate +%s \u003e \"$START_FILE\"\n\texit\nelif [ \"$1\" == \"pause\" ]; then\n\tELAPSED_TIME=$(($(date +%s) - START_TIME))\n\techo $ELAPSED_TIME \u003e \"$PAUSE_FILE\"\n\texit\nelif [ \"$1\" == \"resume\" ]; then\n\tOFFSET_START_TIME=$(($(date +%s) - PAUSE_TIME))\n\techo $OFFSET_START_TIME \u003e \"$START_FILE\"\n\trm \"$PAUSE_FILE\"\n\texit\nelif [ \"$1\" == \"split\" ]; then\n\tNOW=\"$(date +%s)\"\n\n\tif [ -n \"$SPLIT_TIME\" ]; then\n\t\tELAPSED_TIME=$((NOW - SPLIT_TIME))\n\telse\n\t\tELAPSED_TIME=$((NOW - START_TIME))\n\tfi\n\n\techo \"$NOW\" \u003e \"$SPLIT_FILE\"\n\n\tif [ -n \"$SPLITS\" ]; then\n\t\tprintf \"%s\\n%d\\n\" \"$SPLITS\" $ELAPSED_TIME | tail -n \"$MAX_SPLITS\" \u003e \"$SPLITS_FILE\"\n\telse\n\t\tprintf \"%d\\n\" $ELAPSED_TIME \u003e \"$SPLITS_FILE\"\n\tfi\n\n\texit\nelif [ \"$1\" == \"reset\" ]; then\n\trm \"$START_FILE\"\n\trm \"$PAUSE_FILE\"\n\trm \"$SPLIT_FILE\"\n\trm \"$SPLITS_FILE\"\n\texit\nfi\n\nif [ -n \"$PAUSE_TIME\" ]; then\n\tCLOCK=\"$(stopwatch-print-clock \"$PAUSE_TIME\")\"\n\n\techo \"◎ $CLOCK\"\n\techo \"---\"\n\techo \"$START_TEXT| bash='$0' param1=resume terminal=false refresh=true\"\n\techo \"$RESET_TEXT| bash='$0' param1=reset terminal=false refresh=true\"\n\tstopwatch-print-splits \"$SPLITS\"\nelif [ -n \"$START_TIME\" ]; then\n\tELAPSED_TIME=$(($(date +%s) - START_TIME))\n\tCLOCK=\"$(stopwatch-print-clock \"$ELAPSED_TIME\")\"\n\n\techo \"◉ $CLOCK\"\n\techo \"---\"\n\techo \"$START_TEXT| bash='$0' param1=resume terminal=false refresh=true\"\n\techo \"$STOP_TEXT| bash='$0' param1=pause terminal=false refresh=true\"\n\techo \"$RESET_TEXT| bash='$0' param1=reset terminal=false refresh=true\"\n\t\n\tif [ \"$MAX_SPLITS\" -gt 0 ]; then\n\t\techo \"$SPLIT_TEXT| bash='$0' param1=split terminal=false refresh=true\"\n\tfi\n\n\tstopwatch-print-splits \"$SPLITS\"\nelse\n\techo \"◎ 00:00:00\"\n\techo \"---\"\n\techo \"$START_TEXT| bash='$0' param1=start terminal=false refresh=true\"\nfi\n"
				}
			],
			"path": "Time/stopwatch.1s.sh",
			"filename": "stopwatch.1s.sh",
			"dir": "Time",
			"docsPlugin": "Time/stopwatch.1s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Stopwatch",
			"version": "1.0",
			"author": "Tim Baumgard",
			"authors": [
				{
					"name": "Tim Baumgard",
					"githubUsername": "tbaumgard",
					"imageURL": "https://avatars.githubusercontent.com/u/1239241?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple stopwatch for BitBar.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/stopwatch.1s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:36.839719+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/sunrise.4h.swift",
					"filename": "sunrise.4h.swift",
					"content": "#!/usr/bin/env xcrun swift\n\n/*\n * \u003cxbar.title\u003eSunrise\u003c/xbar.title\u003e\n * \u003cxbar.version\u003ev1.1.1\u003c/xbar.version\u003e\n * \u003cxbar.author\u003eBrad Greenlee\u003c/xbar.author\u003e\n * \u003cxbar.author.github\u003ebgreenlee\u003c/xbar.author.github\u003e\n * \u003cxbar.desc\u003eDisplays sunrise, sunset, and day length for a location.\u003c/xbar.desc\u003e\n * \u003cxbar.image\u003ehttps://raw.githubusercontent.com/bgreenlee/SunriseBitBar/main/sunrise-bitbar.png\u003c/xbar.image\u003e\n * \u003cxbar.dependencies\u003eXcode,swift\u003c/xbar.dependencies\u003e\n * \u003cxbar.abouturl\u003ehttps://github.com/bgreenlee/SunriseBitBar\u003c/xbar.abouturl\u003e\n */\n\n// Customizations\n\nlet LOCATION = \"Seattle, WA\" // or lat,lon coordinates\nlet DAYS = 7 // number of days to show\nlet PAST_DAYS = 0 // number of days in the past to show\nlet TIME_STYLE:DateFormatter.Style = .short // .short, .medium, .long, .full\nlet LOCATION_FONT = \"Menlo\"\nlet LOCATION_COLOR = \"black\"\nlet SUNRISE_FONT = \"Menlo\"\nlet SUNRISE_COLOR = \"blue\"\nlet SYMBOL_COLOR = \"orange\"\n\n// Main code\n\nlet coordinate = try parseLocation(LOCATION)\n// Reverse geocode so we can get the timezone in the location\nlet coder = CLGeocoder()\nlet loc = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)\nvar placemark: CLPlacemark?\nvar timezone: TimeZone?\ncoder.reverseGeocodeLocation(loc) { (placemarks, error) in\n    placemark = placemarks?.last\n    timezone = placemark?.timeZone\n    CFRunLoopStop(CFRunLoopGetCurrent())\n}\nCFRunLoopRun() // wait for reverse geocode to finish\n\nprint(\":sunrise:\\n---\\n\")\n\nif let placemark = placemark {\n    if let city = placemark.locality, let administrativeArea = placemark.administrativeArea, let country = placemark.country {\n        if country == \"United States\" {\n            print(\"\\(city), \\(administrativeArea)|font=\\(LOCATION_FONT) color=\\(LOCATION_COLOR)\")\n        } else {\n            print(\"\\(city), \\(administrativeArea), \\(country)|font=\\(LOCATION_FONT) color=\\(LOCATION_COLOR)\")\n        }\n    } else {\n        print(\"\\(placemark.name ?? \"Unknown\")\")\n    }\n}\n\nlet today = Date()\nfor i in -PAST_DAYS..\u003cDAYS-PAST_DAYS {\n    let date = Calendar.current.date(byAdding: .day, value: i, to: today)!\n    if let (sunrise, sunset) = NTSolar.sunRiseAndSet(forDate: date, atLocation: coordinate, inTimeZone: timezone!) {\n        let dateFormatter = DateFormatter()\n        dateFormatter.setLocalizedDateFormatFromTemplate(\"MMMd\")\n        print(dateFormatter.string(from: date).padding(toLength: 7, withPad: \" \", startingAt: 0), terminator:\"\")\n\n        let timeFormatter = DateFormatter()\n        timeFormatter.dateStyle = .none\n        timeFormatter.timeStyle = TIME_STYLE\n        if let timezone = timezone {\n            timeFormatter.timeZone = timezone\n        }\n\n        let sunriseTime = timeFormatter.string(from: sunrise).lowercased()\n        let sunsetTime = timeFormatter.string(from: sunset).lowercased()\n        let daylengthFormatter = DateComponentsFormatter()\n        daylengthFormatter.unitsStyle = .abbreviated\n        daylengthFormatter.allowedUnits = [.minute, .hour]\n        let formattedDayLength = daylengthFormatter.string(from: sunrise, to: sunset)!\n\n        print(\":sunrise: \\(sunriseTime) :sunset: \\(sunsetTime) :clock: \\(formattedDayLength)|font=\\(SUNRISE_FONT)\\(i == 0 ? \"-Bold\" : \"\") color=\\(SUNRISE_COLOR) sfcolor=\\(SYMBOL_COLOR)\")\n    }\n}\n\nstruct ValidationError: Error, CustomStringConvertible {\n    var description:String\n\n    init(_ description:String) {\n        self.description = description\n    }\n}\n\nfunc parseLocation(_ argument: String) throws -\u003e CLLocationCoordinate2D {\n    let parts = argument.components(separatedBy: \",\")\n    if parts.count == 2, let latitude = Double(parts[0]), let longitude = Double(parts[1]) {\n        return CLLocationCoordinate2D(latitude: latitude, longitude: longitude)\n    } else {\n        // see if we can geocode it\n        let coder = CLGeocoder()\n        var location: CLLocation?\n        coder.geocodeAddressString(argument) { (placemarks, error) in\n            location = placemarks?.last?.location\n            CFRunLoopStop(CFRunLoopGetCurrent())\n        }\n        CFRunLoopRun()\n        if let location = location {\n            return location.coordinate\n        }\n        throw ValidationError(\"Could not parse location. Provide either a valid place name or latitude,longitude.\")\n    }\n}\n\n//\n//\n//    NTSolar.swift\n//\n//  Created by Neil Tiffin on 5/8/19.\n//  Copyright © 2019 Performance Champions, Inc.\n//  Copyright © 2019 Neil Tiffin.\n//\n//  Released to the public domain by Neil Tiffin, May 2019\n//  Released to the public domain by Performance Champions, Inc., May 2019\n//\n\nimport Foundation\nimport CoreLocation\n\nvar stderr = FileHandle.standardError\n\nextension FileHandle : TextOutputStream {\n  public func write(_ string: String) {\n    guard let data = string.data(using: .utf8) else { return }\n    self.write(data)\n  }\n}\n\n/// Class to calculate sunrise sunset.\n///\n/// C code originally from: [http://stjarnhimlen.se/comp/sunriset.c](http://stjarnhimlen.se/comp/sunriset.c)\nclass NTSolar {\n    // MARK: - Public Swift Interface\n\n    /// Calculate the sun rise and set times.\n    ///\n    /// - Parameters:\n    ///   - forDate: The date for the calculation. You should ensure that the date, which is stored as UTC, is the date\n    ///         really wanted in the given time zone. It will be converted to the given time zone before being used.\n    ///   - atLocation: The latitude and longitude for the calculation.\n    ///   - inTimeZone: The time zone for the resulting date and times.\n    /// - Returns: If the sun both rises and sets on the day requested and at the\n    ///     latitude requested then return sun rise and set times rounded down to the minute, nil othewise.\n    class func sunRiseAndSet(forDate: Date,\n                             atLocation: CLLocationCoordinate2D,\n                             inTimeZone: TimeZone) -\u003e (sunrise: Date, sunset: Date)? {\n\n        var calendar = Calendar(identifier: .gregorian)\n        calendar.timeZone = inTimeZone\n        var comp = calendar.dateComponents([.day, .year, .month], from: forDate)\n        comp.calendar = calendar\n\n        guard let year = comp.year,\n            let month = comp.month,\n            let day = comp.day else {\n                print(\"Failed to find date components.\", to:\u0026stderr)\n                return nil\n        }\n\n        let (riseUTC, setUTC, code) = NTSolar.sun_rise_set(year: year,\n                                                           month: month,\n                                                           day: day,\n                                                           lon: atLocation.longitude,\n                                                           lat: atLocation.latitude)\n\n        if code != .RiseAndSet {\n            print(\"Failed to find rise and set.\", to:\u0026stderr)\n            return nil\n        }\n\n        // Calc sunrise\n        var riseLocalHrs = riseUTC + (Double(inTimeZone.secondsFromGMT()) / 3600.0)\n        if riseLocalHrs \u003e 24.0 {\n            riseLocalHrs -= 24.0\n        }\n        let riseHoursInt = Int(riseLocalHrs)\n        comp.hour = riseHoursInt\n\n        comp.minute = Int(  (( riseLocalHrs - Double(riseHoursInt) ) * 60.0).rounded() )\n        comp.second = 0\n        comp.nanosecond = 0\n        guard let riseTime = comp.date else {\n            print(\"\\nFailed to calculate rise time hrs: \\(riseLocalHrs).\\n\\(comp)\\n\", to:\u0026stderr)\n            return nil\n        }\n\n        // Calc sunset\n        var setLocalHrs = setUTC + (Double(inTimeZone.secondsFromGMT()) / 3600.0)\n        if setLocalHrs \u003e 24.0 {\n            setLocalHrs -= 24.0\n        }\n        let setHoursInt = Int(setLocalHrs)\n        comp.hour = setHoursInt\n        comp.minute = Int( ((setLocalHrs - Double(setHoursInt) ) * 60.0).rounded() )\n        comp.second = 0\n        comp.nanosecond = 0\n        guard let setTime = comp.date else {\n            print(\"\\nFailed to calculate set time hrs: \\(setLocalHrs).\\n\\(comp)\\n\", to:\u0026stderr)\n            return nil\n        }\n\n        return (riseTime, setTime)\n    }\n\n    // MARK: - SUNRISET.C\n\n    // C code originally from: [http://stjarnhimlen.se/comp/sunriset.c](http://stjarnhimlen.se/comp/sunriset.c)\n    //\n    // The conversion process removed pointers in favor of return tuples, converted macros to function calls,\n    // added return code enum, and converted\n    // comments to work with Xcode.  Of course the C code had to be converted to Swift, but that was minimal.\n    //\n    // As much as possible the original code was left intact in order to not introduce bugs.\n    // In other words, some code was left unfashionable by today's standards.\n\n    enum ReturnCode: Int {\n        /// Sun is below the specified \"horizon\" 24 hours\n        /// \"Day\" length = 0 hours, trise and tset are\n        /// both set to the time when the sun is at south.\n        case SunAlwaysBelow = -1\n\n        /// Sun rises/sets this day, times stored at rise and set.\n        case RiseAndSet = 0\n\n        /// Sun above the specified \"horizon\" 24 hours.\n        /// trise set to time when the sun is at south,\n        /// minus 12 hours while tset is set to the south\n        /// time plus 12 hours. \"Day\" length = 24 hours\n        case SunAlwaysAbove = 1\n    }\n\n    /* +++Date last modified: 05-Jul-1997 */\n    /* Updated comments, 05-Aug-2013 */\n    /*\n     SUNRISET.C - computes Sun rise/set times, start/end of twilight, and\n     the length of the day at any date and latitude\n\n     Written as DAYLEN.C, 1989-08-16\n\n     Modified to SUNRISET.C, 1992-12-01\n\n     (c) Paul Schlyter, 1989, 1992\n\n     Released to the public domain by Paul Schlyter, December 1992\n     */\n\n    /// A macro to compute the number of days elapsed since 2000 Jan 0.0\n    /// (which is equal to 1999 Dec 31, 0h UT)\n    private class func days_since_2000_Jan_0(y:Int, m:Int, d:Int) -\u003e Int {\n        return (367*(y)-((7*((y)+(((m)+9)/12)))/4)+((275*(m))/9)+(d)-730530)\n    }\n\n    /* Some conversion factors between radians and degrees */\n    private static let PI  =      3.1415926535897932384\n    private static let RADEG   =  ( 180.0 / PI )\n    private static let DEGRAD  =  ( PI / 180.0 )\n\n    /* The trigonometric functions in degrees */\n    private class func sind(x: Double) -\u003e Double  { return sin((x)*DEGRAD) }\n    private class func cosd(x: Double) -\u003e Double  { return  cos((x)*DEGRAD) }\n    private class func tand(x: Double) -\u003e Double  { return  tan((x)*DEGRAD) }\n    private class func atand(x: Double)  -\u003e Double  { return   (RADEG*atan(x)) }\n    private class func asind(x: Double)  -\u003e Double  { return   (RADEG*asin(x)) }\n    private class func acosd(x: Double)  -\u003e Double  { return   (RADEG*acos(x)) }\n    private class func atan2d(y: Double,x: Double)-\u003e Double  { return  (RADEG*atan2(y,x)) }\n\n    /* Following are some macros around the \"workhorse\" function __daylen__ */\n    /* They mainly fill in the desired values for the reference altitude    */\n    /* below the horizon, and also selects whether this altitude should     */\n    /* refer to the Sun's center or its upper limb.                         */\n\n\n    /** This macro computes the length of the day, from sunrise to sunset. */\n    /** Sunrise/set is considered to occur when the Sun's upper limb is    */\n    /** 35 arc minutes below the horizon (this accounts for the refraction */\n    /** of the Earth's atmosphere).                                        */\n    class func day_length(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e Double {\n        return daylen( year: year, month: month, day: day, lon: lon, lat: lat, altit: -35.0/60.0, upper_limb: 1 )\n    }\n\n    /** This macro computes the length of the day, including civil twilight. */\n    /** Civil twilight starts/ends when the Sun's center is 6 degrees below  */\n    /** the horizon.                                                         */\n    class func day_civil_twilight_length(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e Double {\n        return daylen( year: year, month: month, day: day, lon: lon, lat: lat, altit: -6.0, upper_limb: 0 )\n    }\n\n    /** This macro computes the length of the day, incl. nautical twilight.  */\n    /** Nautical twilight starts/ends when the Sun's center is 12 degrees    */\n    /** below the horizon.                                                   */\n    class func day_nautical_twilight_length(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e Double {\n        return daylen( year: year, month: month, day: day, lon: lon, lat: lat, altit: -12.0, upper_limb: 0 )\n    }\n\n    /** This macro computes the length of the day, incl. astronomical twilight. */\n    /** Astronomical twilight starts/ends when the Sun's center is 18 degrees   */\n    /** below the horizon.                                                      */\n    class func day_astronomical_twilight_length(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e Double {\n        return daylen( year: year, month: month, day: day, lon: lon, lat: lat, altit: -18.0, upper_limb: 0 )\n    }\n\n    /** This macro computes times for sunrise/sunset.                      */\n    /** Sunrise/set is considered to occur when the Sun's upper limb is    */\n    /** 35 arc minutes below the horizon (this accounts for the refraction */\n    /** of the Earth's atmosphere).                                        */\n    class func sun_rise_set(year: Int, month: Int, day: Int , lon: Double, lat: Double) -\u003e (trise: Double, tset: Double, code: ReturnCode) {\n        let (start, end, code) = sunriset( year: year, month: month, day: day, lon: lon, lat: lat, altit: -35.0/60.0, upper_limb: 1)\n        return (start, end, code)\n    }\n\n    /** This macro computes the start and end times of civil twilight.       */\n    /** Civil twilight starts/ends when the Sun's center is 6 degrees below  */\n    /** the horizon.                                                         */\n    class func civil_twilight(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e (trise: Double, tset: Double, code: ReturnCode) {\n        let (start, end, code) = sunriset( year: year, month: month, day: day, lon: lon, lat: lat, altit: -6.0, upper_limb: 0)\n        return (start, end, code)\n    }\n\n    /** This macro computes the start and end times of nautical twilight.    */\n    /** Nautical twilight starts/ends when the Sun's center is 12 degrees    */\n    /** below the horizon.                                                   */\n    class func nautical_twilight(year: Int, month: Int ,day: Int, lon: Double, lat: Double) -\u003e (trise: Double, tset: Double, code: ReturnCode) {\n        let (start, end, code) = sunriset( year: year, month: month, day: day, lon: lon, lat: lat, altit: -12.0, upper_limb: 0)\n        return (start, end, code)\n    }\n\n    /** This macro computes the start and end times of astronomical twilight.   */\n    /** Astronomical twilight starts/ends when the Sun's center is 18 degrees   */\n    /** below the horizon.                                                      */\n    class func astronomical_twilight(year: Int, month: Int, day: Int, lon: Double, lat: Double) -\u003e (trise: Double, tset: Double, code: ReturnCode) {\n        let (start, end, code) = sunriset( year: year, month: month, day: day, lon: lon, lat: lat, altit: -18.0, upper_limb: 0)\n        return (start, end, code)\n    }\n\n    /// The \"workhorse\" function for sun rise/set times\n    ///\n    /// - Parameters:\n    ///   - year: calendar date, 1801-2099 only.\n    ///   - month: calendar date, 1801-2099 only.\n    ///   - day: calendar date, 1801-2099 only.\n    ///   - lon: Eastern longitude positive, Western longitude negative. The longitude value IS critical in this function!\n    ///   - lat: Northern latitude positive, Southern latitude negative\n    ///   - altit: the altitude which the Sun should cross. Set to -35/60 degrees for rise/set, -6 degrees\n    ///       for civil, -12 degrees for nautical and -18 degrees for astronomical twilight.\n    ///   - upper_limb: non-zero -\u003e upper limb, zero -\u003e center\n    ///       Set to non-zero (e.g. 1) when computing rise/set\n    ///       times, and to zero when computing start/end of twilight.\n    /// - Returns: rise, set, code.\n    ///\n    ///     Both times in hours UT are relative to the specified altitude,\n    ///     and thus this function can be used to compute\n    ///     various twilight times, as well as rise/set times.\n    ///\n    ///     Code 0 = sun rises/sets this day, times stored at rise and set.\n    ///\n    ///     Code +1 = sun above the specified \"horizon\" 24 hours.\n    ///     *trise set to time when the sun is at south,\n    ///     minus 12 hours while *tset is set to the south\n    ///     time plus 12 hours. \"Day\" length = 24 hours\n    ///\n    ///     Code -1 = sun is below the specified \"horizon\" 24 hours\n    ///     \"Day\" length = 0 hours, *trise and *tset are\n    ///     both set to the time when the sun is at south.\n    private class func sunriset(year: Int,\n                                month: Int,\n                                day: Int,\n                                lon: Double,\n                                lat: Double,\n                                altit: Double,\n                                upper_limb: Int) -\u003e (trise: Double, tset: Double, code: ReturnCode) {\n\n        var altit = altit\n        var  d: Double         /* Days since 2000 Jan 0.0 (negative before) */\n        var sr: Double         /* Solar distance, astronomical units */\n        var sRA: Double        /* Sun's Right Ascension */\n        var sdec: Double       /* Sun's declination */\n        var sradius: Double    /* Sun's apparent radius */\n        var t: Double          /* Diurnal arc */\n        var tsouth: Double     /* Time when Sun is at south */\n        var sidtime: Double    /* Local sidereal time */\n\n        var rc: ReturnCode = ReturnCode.RiseAndSet     /* Return cde from function - usually 0 */\n\n        /* Compute d of 12h local mean solar time */\n        d = Double(days_since_2000_Jan_0(y: year,m: month,d: day)) + 0.5 - lon/360.0;\n\n        /* Compute the local sidereal time of this moment */\n        sidtime = revolution( x: GMST0(d: d) + 180.0 + lon )\n\n        /* Compute Sun's RA, Decl and distance at this moment */\n        (sRA, sdec, sr) = sun_RA_dec(d: d)\n\n        /* Compute time when Sun is at south - in hours UT */\n        tsouth = 12.0 - rev180(x: sidtime - sRA)/15.0\n\n        /* Compute the Sun's apparent radius in degrees */\n        sradius = 0.2666 / sr\n\n        /* Do correction to upper limb, if necessary */\n        if upper_limb != 0 {\n            altit -= sradius\n        }\n\n        /* Compute the diurnal arc that the Sun traverses to reach */\n        /* the specified altitude altit: */\n        do {\n            let cost: Double = ( sind(x: altit) - sind(x: lat) * sind(x: sdec) ) / ( cosd(x: lat) * cosd(x: sdec) );\n            if ( cost \u003e= 1.0 ) {\n                rc = ReturnCode.SunAlwaysBelow\n                t = 0.0       /* Sun always below altit */\n            }\n            else if ( cost \u003c= -1.0 ) {\n                rc = ReturnCode.SunAlwaysAbove\n                t = 12.0      /* Sun always above altit */\n            }\n            else {\n                t = acosd(x: cost)/15.0   /* The diurnal arc, hours */\n            }\n        }\n\n        /* Store rise and set times - in hours UT */\n        let trise = tsouth - t;\n        let tset  = tsouth + t;\n\n        return (trise, tset, rc)\n    }  /* __sunriset__ */\n\n    /// The \"workhorse\" function\n    ///\n    /// - Parameters:\n    ///   - year: year,month,date = calendar date, 1801-2099 only.\n    ///   - month: year,month,date = calendar date, 1801-2099 only.\n    ///   - day: year,month,date = calendar date, 1801-2099 only.\n    ///   - lon: Eastern longitude positive, Western longitude negative\n    ///   - lat: Northern latitude positive, Southern latitude negative\n    ///   - altit: altit = the altitude which the Sun should cross\n    ///               Set to -35/60 degrees for rise/set, -6 degrees\n    ///               for civil, -12 degrees for nautical and -18\n    ///               degrees for astronomical twilight.\n    ///   - upper_limb: upper_limb: non-zero -\u003e upper limb, zero -\u003e center\n    ///               Set to non-zero (e.g. 1) when computing day length\n    ///               and to zero when computing day+twilight length.\n    /// - Returns: Day number\n    private class func daylen(year: Int, month: Int, day: Int, lon: Double, lat: Double,\n                              altit: Double, upper_limb: Int ) -\u003e Double {\n        /**********************************************************************/\n        /* Note: year,month,date = calendar date, 1801-2099 only.             */\n        /*       Eastern longitude positive, Western longitude negative       */\n        /*       Northern latitude positive, Southern latitude negative       */\n        /*       The longitude value is not critical. Set it to the correct   */\n        /*       longitude if you're picky, otherwise set to to, say, 0.0     */\n        /*       The latitude however IS critical - be sure to get it correct */\n        /*       altit = the altitude which the Sun should cross              */\n        /*               Set to -35/60 degrees for rise/set, -6 degrees       */\n        /*               for civil, -12 degrees for nautical and -18          */\n        /*               degrees for astronomical twilight.                   */\n        /*         upper_limb: non-zero -\u003e upper limb, zero -\u003e center         */\n        /*               Set to non-zero (e.g. 1) when computing day length   */\n        /*               and to zero when computing day+twilight length.      */\n        /**********************************************************************/\n\n        var altit = altit\n        var d: Double          /* Days since 2000 Jan 0.0 (negative before) */\n        var obl_ecl: Double    /* Obliquity (inclination) of Earth's axis */\n        var sr: Double         /* Solar distance, astronomical units */\n        var slon: Double       /* True solar longitude */\n        var sin_sdecl: Double  /* Sine of Sun's declination */\n        var cos_sdecl: Double  /* Cosine of Sun's declination */\n        var sradius: Double    /* Sun's apparent radius */\n        var t: Double          /* Diurnal arc */\n\n        /* Compute d of 12h local mean solar time */\n        d = Double(days_since_2000_Jan_0(y: year, m: month, d: day)) + 0.5 - lon/360.0;\n\n        /* Compute obliquity of ecliptic (inclination of Earth's axis) */\n        obl_ecl = 23.4393 - 3.563E-7 * d;\n\n        /* Compute Sun's ecliptic longitude and distance */\n        (slon, sr) = sunpos( d: d )\n\n        /* Compute sine and cosine of Sun's declination */\n        sin_sdecl = sind(x: obl_ecl) * sind(x: slon);\n        cos_sdecl = sqrt( 1.0 - sin_sdecl * sin_sdecl );\n\n        /* Compute the Sun's apparent radius, degrees */\n        sradius = 0.2666 / sr;\n\n        /* Do correction to upper limb, if necessary */\n        if upper_limb != 0 {\n            altit -= sradius\n        }\n\n        /* Compute the diurnal arc that the Sun traverses to reach */\n        /* the specified altitude altit: */\n        do {\n            let cost: Double = ( sind(x: altit) - sind(x: lat) * sin_sdecl ) / ( cosd(x: lat) * cos_sdecl );\n            if cost \u003e= 1.0 {\n                t = 0.0     /* Sun always below altit */\n            }\n            else if cost \u003c= -1.0 {\n                t = 24.0;                     /* Sun always above altit */\n            }\n            else  {\n                t = (2.0/15.0) * acosd(x: cost); /* The diurnal arc, hours */\n            }\n        }\n\n        return t;\n    }  /* __daylen__ */\n\n\n    /// This function computes the Sun's position at any instant.\n    private class func sunpos(d: Double) -\u003e (lon: Double, r: Double ) {\n        /******************************************************/\n        /* Computes the Sun's ecliptic longitude and distance */\n        /* at an instant given in d, number of days since     */\n        /* 2000 Jan 0.0.  The Sun's ecliptic latitude is not  */\n        /* computed, since it's always very near 0.           */\n        /******************************************************/\n\n        var M: Double         /* Mean anomaly of the Sun */\n        var w: Double         /* Mean longitude of perihelion */\n                              /* Note: Sun's mean longitude = M + w */\n        var e: Double         /* Eccentricity of Earth's orbit */\n        var E: Double         /* Eccentric anomaly */\n        var x: Double\n        var y: Double         /* x, y coordinates in orbit */\n        var v: Double         /* True anomaly */\n\n        /* Compute mean elements */\n        M = revolution( x: 356.0470 + 0.9856002585 * d );\n        w = 282.9404 + 4.70935E-5 * d;\n        e = 0.016709 - 1.151E-9 * d;\n\n        /* Compute true longitude and radius vector */\n        E = M + e * RADEG * sind(x: M) * ( 1.0 + e * cosd(x: M) );\n        x = cosd(x: E) - e;\n        y = sqrt( 1.0 - e*e ) * sind(x: E);\n        let r = sqrt( x*x + y*y );              /* Solar distance */\n        v = atan2d( y: y, x: x );               /* True anomaly */\n        var lon = v + w                         /* True solar longitude */\n        if lon \u003e= 360.0 {\n            lon -= 360.0                        /* Make it 0..360 degrees */\n        }\n        return (lon, r)\n    }\n\n    private class func sun_RA_dec( d: Double ) -\u003e (RA: Double, dec: Double, r: Double ) {\n        /******************************************************/\n        /* Computes the Sun's equatorial coordinates RA, Decl */\n        /* and also its distance, at an instant given in d,   */\n        /* the number of days since 2000 Jan 0.0.             */\n        /******************************************************/\n\n        var obl_ecl: Double\n        var x: Double\n        var y: Double\n        var z: Double\n\n        /* Compute Sun's ecliptical coordinates */\n        let (lon, r) = sunpos( d: d )\n\n        /* Compute ecliptic rectangular coordinates (z=0) */\n        x = r * cosd(x: lon)\n        y = r * sind(x: lon)\n\n        /* Compute obliquity of ecliptic (inclination of Earth's axis) */\n        obl_ecl = 23.4393 - 3.563E-7 * d\n\n        /* Convert to equatorial rectangular coordinates - x is unchanged */\n        z = y * sind(x: obl_ecl)\n        y = y * cosd(x: obl_ecl)\n\n        /* Convert to spherical coordinates */\n        let RA = atan2d( y: y, x: x )\n        let dec = atan2d( y: z, x: sqrt(x*x + y*y) )\n        return (RA, dec, r)\n    }  /* sun_RA_dec */\n\n    private static let INV360: Double = ( 1.0 / 360.0 )\n\n    /*******************************************************************/\n    /** This function reduces any angle to within the first revolution */\n    /** by subtracting or adding even multiples of 360.0 until the     */\n    /** result is \u003e= 0.0 and \u003c 360.0                                   */\n    /*******************************************************************/\n    private class func revolution( x: Double ) -\u003e Double {\n        /*****************************************/\n        /* Reduce angle to within 0..360 degrees */\n        /*****************************************/\n\n        return( x - 360.0 * floor( x * INV360 ) );\n    }  /* revolution */\n\n    private class func rev180(x: Double ) -\u003e Double {\n        /*********************************************/\n        /* Reduce angle to within +180..+180 degrees */\n        /*********************************************/\n\n        return( x - 360.0 * floor( x * INV360 + 0.5 ) );\n    }  /* revolution */\n\n    /********************************************************************/\n    /** This function computes GMST0, the Greenwich Mean Sidereal Time  */\n    /** at 0h UT (i.e. the sidereal time at the Greenwhich meridian at  */\n    /** 0h UT).  GMST is then the sidereal time at Greenwich at any     */\n    /** time of the day.  I've generalized GMST0 as well, and define it */\n    /** as:  GMST0 = GMST - UT  --  this allows GMST0 to be computed at */\n    /** other times than 0h UT as well.  While this sounds somewhat     */\n    /** contradictory, it is very practical:  instead of computing      */\n    /** GMST like:                                                      */\n    /**                                                                 */\n    /**  GMST = (GMST0) + UT * (366.2422/365.2422)                      */\n    /**                                                                 */\n    /** where (GMST0) is the GMST last time UT was 0 hours, one simply  */\n    /** computes:                                                       */\n    /**                                                                 */\n    /**  GMST = GMST0 + UT                                              */\n    /**                                                                 */\n    /** where GMST0 is the GMST \"at 0h UT\" but at the current moment!   */\n    /** Defined in this way, GMST0 will increase with about 4 min a     */\n    /** day.  It also happens that GMST0 (in degrees, 1 hr = 15 degr)   */\n    /** is equal to the Sun's mean longitude plus/minus 180 degrees!    */\n    /** (if we neglect aberration, which amounts to 20 seconds of arc   */\n    /** or 1.33 seconds of time)                                        */\n    /**                                                                 */\n    /********************************************************************/\n    private class func GMST0( d: Double ) -\u003e Double {\n        var sidtim0: Double\n        /* Sidtime at 0h UT = L (Sun's mean longitude) + 180.0 degr  */\n        /* L = M + w, as defined in sunpos().  Since I'm too lazy to */\n        /* add these numbers, I'll let the C compiler do it for me.  */\n        /* Any decent C compiler will add the constants at compile   */\n        /* time, imposing no runtime or code overhead.               */\n        sidtim0 = revolution( x: ( 180.0 + 356.0470 + 282.9404 ) +\n            ( 0.9856002585 + 4.70935E-5 ) * d )\n        return sidtim0\n    }  /* GMST0 */\n\n}"
				}
			],
			"path": "Time/sunrise.4h.swift",
			"filename": "sunrise.4h.swift",
			"dir": "Time",
			"docsPlugin": "Time/sunrise.4h.swift.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Sunrise",
			"version": "v1.1.1",
			"author": "Brad Greenlee",
			"authors": [
				{
					"name": "Brad Greenlee",
					"githubUsername": "bgreenlee",
					"imageURL": "https://avatars.githubusercontent.com/u/2901?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays sunrise, sunset, and day length for a location.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/sunrise.4h.swift.png",
			"dependencies": [
				"Xcode",
				"swift"
			],
			"aboutURL": "https://github.com/bgreenlee/SunriseBitBar",
			"lastUpdated": "2023-07-15T09:53:37.012727+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/switchtimezones.5s.sh",
					"filename": "switchtimezones.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eSwitch Timezones\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eVasily Pleshakov\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ewasapl\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eAllows to switch timezone for current time shown in the Bar. \u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/0Oevp2W.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003eBASH\u003c/xbar.dependencies\u003e\nSCRIPT_NAME=$(basename \"$0\")\nSCRIPT_DIR=$(dirname \"$0\")\ndeclare -A TZS\nTZS[\"Moscow\"]=\"Europe/Moscow\"\nTZS[\"London\"]=\"Europe/London\"\nTZS[\"NewYork\"]=\"US/Eastern\"\nTZS[\"SanFrancisco\"]=\"US/Pacific\"\nTZS[\"UTC\"]=\"UTC\"\n\nTEMP_FILE=\"$TMPDIR/${SCRIPT_NAME%%.*}.tmp\"\nif [ -s \"${TEMP_FILE}\" ]; then\n    CUR_CITY=$(cat \"${TEMP_FILE}\")\nelse\n    CUR_CITY=\"UTC\"\nfi\n\nfunction get_time() {\n    TZ=\":${1}\" date +'%m/%d %H:%M'\n}\n\nfunction menu() {\n    cur_time=$(get_time \"${TZS[$CUR_CITY]}\"); echo \"${CUR_CITY} ${cur_time}\"\n    echo \"---\"\n    for city in \"${!TZS[@]}\"; do\n            cur_time=$(get_time \"${TZS[$city]}\"); echo \"$city ${cur_time} | bash='${SCRIPT_DIR}/${SCRIPT_NAME}' param1=chcity param2=$city terminal=false refresh=true\"\n    done\n    echo \"---\"\n    cur_time=$(date +%s); echo \"Epoch $cur_time | bash='${SCRIPT_DIR}/${SCRIPT_NAME}' param1=copy param2=\\\"$cur_time\\\" terminal=false\"\n    cur_time=$(date +'%Y%m%d'); echo \"YMD $cur_time | bash='${SCRIPT_DIR}/${SCRIPT_NAME}' param1=copy param2=\\\"$cur_time\\\" terminal=false\"\n    cur_time=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\"); echo \"ISO 8601 $cur_time | bash='${SCRIPT_DIR}/${SCRIPT_NAME}' param1=copy param2=\\\"$cur_time\\\" terminal=false\"\n}\n\nif [[ \"$#\" -ge 1 ]];then\n    if [[ \"$1\" == 'copy' ]] ; then\n        echo -n \"$2\" | pbcopy\n        echo COPIED \"$2\"\n    fi\n    if [[ \"$1\" == 'chcity' ]] ; then\n        echo \"$2\" \u003e \"${TEMP_FILE}\"\n    fi\nfi\n\nmenu\n"
				}
			],
			"path": "Time/switchtimezones.5s.sh",
			"filename": "switchtimezones.5s.sh",
			"dir": "Time",
			"docsPlugin": "Time/switchtimezones.5s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Switch Timezones",
			"version": "v1.0",
			"author": "Vasily Pleshakov",
			"authors": [
				{
					"name": "Vasily Pleshakov",
					"githubUsername": "wasapl",
					"imageURL": "https://avatars.githubusercontent.com/u/2486829?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Allows to switch timezone for current time shown in the Bar. ",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/switchtimezones.5s.sh.png",
			"dependencies": [
				"BASH"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.017501+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/timezone.5s.sh",
					"filename": "timezone.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eTimezone\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eToni Hoffmann\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003exremix\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShow the current time of a different timezone.\u003c/xbar.desc\u003e\n\nPrefix=\"FL\"\nTime_Zone=\"US/Eastern\"\nTZ=\":$Time_Zone\" date \"+$Prefix %H:%M\"\n"
				}
			],
			"path": "Time/timezone.5s.sh",
			"filename": "timezone.5s.sh",
			"dir": "Time",
			"docsPlugin": "Time/timezone.5s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Timezone",
			"version": "v1.0.0",
			"author": "Toni Hoffmann",
			"authors": [
				{
					"name": "Toni Hoffmann",
					"githubUsername": "xremix",
					"imageURL": "https://avatars.githubusercontent.com/u/9824294?v=4",
					"bio": "Lead Software Engineer based in Munich",
					"primary": true
				}
			],
			"desc": "Show the current time of a different timezone.",
			"imageURL": "",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.026982+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/timezonesplus.30s.sh",
					"filename": "timezonesplus.30s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eTimezones+\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAaron Edell\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eaaronedell\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eRotates current time through four common timezones \u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/Y4nhdZo.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003eBash GNU AWK\u003c/xbar.dependencies\u003e\n\necho -n \"NY \" ; TZ=\":US/Eastern\" date +'%l:%M %p'\necho -n \"SF \" ; TZ=\":US/Pacific\" date +'%l:%M %p'\necho -n \"LN \" ; TZ=\":Europe/London\" date +'%l:%M %p'\necho -n \"HK \" ; TZ=\"Asia/Hong_Kong\" date +'%l:%M %p'\n"
				}
			],
			"path": "Time/timezonesplus.30s.sh",
			"filename": "timezonesplus.30s.sh",
			"dir": "Time",
			"docsPlugin": "Time/timezonesplus.30s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Timezones+",
			"version": "v1.0",
			"author": "Aaron Edell",
			"authors": [
				{
					"name": "AaronEdell",
					"githubUsername": "aaronedell",
					"imageURL": "https://avatars.githubusercontent.com/u/11819814?v=4",
					"bio": "Not a good developer",
					"primary": true
				}
			],
			"desc": "Rotates current time through four common timezones ",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/timezonesplus.30s.sh.png",
			"dependencies": [
				"Bash GNU AWK"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.127886+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/unixtime.5s.sh",
					"filename": "unixtime.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eUnix Time\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eMat Ryer\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ematryer\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplays unix time.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/h2cyuYu.png\u003c/xbar.image\u003e\n\ndate +%s\n"
				}
			],
			"path": "Time/unixtime.5s.sh",
			"filename": "unixtime.5s.sh",
			"dir": "Time",
			"docsPlugin": "Time/unixtime.5s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Unix Time",
			"version": "v1.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Engineering director at @Grafana - Gopher, developer, speaker, author (Go Programming Blueprints) - Xbar (BitBar reboot) xbarapp.com (now in beta)",
					"primary": true
				}
			],
			"desc": "Displays unix time.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/unixtime.5s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.227239+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/waketime.1m.sh",
					"filename": "waketime.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eWaketime\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eMatthias Vogt\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ematthias-vogt\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows the time since your mac last woke up in hours:minutes\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/jsB66g9.png\u003c/xbar.image\u003e\n\nwake=$(\n\tsysctl -a | grep 'waketime' | grep -o \"\\d\\{10\\}\" ||\n\tsysctl -a | grep 'boottime' | grep -o \"\\d\\{10\\}\"\n);\nnow=$(date +'%s');\n\nhours=$(echo \"($now - $wake)/3600\" | bc)\nminutes=$(echo \"(($now - $wake)/60)%60\" | bc)\n\necho \"$hours:$(printf \"%02d\" \"$minutes\")h\"\n"
				}
			],
			"path": "Time/waketime.1m.sh",
			"filename": "waketime.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/waketime.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Waketime",
			"version": "v1.0.1",
			"author": "Matthias Vogt",
			"authors": [
				{
					"name": "Matthias",
					"githubUsername": "matthias-vogt",
					"imageURL": "https://avatars.githubusercontent.com/u/4030513?v=4",
					"bio": "Check out my GitLab at https://gitlab.com/matthias-vogt !\r\n\r\nI am a 24-year-old from Germany interested in computer science and creative stuff",
					"primary": true
				}
			],
			"desc": "Shows the time since your mac last woke up in hours:minutes",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/waketime.1m.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.253616+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/watson.1m.sh",
					"filename": "watson.1m.sh",
					"content": "#!/bin/bash\n\n# Watson Status\n#\n# by Antoine Corcy \u003ccontact@sbin.dk\u003e\n#\n# \u003cxbar.title\u003eWatson Status\u003c/xbar.title\u003e\n# \u003cxbar.version\u003e1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAntoine Corcy\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003etoin0u\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows Watson's status\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eWatson\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/3OuXrWn.png\u003c/xbar.image\u003e\n#\n# Dependencies:\n#   watson (http://tailordev.github.io/Watson/)\n\n# get the status text\nstatus=$(/usr/local/bin/watson status)\n\n# show watson\nif [[ \"$status\" == \"No project started\" ]]\nthen\n    echo \"⏱ Watson\"\n    exit 1\nfi\n\n# get the project name\nproject=$(echo \"$status\" | awk '{printf \"⏱ %s\", $2}')\n\n# get the started time and uppercase the sentence\nstarted=$(echo \"$status\" | grep -E -o 'started (.*) \\(')\nstarted=\"$(tr '[:lower:]' '[:upper:]' \u003c\u003c\u003c \"${started:0:1}\")${started:1}\"\n\n# get the tags\ntags=$(echo \"$status\" | awk -F \"[][]\" '{printf \"Tags: %s\\n\", $2}')\n\n# main\necho \"$project\"\necho \"---\"\necho \"${started/(/} | color=green\"\necho \"$tags\"\n"
				}
			],
			"path": "Time/watson.1m.sh",
			"filename": "watson.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/watson.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Watson Status",
			"version": "1.0",
			"author": "Antoine Corcy",
			"authors": [
				{
					"name": "Antoine Kirk",
					"githubUsername": "toin0u",
					"imageURL": "https://avatars.githubusercontent.com/u/672421?v=4",
					"bio": "0x7F8C16C0C9A0A87B",
					"primary": true
				}
			],
			"desc": "Shows Watson's status",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/watson.1m.sh.png",
			"dependencies": [
				"Watson"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.281285+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/weeknumber.1m.sh",
					"filename": "weeknumber.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eWeek Number\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eSteffen Froehlich\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ecitoki\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eThis plugin will show the current week number.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/bfKN7x2.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003e\u003c/xbar.dependencies\u003e\n\ndate +\"%V\"\n"
				}
			],
			"path": "Time/weeknumber.1m.sh",
			"filename": "weeknumber.1m.sh",
			"dir": "Time",
			"docsPlugin": "Time/weeknumber.1m.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Week Number",
			"version": "v0.1",
			"author": "Steffen Froehlich",
			"authors": [
				{
					"name": "Steffen",
					"githubUsername": "citoki",
					"imageURL": "https://avatars.githubusercontent.com/u/7259873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin will show the current week number.",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/weeknumber.1m.sh.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.279964+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/worktime-tracker.1s.rb",
					"filename": "worktime-tracker.1s.rb",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 ruby\n\n# \u003cxbar.title\u003eWorktime Tracker\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAsh Wu(hSATAC)\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ehSATAC\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eA simple worktime tracker with record history.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eruby\u003c/xbar.dependencies\u003e\n\n# Functionality:\n# * Start / stop / pause / resume the timing session.\n# * Keep history records and export to a txt file.\n# * Rename session.\n\nrequire 'json'\n\n### ASSETS ###\n\nICON_PLAY = \"iVBORw0KGgoAAAANSUhEUgAAACoAAAAqCAYAAADFw8lbAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAAGVklEQVRYCe2YWaiVVRTHvTmlZZkmlmkOZYNiQVQUGVGRQVAQFEISTRBBE0EERYFURE9FPfUg0UNP9dCA+CI0WESDRTZpJmXiQFbmrOnV2++3714f+3z3u/fcc4QgaMH/rLXXXnvttdcev9Mz4hipr6/vuGG46Ovp6ekbht1/36TnWIaQszkGH2a1zJh+LYf/Q2S0l3LXNKqblgZIx0dpezq4E0wDB0C5DAzUslgJloOuqatA6S0yNQX5LnAWOAJGgqCWjKJczgBTu27Wa5mB6GA4PALV9vjcoAxSVWlTytm8M9ZtRp126RD4CuwEO4BZtC6mfCzyaLAVJCqzmdf4sE6ErkZKByPp8EieyolEYDDjwAnAwbsMXLP7srwf+/3YpzqDhWKdjyhl7Bupo0B1iBc7SDuY8mzK54GzwXRwCjCLZnov2AY2gJ/BN7Q7mn2MQj6EPAF9L/IB5DR4ysdGdgDSwOBzwBPgfbALDEVmfg14EVwF0nKDzwKvgsciMuRu90y/CxykjaIjcCv4CAxGf1PRO0jlFvRPgsvB69lmJ9xBn2Rv8MZg2049DWM9jsfPQ+BxoNM4fjYjfw7Wge1gD/ASmARmggvBRcB1LB0ELgmXij60XQMWswR+jP4oD59idPDx4GlQZuo3yi+Da8HUJq/ox4F54B7wCZBcp1L42oi8BBiwGW2bvJa+bADSNMAfAa61oB8QbgHV2Yk8GkwFZ4DpIE1lOKU8F7wCDNSNdBjo84HCprMgbYiDWPSLkP8AQZ8iXFY4Twc+OjfY2+BL8CG4D7imR4E07XKwFBwEMfDnsr5KTPhuy2kYm8cMvQOC1iIs1AHcAEaKXF6AvBsEucvjlDBgj61EyC+EEdxT4yYr4Ck5/VZtfjF2ZNH5HchOkbQH3B0OkWNZhO356DYCycP9WaCvhNwuBYtuGlgJgl5DSEsFnvzVw2w6CjzQnZbJGC8CMcoVyG+GA2ziGq1Uha2dDfBNG4+u0fCt1C8Du4B0Pbg4Sa1vhKxqcEZNLOg5yJdmS4+cd+nArNpRb9YPxcJP3SYGuIqKj3PlafBLsuxmG9C2ZdQ1A8/AWbnx9/Cvsxwd5WIL81xsRwbi2exZ6vkbNB/9ZPT6b4lLgwEKdBHImcgx7ZuQfwXSUMGUmWi0I5BSvx5/vrwk+/OSaKR6oHbEwNKCPrlosYMO9qIvAymqk2gAvpokeRlQUhY/4ccgd2e9/fkCa6R6oGGkPrKpbn+uSAPJcp25gU7MSjuMB3Xdrix7nQrJNnHNJkX5UwZT6s1IuWG85yWzNFiwDmY1mAVsuymmeYiZcDAxIPuMZYfYSvVAUyAuaJzH2rHFJMoT0LvrY9qSJ3Qx3a7j24A+9eOjOVEEHGV4LAvfr3HV/oUcM1eY9ov1QNU67Y7Mjg8Dp2NmxnfwlkApJyIYs/hnLg7K8kAj0HMxnJiNN8MNtpEMqqLayDdSIaT5wKea1NKmX9X/SxBelV6r8sYB2Z5+nLFpyHFO62At+u22RY6BqE/U1GkY/YLFZ9nOTXIjTibizCu18ZozAHAk8/CTXVQs2l6NZmHWOhNxptJ8wK1XNa4EgvBuTksCfjvwSSbtA/dqCPdB0jTIyk+TQJuxub13/Qcg6A2EU3NdDKTJRauORskYPgW8BYJ+QrgyO/TJNmyn2KYgc9uXwiHcBCzO+qY90xpcvUTjyOp1yNtAkO/NK8IeOQUMr15KhVx/j46h7nngV2fMlEFHpjueJae3fJ49SNmXT9B6hCWg2jDI5UZSbtlQlOeCZcA1HkG+hzyj62wW2UojxNlY8BQwE0HuUD8tbgBTok3J0ZttH9QPgy+AFEH6pbAgBznojRT+qoyEos5xFl+hfnzdD5aCOKQRR2wGnq9rwTawF9ix79nZYB64AJTBrKD8KLvbLwb/jChvQaq6JIO1KdzpvBmsAk3k+ejrvlwmpd3vFJ4B6asVbsbbJqujsHFYLXTkGcB1uxL4B8JQZPDrgJ/W14AYdJnhtrF0NBo6MdjyvyffkOcA19oc4HT7yPAK9vm2BbgkvgUbmOIDcGem4/+ZOgrUTqScFf8urF476Ly9DNJjzVsp/VGGje+FRNhY5+1VtctVbVlXgeqVTm1rhuWDdp4HNaQN7dtS14GWngkm1m/dn5kd1h+1pb//5X8jA/8AXKGXdOhgqSAAAAAASUVORK5CYII=\"\nICON_PLAY_COLOR = \"iVBORw0KGgoAAAANSUhEUgAAACoAAAAqCAYAAADFw8lbAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAAEtElEQVRYCe2XT4gcVRDG6/X0ZpPNRjQa0KybJSKKbDAgeAiiDHpXBNdLwEMOCkIET8Hb6MGT3ryIf44q7smTnkQCHgRzWUyCGFTIrLoqWRNNZnamXz9/1a97pmemd7tnCSrYBd39ul69qq++qvd6RqSWmoGagZqB/yQD5qahcoKvlUBkeczneSeyGjPL898U54DQCkshqE2STKlloUF5gMJlqVKDGxPxFjUZfyvBcZH4gViCO0QcDJoNJ/GFX0W+EdNSO9QfN8Q8a5PxFLexMk2xMg142LXmnNjnIeskq4+JhHuNdgECSO72Brc1I/H7P0v4HoDjpAIZcDWsILsD6lZgZdUuuFdO0HxvAfIh6r/FuINDZQ42k5Y0gA6duDl0M1xnKeFLbfP6mqQ+KmBMTKYHmgY47M48BV/v4GWWcl81EgQAYjONu0wAa6m1FW5j9mog9rl188bn07TBuNedE0xB3uVefpSgH2IMVteFUYhSVwkonvmxuvRhYL2P7TyKDteTv5g3L1Rltvpmcq2A/rKH3IvzRuyrIOyh+AtooQIATFHSeeSKWOV37G/F/jX22wrLLPlpW2e23mrsTqmqyvkEyB6Rk06iJcD+5qRPP0awY7v+qeORC31/a6jrd430aYNog+eDC3L6GR9dz9+dpYiFyRVpxve607PXpfcBBkuUmY0TEEB39lCKaBkNEkBdzCIzh37tJ3n7VMJmCaulmXgIPuOudO43Eh2CDTaPhameMjlywTY9G8Hc8BraWBjvMWe31Af6xSNy6qiP0RrNZ5h7Mqreo5g76R2BsZiGus5rkiQ7fRAAvW57bTl0euDreHQ+e8dWS7G/J8Eiz+9FfGvpmiKZEmh8gJ6HQdMBRcM75DuUDPw9phX8aLwpFHQ2owucHlkzODmQLC+5TQWUckUA1EMdsBlQBaCicUmBy7/7caIc3CzzBqqdwcZiu4fLLxzYFA+mAkrvbeJG2aQ/8/Ro3KzE+fFk0FwSWvobsPzHpNWkpiLQZfyvsrp/2UjjGoxwbqooOAVWJPm5LInMLkvGbJF822uzGJnN6LMi0FYCZk76P3YkbtOnt1NCwHoASk2++zTEdjqd40MR45BPr7u8Lg+vi3yC1sfQ+SIZ919ko80Gia3gkvlUj5WvaStwRJTNchRZPW6SZ/a+k05tWcsxpf1uv0p/TYF90NqFGLT3q0l6IC+75vw1abzADtjPYv105pJVHlVyKq/I3Z0eb7MwunGnbL57zpzrAxHVzQKqofR84YflgnviPph5mmB8Qh3oFGzWq6NgFbLXaJs4Sm6SY42Xj9bNF+3MZy6TwmF1RrPlafaLrnmMjfA45yYItF8D0I5umuzcYV57XCf5Tara8LO2OftdVZAaenqguioFu+QeO2oleoRvNx8CiaieolBQA0FBAqbBvG7cK7Oy98tLnsnScg+cMNgdUPWQgr3bndjXEMf/pJjPq5sHdENr69k0yjY96f4MpfHDQYkuVu1JDZGX3QNVLylYHTZdM7woVw7OSHgLv+A5enQ67O7jF/1xuWdzlb8uqsuvSd7/sZuC1atMqtpt46c8wDYLJ9RlYEuOnwl/taJmoGagZqBm4P/JwN8vfgtf3x54JQAAAABJRU5ErkJggg==\"\nICON_PAUSE   = \"iVBORw0KGgoAAAANSUhEUgAAACoAAAAqCAYAAADFw8lbAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAABuElEQVRYCe1XUUrEQAzd7ioIiifw3ysIHsRbeBE/BI8h+CseSP/0RxBEdlvfW+dJpkxtp0RQNoHsZJI3SfrapeliERIMBAPBQDCwEww0c66y67oVzpXObpqm6WxOYIkjvi8tsG3f6bZPhQfz2bi1SwfG4vZMiRUbz2wmJmOQCwTOoW9QMfYB+xrx59QAsS3sE/gvoWKaLB5CHxC/R3xJHPZ+gqTbW4j1DlqSU1ZDYEVN9lkJCN9Niu9xHZNJIJNErLwm3zvWJXQfSnY3UApxultr2PTTR6V9ACV+stQ2qsT6c/A8bTZFW81phev70aBNUYwXOFmqwANZxfJAOHPXYLODHo1mCX9rE416MxuMBqPeDHjn26lnVG8abxKzfB6Mzn7bZJ2MbDwaHSnhE/ZotObW12CzK5w7PWmc4wjHoZdjHm09BlzVFO3+mMe6VcNybaMqfoxCFM6VkiMYGv+EY4w15OeeF0XhlD9ZahsVC7eo8ATtf4q8pMrEqdlH2FdQsc3Y9lMEK0U5v3Zev/iEUAPFlDZu7RJ4LG7P/FjUAq2NAprqrZv23/lc7ncW+2AgGAgGgoH/wcAnzm2uPw9Tc7IAAAAASUVORK5CYII=\"\n\n### HELPERS ###\n\ndef prompt(question, default)\n    result = `/usr/bin/osascript -e 'Tell application \"System Events\" to display dialog \"#{question}\" default answer \"#{default}\"' -e 'text returned of result' 2\u003e/dev/null`.strip\n    result.empty? ? defult : result\nend\n\ndef notification(msg, title)\n  `/usr/bin/osascript -e 'display notification \"#{msg}\" with title \"#{title}\"'`\nend\n\n### CLASSES ###\n\nclass WorkSession\n  attr_reader :start_time, :end_time, :pause_time, :resume_time, :saved_duration, :name, :state\n\n  def initialize(name)\n    @name = name\n    @state = \"stopped\"\n    @saved_duration = 0\n  end\n\n  def duration\n    t = @saved_duration\n\n    if @state != \"paused\"\n      if @resume_time\n        t += (Time.now - @resume_time)\n      else\n        t += (Time.now - @start_time)\n      end\n    end\n\n    Time.at(t).utc.strftime(\"%H:%M:%S\")\n  end\n\n  def start\n    return if @state != \"stopped\"\n    @state = \"recording\"\n    @start_time = Time.now\n  end\n\n  def stop\n    return if @state != \"recording\"\n    @state = \"stopped\"\n    @end_time = Time.now\n  end\n\n  def last_start_time\n    @resume_time || @start_time\n  end\n\n  def pause\n    return if @state != \"recording\"\n    @state = \"paused\"\n    @pause_time = Time.now\n    @saved_duration += (@pause_time - last_start_time)\n  end\n\n  def resume\n    return if @state != \"paused\"\n    @state = \"recording\"\n    @resume_time = Time.now\n  end\n\n  def rename(new_name)\n    @name = new_name\n  end\n\n  def to_s\n    \"#{@name}, #{@start_time} ~ #{@end_time}, #{duration}\"\n  end\nend\n\nclass WorkTimer\n  attr_reader :workdir, :session\n\n  def initialize(workdir = nil)\n    @workdir = workdir || File.dirname(__FILE__)\n    load_session\n  end\n\n  def session_file\n    File.join @workdir, \".worktimer.dat\"\n  end\n\n  def history_file\n    File.join @workdir, \"worktimer\", \"history.txt\"\n  end\n\n  def state\n    @session.nil? ? \"stopped\" : @session.state\n  end\n\n  def start\n    session_name = prompt(\"Enter session name:\", \"Unnamed Session\")\n    @session = WorkSession.new session_name\n    @session.start\n    save_session\n\n    notification(\"New session [#{@session.name}] has started.\", \"Worktime Tracker\")\n  end\n\n  def stop\n    @session.stop\n    save_history\n    delete_session\n\n    notification(\"You spent #{duration} in [#{@session.name}]\", \"Worktime Tracker\")\n  end\n\n  def pause\n    @session.pause\n    save_session\n\n    notification(\"Session [#{@session.name}] has been paused.\", \"Worktime Tracker\")\n  end\n\n  def resume\n    @session.resume\n    save_session\n\n    notification(\"Session [#{@session.name}] has been resumed.\", \"Worktime Tracker\")\n  end\n\n  def rename\n    abort \"Session does not exist.\" if @session.nil?\n    session_name = prompt(\"Enter new session name:\", @session.name)\n    @session.rename session_name\n    save_session\n\n    notification(\"Current session renamed to: [#{@session.name}]\", \"Worktime Tracker\")\n  end\n\n  def duration\n    @session.nil? ? '' : @session.duration\n  end\n\n  def save_session\n    File.open(session_file, 'w') {|f| f.write(Marshal.dump(@session)) }\n  end\n\n  def delete_session\n    File.delete(session_file)\n  end\n\n  def load_session\n    if File.exist? session_file\n      @session = Marshal.load(File.read(session_file))\n    end\n  end\n\n  def save_history\n    system 'mkdir', '-p', File.dirname(history_file)\n    File.open(history_file, 'a') { |f| f.write(\"#{session}\\n\") }\n  end\n\n  def history\n    if File.exist? history_file\n      system '/usr/bin/open', history_file\n    else\n      notification(\"History file not found.\", \"Worktime Tracker\")\n    end\n  end\nend\n\ntimer = WorkTimer.new\n\n### ACTIONS ###\n\nif ARGV[0]\n  action = ARGV[0].to_sym\n  if timer.respond_to? action\n    timer.send(action)\n    exit\n  end\nend\n\n### RENDER ###\n\nREFRESH = \"---\\nReload| refresh=true\"\n\n\ncase timer.state\nwhen \"stopped\"\n  TITLE = \"|templateImage=#{ICON_PLAY}\"\n  MENU = \"\"\"\nStart | bash='#{__FILE__}' param1=start terminal=false\n\"\"\"\nwhen \"recording\"\n  TITLE = \" #{timer.duration} | image=#{ICON_PLAY_COLOR}\"\n  MENU = \"\"\"\n#{timer.session.name} | bash='#{__FILE__}' param1=rename terminal=false\n---\nPause | bash='#{__FILE__}' param1=pause terminal=false\nStop | bash='#{__FILE__}' param1=stop terminal=false\n\"\"\"\nwhen \"paused\"\n  TITLE = \"#{timer.duration} |templateImage=#{ICON_PAUSE}\"\n  MENU = \"\"\"\n#{timer.session.name} | bash='#{__FILE__}' param1=rename terminal=false\n---\nResume | bash='#{__FILE__}' param1=resume terminal=false\n\"\"\"\nend\n\nHISTORY = \"History | bash='#{__FILE__}' param1=history terminal=false\"\n\nputs \"\"\"\n#{TITLE}\n---\n#{MENU}\n---\n#{HISTORY}\n---\n#{REFRESH}\n\"\"\"\n"
				}
			],
			"path": "Time/worktime-tracker.1s.rb",
			"filename": "worktime-tracker.1s.rb",
			"dir": "Time",
			"docsPlugin": "Time/worktime-tracker.1s.rb.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "Worktime Tracker",
			"version": "v0.1",
			"author": "Ash Wu(hSATAC)",
			"authors": [
				{
					"name": "Ash Wu",
					"githubUsername": "hSATAC",
					"imageURL": "https://avatars.githubusercontent.com/u/88208?v=4",
					"bio": "Gopher, Rails, devOps, 🐈Crazy cat person, 🏹holiday archer. Creator of @golangtw",
					"primary": true
				}
			],
			"desc": "A simple worktime tracker with record history.",
			"imageURL": "",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.452189+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "Time/worldclock.1s.sh",
					"filename": "worldclock.1s.sh",
					"content": "#!/bin/bash\n\n# Display UTC in the menubar, and one or more additional zones in the drop down.\n# The current format (HH:MM:SS) works best with a one second refresh, or alter\n# the format and refresh rate to taste.\n#\n# \u003cxbar.title\u003eWorld Clock\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eAdam Snodgrass\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003easnodgrass\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay current UTC time in the menu bar, with various timezones in the drop-down menu\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://cloud.githubusercontent.com/assets/6187908/12207887/464ff8b2-b617-11e5-9d61-787eed228552.png\u003c/xbar.image\u003e\n# \u003cxbar.var\u003estring(VAR_ZONES=\"Australia/Sydney Europe/Amsterdam America/New_York America/Los_Angeles\"): Space delimited set of timezones\u003c/xbar.var\u003e\n\nZONES=${VAR_ZONES}\ndate -u +'%H:%M:%S UTC | font=Monaco'\necho '---'\nfor zone in $ZONES; do\n  echo \"$(TZ=$zone date +'%H:%M:%S %z') $zone | font=Monaco\"\ndone\n"
				}
			],
			"path": "Time/worldclock.1s.sh",
			"filename": "worldclock.1s.sh",
			"dir": "Time",
			"docsPlugin": "Time/worldclock.1s.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "World Clock",
			"version": "v1.1",
			"author": "Adam Snodgrass",
			"authors": [
				{
					"name": "Adam Snodgrass",
					"githubUsername": "asnodgrass",
					"imageURL": "https://avatars.githubusercontent.com/u/6187908?v=4",
					"bio": "Sapient ambulatory bio-software",
					"primary": true
				}
			],
			"desc": "Display current UTC time in the menu bar, with various timezones in the drop-down menu",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/worldclock.1s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:37.442931+01:00",
			"vars": [
				{
					"type": "string",
					"name": "VAR_ZONES",
					"label": "Zones",
					"default": "Australia/Sydney Europe/Amsterdam America/New_York America/Los_Angeles",
					"desc": "Space delimited set of timezones",
					"options": null
				}
			],
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Time/cal.1d.sh",
					"filename": "cal.1d.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cxbar.title\u003ecal\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eBuster Collings\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ebusterc\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows a calendar of the current, previous and next year\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/busterc/bitbar-cal/master/screenshot.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/busterc/bitbar-cal\u003c/xbar.abouturl\u003e\n\nyear=$(date +%Y)\nlast_year=$((year-1))\nnext_year=$((year+1))\n\necho \"$year\"\necho \"---\"\n\necho \"$last_year\"\ncal \"$last_year\" | while IFS= read -r i; do echo \"--$i | trim=false font=courier\"; done\n(cal -h \"$year\" 2\u003e/dev/null || cal \"$year\") | while IFS= read -r i; do echo \"$i | trim=false font=courier\"; done\ncal \"$next_year\" | while IFS= read -r i; do echo \"$i | trim=false font=courier\"; done\n"
				}
			],
			"path": "Time/cal.1d.sh",
			"filename": "cal.1d.sh",
			"dir": "Time",
			"docsPlugin": "Time/cal.1d.sh.html",
			"docsCategory": "Time.html",
			"pathSegments": [
				"Time"
			],
			"categoryPathSegments": [
				{
					"path": "Time",
					"text": "Time",
					"isLast": true
				}
			],
			"title": "cal",
			"version": "v1.0",
			"author": "Buster Collings",
			"authors": [
				{
					"name": "Buster Collings",
					"githubUsername": "busterc",
					"imageURL": "https://avatars.githubusercontent.com/u/1676932?v=4",
					"bio": "🛠Build\r\n📊Measure\r\n💡Learn\r\n🤝Share\r\n🎉Enjoy",
					"primary": true
				}
			],
			"desc": "Shows a calendar of the current, previous and next year",
			"imageURL": "https://xbarapp.com/docs/plugins/Time/cal.1d.sh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/busterc/bitbar-cal",
			"lastUpdated": "2023-07-15T09:53:35.889232+01:00",
			"vars": null,
			"processingNotes": null
		}
	]
}