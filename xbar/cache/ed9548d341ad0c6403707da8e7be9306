HTTP/2.0 200 OK
Alt-Svc: h3=":443"; ma=86400
Cache-Control: public, max-age=600
Cf-Cache-Status: DYNAMIC
Cf-Ray: 84ef009cdf4748c5-LHR
Content-Type: application/json
Date: Fri, 02 Feb 2024 02:28:43 GMT
Etag: "BYt3dA"
Expires: Fri, 02 Feb 2024 02:38:43 GMT
Nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=ef2hr982UEwkW3v7Qd3ANzKW1dlmqlFaS1vQZ6Nu%2BEG6yjLPxD1ifU%2BuA6gWCcMqgetBB5YxxpVz%2FMKItYiNfvq3V3uEUBFjUAPlB3O1wDZk6K7oR%2BVsANTR8zJKsw%3D%3D"}],"group":"cf-nel","max_age":604800}
Server: cloudflare
X-Cloud-Trace-Context: 3b04f4a5ea6d1a1db505b4b1d958a792

{
	"version": "v2.1.7-beta-32-g06577f4",
	"lastUpdated": "15 Jul 23 09:53 BST",
	"plugins": [
		{
			"files": [
				{
					"path": "AWS/awsmonthcost.1h.sh",
					"filename": "awsmonthcost.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cxbar.title\u003eAWS Cost\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eSean Luce\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eseanluce\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShow the current months AWS costs.\u003c/xbar.desc\u003e\n\n#Assumes AWS CLI is installed, 'pip install awscli' or 'pip3 install awscli', and 'aws configure' has been ran.\n\nstart=$(date -v1d +%Y-%m-%d)\nend=$(date -v+1m -v1d -v-1d +%Y-%m-%d)\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\nprefix=$(aws ce get-cost-and-usage --time-period Start=\"$start\",End=\"$end\" --granularity MONTHLY --metric \"BlendedCost\" | awk '/Unit/ {print $2;}' | sed 's/[,\"]//g')\ncost=$(aws ce get-cost-and-usage --time-period Start=\"$start\",End=\"$end\" --granularity MONTHLY --metric \"BlendedCost\" | awk '/Amount/ {print $2;}' | sed 's/[,\"]//g' | xargs printf \"%.*f\\n\" 2)\necho \"$cost\" \"$prefix\""
				}
			],
			"path": "AWS/awsmonthcost.1h.sh",
			"filename": "awsmonthcost.1h.sh",
			"dir": "AWS",
			"docsPlugin": "AWS/awsmonthcost.1h.sh.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "AWS Cost",
			"version": "v1.0.0",
			"author": "Sean Luce",
			"authors": [
				{
					"name": "Sean Luce",
					"githubUsername": "seanluce",
					"imageURL": "https://avatars.githubusercontent.com/u/2560575?v=4",
					"bio": "Technical Marketing Engineer and Cloud Solutions Architect, specializing in @microsoft Azure, working for @NetApp. Ask me about Azure NetApp Files!\r\n",
					"primary": true
				}
			],
			"desc": "Show the current months AWS costs.",
			"imageURL": "",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.263084+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "AWS/elb.30s.sh",
					"filename": "elb.30s.sh",
					"content": "#!/bin/bash\n\n# Percentage of healthy EC2 instances behind an ELB\n#   Dropdown with healthy and unhealthy totals\n#\n# by Jonathan Keith (http://github.com/joncse)\n#\n# \u003cxbar.title\u003eAWS ELB Healthy Percentage\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eJonathan Keith\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ejoncse\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows the percentage of healthy EC2 instances behind an ELB along with a dropdown to display the healthy and unhealthy totals.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eawscli\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttp://i.imgur.com/nQ6LzvZ.png\u003c/xbar.image\u003e\n#\n# Dependencies: \n#   awscli (https://aws.amazon.com/cli/)\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\n\n## Required Configuration (must provide your own settings here)\n\n# The name of the Elastic Load Balancer\nLOAD_BALANCER=\"\"\n\n# AWS CLI credential profile\nAWS_CLI_PROFILE=\"default\"\n\n## Optional Configuration (not required)\n\n# Prefix label\nMENU_BAR_PREFIX_LABEL=\"ELB: \"\n\n# InService output color (default green)\nIN_SERVICE_COLOR=\"#29cc00\"\n\n# OutOfService output color (default red)\nOUT_SERVICE_COLOR=\"#ff0033\"\n\n## Implementation (changes optional, not required)\n\nif [ -z \"$LOAD_BALANCER\" ]; then\n  echo \"Missing configuration: load balancer name\"\n  exit 1\nfi\n\n# Fetch list of instance health statuses (InService or OutOfService)\nstatus=$(aws --profile $AWS_CLI_PROFILE elb describe-instance-health --load-balancer-name $LOAD_BALANCER --query 'InstanceStates[*].[State]' --output text)\n\n# Total number of lines fetched\ntotal=$(echo \"$status\" | tr ' ' '\\n' | wc -l | xargs)\n\n# Number of lines containing \"In\" (matches InService lines)\nin=$(echo \"$status\" | tr ' ' '\\n' | grep -c In | xargs)\n\n# Number of lines containing \"Out\" (matches OutOfService lines)\nout=$(echo \"$status\" | tr ' ' '\\n' | grep -c Out | xargs)\n\n# Percentage calculation\npercent=$(bc -l \u003c\u003c\u003c \"($in / $total) * 100\" | xargs printf \"%1.0f\")\n\n# Output\necho \"$MENU_BAR_PREFIX_LABEL $percent%\"\necho \"---\"\necho \"In: $in | color=$IN_SERVICE_COLOR\"\necho \"Out: $out | color=$OUT_SERVICE_COLOR\"\n"
				}
			],
			"path": "AWS/elb.30s.sh",
			"filename": "elb.30s.sh",
			"dir": "AWS",
			"docsPlugin": "AWS/elb.30s.sh.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "AWS ELB Healthy Percentage",
			"version": "v1.0",
			"author": "Jonathan Keith",
			"authors": [
				{
					"name": "Jonathan Keith",
					"githubUsername": "joncse",
					"imageURL": "https://avatars.githubusercontent.com/u/1895779?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the percentage of healthy EC2 instances behind an ELB along with a dropdown to display the healthy and unhealthy totals.",
			"imageURL": "https://xbarapp.com/docs/plugins/AWS/elb.30s.sh.png",
			"dependencies": [
				"awscli"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.280989+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "AWS/ec2-start-stop.1h.sh",
					"filename": "ec2-start-stop.1h.sh",
					"content": "#!/bin/sh\n\n# \u003cxbar.title\u003eAmazon EC2 Instance Start/Stop\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eFrancis Mak\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003efranfran\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eLet you start/stop Amazon EC2 instances\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eawscli,jq\u003c/xbar.dependencies\u003e\n\n# Dependencies:\n# awscli (https://aws.amazon.com/cli/)\n# jq (https://stedolan.github.io/jq/)\n\n# Installation:\n# 1. Copy this script to your BitBar plugin folder\n# 2. Ensure the plugin file is executable by running chmod +x ec2-start-stop.1h.sh\n# 3. Change your AWS profile in the AWS_CLI_PROFILE variable below\n# 4. Change your AWS region in the AWS_CLI_REGION variable below\n# Notes: Optionally, to display the instace name in bitbar, use the key \"Name\" in AWS EC2 Tags\nAWS_CLI_PROFILE=\"default\"\nAWS_CLI_REGION=\"us-east-1\"\n\nexport PATH=\"$PATH:/usr/local/bin:/opt/homebrew/bin\"\n\nCMD_AWS=$(command -v aws)\nCMD_JQ=$(command -v jq)\nDISABLED_ITEM_COLOR=\"#C0C0C0\"\nARG1_INSTANCE_ID=\"$1\"\nARG2_NAME=\"$2\"\nARG3_ACTION=\"$3\"\nSTATUS_STOPPED=\"üçé\"\nSTATUS_STARTED=\"üçè\"\n\n# function print_instance()\n# print out menu for each instance\n# parameters:\n#   $1, instance details in format:\n#   \"\u003cinstance_id\u003e__--SEP--__\u003cinstance_tag_name\u003e__--SEP--__\u003cinstance_status\u003e\"\nprint_instance(){\n  instance_id=$(echo \"$1\" | awk -F \"__--SEP--__\" '{print $1}')\n  instance_tag_name=$(echo \"$1\" | awk -F \"__--SEP--__\" '{print $2}')\n  instance_status=$(echo \"$1\" | awk -F \"__--SEP--__\" '{print $3}')\n  \n  if [ \"$instance_status\" = \"running\" ]; then\n    echo \"$STATUS_STARTED $instance_tag_name\"\n  else\n    echo \"$STATUS_STOPPED $instance_tag_name\"\n  fi\n  echo \"---\"\n  echo \"--status: $instance_status\"\n  if [ \"$instance_status\" = \"running\" ]; then\n    echo \"--start | color=$DISABLED_ITEM_COLOR\"\n    echo \"--stop | bash='$0' param1=$instance_id param2=$instance_tag_name param3=stop-instances refresh=false terminal=false\"\n  elif [ \"$instance_status\" = \"stopped\" ]; then\n    echo \"--start | bash='$0' param1=$instance_id param2=$instance_tag_name param3=start-instances refresh=false terminal=false\"\n    echo \"--stop | color=$DISABLED_ITEM_COLOR\"\n  fi\n}\n\nmain() {\n  json=$( $CMD_AWS --profile $AWS_CLI_PROFILE --region $AWS_CLI_REGION ec2 describe-instances --output json )\n  #shellcheck disable=SC2016\n  instances=$( echo \"$json\" | $CMD_JQ -r 'def count(s): reduce s as $_ (0;.+1);.Reservations | .[] | .Instances | .[] | .InstanceId as $i | $i +\"__--SEP--__\" + (if count (.Tags[]? | select(.Key==\"Name\")) == 0 then $i else (.Tags[] | select(.Key==\"Name\")|.Value) end) +\"__--SEP--__\" + .State.Name' )\n  #if no Name tag found, it will use instance id instead\n\n  for row in $instances; do\n    print_instance \"$row\"\n  done\n\n  if [ \"$ARG3_ACTION\" ]; then\n    CMD_NOTIFY=$(command -v osascript)\n    if [ \"$CMD_NOTIFY\" ]; then\n      osascript -e \"display notification \\\"$ARG2_NAME $ARG3_ACTION\\\" \"\n    fi\n    $CMD_AWS --profile $AWS_CLI_PROFILE --region $AWS_CLI_REGION ec2 \"$ARG3_ACTION\" --instance-ids \"$ARG1_INSTANCE_ID\"\n  fi\n}\n\necho \":server.rack:\"\necho \"---\"\n\nif [ \"$CMD_AWS\" ] \u0026\u0026 [ \"$CMD_JQ\" ]; then\n  main\nelse\n  echo \"aws/jq command not found\"\nfi\necho \"Refresh status | refresh=true\"\n\n"
				}
			],
			"path": "AWS/ec2-start-stop.1h.sh",
			"filename": "ec2-start-stop.1h.sh",
			"dir": "AWS",
			"docsPlugin": "AWS/ec2-start-stop.1h.sh.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "Amazon EC2 Instance Start/Stop",
			"version": "v1.0",
			"author": "Francis Mak",
			"authors": [
				{
					"name": "Francis Mak",
					"githubUsername": "franfran",
					"imageURL": "https://avatars.githubusercontent.com/u/1584365?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Let you start/stop Amazon EC2 instances",
			"imageURL": "",
			"dependencies": [
				"awscli",
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.260739+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "AWS/ecs-cluster.10m.sh",
					"filename": "ecs-cluster.10m.sh",
					"content": "#!/bin/sh\n# \u003cxbar.title\u003eAmazon ECS Cluster Status\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eBob Zoller\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ebobzoller\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows statistics about your Amazon ECS cluster.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eawscli,jq\u003c/xbar.dependencies\u003e\n\n# Dependencies: \n#   awscli (https://aws.amazon.com/cli/)\n#   jq (https://stedolan.github.io/jq/)\n\nAWS_CLI_PROFILE=\"default\"\nECS_CLUSTER=\"\"\n\nexport PATH=\"$PATH:/usr/local/bin\"\n\nif [ -z \"$ECS_CLUSTER\" ]; then\n  echo \"Missing configuration: cluster name\"\n  exit 1\nfi\n\ndata=$( aws --profile $AWS_CLI_PROFILE ecs list-container-instances --output json --cluster $ECS_CLUSTER )\ninstance_ids=$( echo \"$data\" | jq -r '.containerInstanceArns | map(. | split(\"/\") | last) | join(\" \")' )\n\ndata=$( aws --profile $AWS_CLI_PROFILE ecs describe-container-instances --output json --cluster $ECS_CLUSTER --container-instances \"$instance_ids\" )\ninstance_count=$( echo \"$data\" | jq -r '.containerInstances | length' )\n\ntotal_memory=$(( $( echo \"$data\" | jq -r '.containerInstances | map(.registeredResources[] | select(.name == \"MEMORY\") | .integerValue) | add' ) / 1000 ))\nremaining_memory=$(( $( echo \"$data\" | jq -r '.containerInstances | map(.remainingResources[] | select(.name == \"MEMORY\") | .integerValue) | add' ) / 1000 ))\nreserved_memory=$(( total_memory - remaining_memory ))\nusage_memory=$( echo \"$reserved_memory * 100 / $total_memory\" | bc )\n\ntotal_cpu=$( echo \"$data\" | jq -r '.containerInstances | map(.registeredResources[] | select(.name == \"CPU\") | .integerValue) | add' )\nremaining_cpu=$( echo \"$data\" | jq -r '.containerInstances | map(.remainingResources[] | select(.name == \"CPU\") | .integerValue) | add' )\nreserved_cpu=$(( total_cpu - remaining_cpu ))\nusage_cpu=$( echo \"$reserved_cpu * 100 / $total_cpu\" | bc )\n\nmono() {\n  echo \"$1 | font=Monaco trim=false\"\n}\n\necho \"#:${instance_count} C:${usage_cpu}% M:${usage_memory}%\"\necho \"---\"\nmono \"Instances:\"\nmono \"  Count:    ${instance_count}\"\nmono \"Memory:\"\nmono \"  Total:    ${total_memory} GB\"\nmono \"  Reserved: ${reserved_memory} GB\"\nmono \"  Free:     ${remaining_memory} GB\"\nmono \"CPU:\"\nmono \"  Total:    ${total_cpu} shares\"\nmono \"  Reserved: ${reserved_cpu} shares\"\nmono \"  Free:     ${remaining_cpu} shares\"\n\n"
				}
			],
			"path": "AWS/ecs-cluster.10m.sh",
			"filename": "ecs-cluster.10m.sh",
			"dir": "AWS",
			"docsPlugin": "AWS/ecs-cluster.10m.sh.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "Amazon ECS Cluster Status",
			"version": "v1.0",
			"author": "Bob Zoller",
			"authors": [
				{
					"name": "Bob Zoller",
					"githubUsername": "bobzoller",
					"imageURL": "https://avatars.githubusercontent.com/u/16850?v=4",
					"bio": "luddite-leaning technology leader",
					"primary": true
				}
			],
			"desc": "Shows statistics about your Amazon ECS cluster.",
			"imageURL": "",
			"dependencies": [
				"awscli",
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.27262+01:00",
			"vars": null,
			"processingNotes": [
				"missing image URL"
			]
		},
		{
			"files": [
				{
					"path": "AWS/sqs-status.1m.sh",
					"filename": "sqs-status.1m.sh",
					"content": "#!/bin/bash\n# \u003cxbar.title\u003eAmazon SQS Queue Status\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev0.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eBrandon Stilson\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003ebbstilson\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eShows current queue stats for specified AWS SQS queues. Updates every minute.\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003eawscli,jq\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/UFhXIL5.png\u003c/xbar.image\u003e\n\n# Dependencies:\n#   awscli (https://aws.amazon.com/cli/)\n#   jq (https://stedolan.github.io/jq/)\n\n# Hello, User! Be sure to fill out the following areas:\n# 1. Your region in the AWS_REGION.\n# 2. The names of the SQS queues you want to track in the QUEUES array.\n\nexport PATH=\"$PATH:/usr/local/bin\"\n\nAWS_PROFILE=\"default\"\nexport AWS_PROFILE\n\nAWS_REGION=\"\"\nexport AWS_REGION\n\n# Add the queues you want to report on here. Do not use quotes or commas!\n# For example: QUEUES=(foo-queue foo-queue-deadletter bar-queue bar-queue-deadletter)\nQUEUES=()\n\nQUEUECOLOR=\"white\"\nNUMCOLOR=\"red\"\n\nmonoq() {\n  echo \"$1 | font=Monaco trim=false color=$QUEUECOLOR href=$2\"\n}\n\nmonon() {\n  echo \"$1 | font=Monaco trim=false color=$NUMCOLOR\"\n}\n\nSQS_URL_ROOT=\"https://console.aws.amazon.com/sqs/home?region=$AWS_REGION#queue-browser:prefix=\"\n\necho \"SQS\"\necho \"---\"\nfor idx in ${!QUEUES[*]}\ndo\n    QUEUE_URL=$(aws sqs get-queue-url --queue-name=\"${QUEUES[idx]}\" | jq .QueueUrl | cut -d '\"' -f 2)\n    RESP=$(aws sqs get-queue-attributes \\\n        --queue-url \"$QUEUE_URL\" \\\n        --attribute-names ApproximateNumberOfMessages ApproximateNumberOfMessagesNotVisible \\\n        | jq .Attributes)\n\n    DEPTH=$(echo \"$RESP\" | jq '.ApproximateNumberOfMessages | tonumber')\n    INFLIGHT=$(echo \"$RESP\" | jq '.ApproximateNumberOfMessagesNotVisible | tonumber')\n\n    monoq \"Queue     : ${QUEUES[idx]}\" \"$SQS_URL_ROOT${QUEUES[idx]}\"\n    monon \"Depth     : $DEPTH\"\n    monon \"In-flight : $INFLIGHT\"\ndone\n"
				}
			],
			"path": "AWS/sqs-status.1m.sh",
			"filename": "sqs-status.1m.sh",
			"dir": "AWS",
			"docsPlugin": "AWS/sqs-status.1m.sh.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "Amazon SQS Queue Status",
			"version": "v0.1",
			"author": "Brandon Stilson",
			"authors": [
				{
					"name": "Brandon Stilson",
					"githubUsername": "bbstilson",
					"imageURL": "https://avatars.githubusercontent.com/u/7949037?v=4",
					"bio": "It's what it's.\r\n\r\n(he/him)",
					"primary": true
				}
			],
			"desc": "Shows current queue stats for specified AWS SQS queues. Updates every minute.",
			"imageURL": "https://xbarapp.com/docs/plugins/AWS/sqs-status.1m.sh.png",
			"dependencies": [
				"awscli",
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.26083+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "AWS/cloudwatch-alarms.30s.py",
					"filename": "cloudwatch-alarms.30s.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eCloudWatch Alarms Status\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eSebastian Rodriguez\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003esebasrp\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eMonitor the status of your CloudWatch Alarms\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003epython, boto3\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/qiqHX32.png\u003c/xbar.image\u003e\n\nimport boto3\n\n\nclass CWA_status:\n\n    def __init__(self):\n        self.cw_client = boto3.client('cloudwatch')\n        self.cwa_OK = self.get_alarms(state='OK')\n        self.cwa_NOK = self.get_alarms(state='ALARM')\n        self.cwa_ID = self.get_alarms(state='INSUFFICIENT_DATA')\n\n    def get_alarms(self, state):\n        alarms = []\n        paginator = self.cw_client.get_paginator('describe_alarms')\n        for response in paginator.paginate(StateValue=state):\n            alarms += response['MetricAlarms']\n        alarms = sorted(alarms, key=lambda i: i['StateUpdatedTimestamp'])\n        return alarms\n\n    def display_alarms(self):\n        status_string = 'CWA '\n        cwa_nok = f\"{':fire: ' + str(len(self.cwa_NOK)) if self.cwa_NOK else ''}\"\n        cwa_id = f\"{':warning: ' + str(len(self.cwa_ID)) if self.cwa_ID else ''}\"\n        cwa_ok = f\"{':thumbsup:' if not self.cwa_NOK and not self.cwa_ID else ''}\"\n        print(f\"{status_string}{cwa_nok}{' - ' if (cwa_nok and cwa_id) else ''}{cwa_id}{cwa_ok}\")\n\n    def display_detailed_alarms(self):\n        self.display_alarm_list(self.cwa_NOK, 'ALARM')\n        self.display_alarm_list(self.cwa_ID, 'INSUFFICIENT_DATA')\n        self.display_alarm_list(self.cwa_OK, 'OK')\n\n    def display_alarm_list(self, alarm_dict, state_string):\n        print(f\"{state_string} - ({len(alarm_dict)})\")\n        if alarm_dict:\n            for monitor in alarm_dict:\n                print(f\"-- {monitor['AlarmName']}\")\n        else:\n            print(f\"-- No monitors in {state_string}!\")\n\n\nif __name__ == '__main__':\n    try:\n        cwa_status = CWA_status()\n        cwa_status.display_alarms()\n        print('---')\n        cwa_status.display_detailed_alarms()\n    except Exception as ex:\n        print(f\":warning: Exception executing script. Exception: {ex}\")\n        raise ex\n"
				}
			],
			"path": "AWS/cloudwatch-alarms.30s.py",
			"filename": "cloudwatch-alarms.30s.py",
			"dir": "AWS",
			"docsPlugin": "AWS/cloudwatch-alarms.30s.py.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "CloudWatch Alarms Status",
			"version": "v1.0",
			"author": "Sebastian Rodriguez",
			"authors": [
				{
					"name": "Sebastian Rodriguez",
					"githubUsername": "sebasrp",
					"imageURL": "https://avatars.githubusercontent.com/u/331558?v=4",
					"bio": "engineering leader passionate about solving technical challenges!",
					"primary": true
				}
			],
			"desc": "Monitor the status of your CloudWatch Alarms",
			"imageURL": "https://xbarapp.com/docs/plugins/AWS/cloudwatch-alarms.30s.py.png",
			"dependencies": [
				"python",
				"boto3"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:08.287733+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "AWS/pipeline-status.1m.py",
					"filename": "pipeline-status.1m.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/bin/python3\n# -*- coding: UTF-8 -*-\n\n# \u003cxbar.title\u003eCodePipeline Status\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eSebastian Kruschwitz\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003esebk\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eMonitor the status of your CodePipeline\u003c/xbar.desc\u003e\n# \u003cxbar.dependencies\u003epython,boto3\u003c/xbar.dependencies\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/sebk/my-xbar-plugins/main/aws/codepipeline-status/pipeline-status.png\u003c/xbar.image\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/sebk/my-xbar-plugins/blob/main/aws/codepipeline-status/README.md\u003c/xbar.abouturl\u003e\n\n# \u003cxbar.var\u003estring(VAR_PIPELINE_NAME=\"Pipeline-Name\"): Name of the pipeline\u003c/xbar.var\u003e\n\nimport json\nimport os\nfrom enum import Enum\n\nimport boto3\n\n\nclass Status(Enum):\n    IN_PROGRESS = \"InProgress\"\n    FAILED = \"Failed\"\n    SUCCEEDED = \"Succeeded\"\n\n\nclass PipelineStatus:\n\n    def __init__(self) -\u003e None:\n        self.pipeline_name = os.environ.get(\"VAR_PIPELINE_NAME\")\n        self.execution_data_cache = {}\n        self.cp_client = boto3.client(\"codepipeline\")\n        pipeline_result = self.cp_client.get_pipeline_state(name=self.pipeline_name)\n        self.pipeline_data = self.get_data(result=pipeline_result)\n\n    def request_execution(self, execution_id):\n        if not execution_id:\n            return \"\"\n        if execution_id in self.execution_data_cache:\n            return self.execution_data_cache[execution_id]\n\n        result = self.cp_client.get_pipeline_execution(pipelineName=self.pipeline_name,\n                                                       pipelineExecutionId=execution_id)\n        revisions = result[\"pipelineExecution\"][\"artifactRevisions\"]\n        if len(revisions) \u003e 0:\n            message = json.loads(revisions[0][\"revisionSummary\"])[\"CommitMessage\"].replace(\"\\n\", \" \")\n            self.execution_data_cache[execution_id] = message\n            return message\n        return \"\"\n\n    def get_data(self, result):\n        stages = []\n        for stage in result[\"stageStates\"]:\n            status = stage[\"latestExecution\"][\"status\"] if \"latestExecution\" in stage else \"unknown\"\n\n            execution_id = stage[\"latestExecution\"][\"pipelineExecutionId\"] if \"latestExecution\" in stage else \"\"\n            message = self.request_execution(execution_id=execution_id)\n\n            actions = []\n            for action in stage[\"actionStates\"]:\n                action_status = action[\"latestExecution\"][\"status\"] if \"latestExecution\" in action else \"unknown\"\n                actions.append({'name': action[\"actionName\"], 'status': action_status})\n            stages.append({'name': stage[\"stageName\"], 'status': status, 'actions': actions, 'message': message})\n\n        return stages\n\n    def get_symbol(self, status) -\u003e str:\n        if status == Status.IN_PROGRESS: return ':hourglass_flowing_sand:'\n        if status == Status.FAILED: return ':x:'\n        if status == Status.SUCCEEDED: return ':white_check_mark:'\n\n    def get_stage_status_symbol(self, data) -\u003e str:\n        any_progress = any(entry[\"status\"] == Status.IN_PROGRESS.value for entry in data)\n        if any_progress: return self.get_symbol(Status.IN_PROGRESS)\n\n        any_error = any(entry[\"status\"] == Status.FAILED.value for entry in data)\n        if any_error: return self.get_symbol(Status.FAILED)\n\n        all_succeeded = all(entry[\"status\"] == Status.SUCCEEDED.value for entry in data)\n        if all_succeeded: return self.get_symbol(Status.SUCCEEDED)\n\n        return ':warning:'\n\n    def get_action_status_symbol(self, action) -\u003e str:\n        # Python \u003e= 3.10.x:\n        # match action['status']:\n        #     case 'Succeeded': return ':white_check_mark:'\n        #     case 'InProgress': return ':hourglass_flowing_sand:'\n        #     case 'Failed': return ':x:'\n        #     case _: return ':grey_question:'\n        # Python 3.9.x:\n        if action[\"status\"] == Status.SUCCEEDED.value: return self.get_symbol(Status.SUCCEEDED)\n        if action[\"status\"] == Status.IN_PROGRESS.value: return self.get_symbol(Status.IN_PROGRESS)\n        if action[\"status\"] == Status.FAILED.value: return self.get_symbol(Status.FAILED)\n        return ':grey_question:'\n\n    def display_status(self):\n        emoji = self.get_stage_status_symbol(data=self.pipeline_data)\n        status_string = f\"{emoji} {self.pipeline_name}\"\n        print(f\"{status_string}\")\n\n    def display_detailed_status(self):\n        for stage in self.pipeline_data:\n            stage_emoji = self.get_stage_status_symbol(stage[\"actions\"])\n            print(f\"{stage_emoji} {stage['name']}\")\n            if stage[\"status\"] != Status.SUCCEEDED.value:\n                print(f\"-- {stage['message']}\")\n            for action in stage[\"actions\"]:\n                action_emoji = self.get_action_status_symbol(action)\n                print(f\"-- {action_emoji} {action['name']} \")\n\n\nif __name__ == '__main__':\n    try:\n        pipe_status = PipelineStatus()\n        pipe_status.display_status()\n        print(\"---\")\n        pipe_status.display_detailed_status()\n    except Exception as ex:\n        print(f\":warning: Exception executing script. Exception: {ex}\")\n        raise ex\n"
				}
			],
			"path": "AWS/pipeline-status.1m.py",
			"filename": "pipeline-status.1m.py",
			"dir": "AWS",
			"docsPlugin": "AWS/pipeline-status.1m.py.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "CodePipeline Status",
			"version": "v1.0",
			"author": "Sebastian Kruschwitz",
			"authors": [
				{
					"name": "Sebastian",
					"githubUsername": "sebk",
					"imageURL": "https://avatars.githubusercontent.com/u/414271?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Monitor the status of your CodePipeline",
			"imageURL": "https://xbarapp.com/docs/plugins/AWS/pipeline-status.1m.py.png",
			"dependencies": [
				"python",
				"boto3"
			],
			"aboutURL": "https://github.com/sebk/my-xbar-plugins/blob/main/aws/codepipeline-status/README.md",
			"lastUpdated": "2023-07-15T09:53:08.260006+01:00",
			"vars": [
				{
					"type": "string",
					"name": "VAR_PIPELINE_NAME",
					"label": "Pipeline name",
					"default": "Pipeline-Name",
					"desc": "Name of the pipeline",
					"options": null
				}
			],
			"processingNotes": null
		}
	]
}