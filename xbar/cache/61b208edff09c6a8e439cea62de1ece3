HTTP/2.0 200 OK
Connection: close
Age: 0
Alt-Svc: h3=":443"; ma=86400
Cache-Control: public, max-age=600
Cf-Cache-Status: DYNAMIC
Cf-Ray: 84d2ed54fecf3860-LHR
Content-Type: application/json
Date: Mon, 29 Jan 2024 16:42:12 GMT
Etag: "BYt3dA"
Expires: Mon, 29 Jan 2024 16:52:12 GMT
Nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
Report-To: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=7n7seUpdZBDeQYHrRlaQu4Mlv6CuBO%2FaGnORvXw3NfHwkryOWdGtLp7sXebw54nsofNKRQPP9j3%2BiUczHqd1lY%2ByOpf1VqCcghhSTmCTNBj38Ra5VVE%2B58SwrLGT4A%3D%3D"}],"group":"cf-nel","max_age":604800}
Server: cloudflare
X-Cloud-Trace-Context: 245e9a4ea8afe6db56afafe9ac6e9203
X-From-Cache: 1

{
	"version": "v2.1.7-beta-32-g06577f4",
	"lastUpdated": "15 Jul 23 09:53 BST",
	"plugins": [
		{
			"files": [
				{
					"path": "Tools/Slack/slack-multi-teams.1m.rb",
					"filename": "slack-multi-teams.1m.rb",
					"content": "#!/usr/bin/env ruby\n#\n# Slack Mutli-Teams Overview.\n#\n# by Harry Löwen\n#\n# Provides an overview of unread channels, unread messages and channel histories.\n# Features: multiple teams (workspaces) handling,\n# 'mark as read' and 'open in slack' buttons,\n# display all channels or only unread ones.\n#\n# Uses Slack Legacy Token (from now)\n# https://api.slack.com/custom-integrations/legacy-tokens\n#\n# Refresh rate is set to every minute.\n# Because: 180+ lines of code and 4+ requests running per team (one channel, one user)\n# For a simple unread indicator check out: https://github.com/matryer/bitbar-plugins/blob/master/Messenger/slack-unread.1s.py\n#\n# Feel free to customize settings, colors, all-done-messages, etc.\n#\n# metadata\n# \u003cxbar.title\u003eSlack Multi-Teams Overview\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eHarry Löwen\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eharryloewen\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProvides an overview of unread channels, unread messages and channel histories.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://drive.google.com/uc?export=preview\u0026id=1vxQ5qr8opWaHhiqFlJZmi0oCOG3ik0uJ\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003eruby\u003cxbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/harryloewen/bitbar-slack-multi-teams/\u003c/xbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'open-uri'\nrequire 'json'\n\n# your token(s) please\nTOKENS = [\n  'xoxp-your-slack-token',\n  'xoxp-another-slack-token',\n].freeze\n\n# display all channels or only those with unread messages\nALL_CHANNELS = false\n\n# your default color\nCOLOR = '#696969'.freeze # '#696969' works in darkmode as well\n\n# your random messages if there're no unreads (and if ALL_CHANNELS is set to false)\nALL_DONE_MESSAGES = [\n  \":v: All caught up. | color=#{COLOR}\n    What’s next? | color=#{COLOR}\",\n  \":octopus: All done. | color=#{COLOR}\n    The world is your oyster. | color=#{COLOR}\",\n  \":clap: Everything unread is now read. | color=#{COLOR}\n    You’ve done it. | color=#{COLOR}\",\n  \":boom: Boom. | color=#{COLOR}\n    You’re up to date. | color=#{COLOR}\",\n  \":seedling: Everything’s sorted! | color=#{COLOR}\n    Let’s start something new. | color=#{COLOR}\",\n  \":car: There. | color=#{COLOR}\n    All caught up. | color=#{COLOR}\",\n  \":balloon: There! Caught up. | color=#{COLOR}\n    Set your mind to something new. | color=#{COLOR}\",\n  \":rocket: All done. | color=#{COLOR}\n    The future is yours. | color=#{COLOR}\",\n  \":raised_hands: That’s everything! | color=#{COLOR}\",\n  \":tractor: You’re all read. | color=#{COLOR}\n    Here’s a tractor. | color=#{COLOR}\"\n].freeze\n\n# some helpful methods\ndef load_content(api_method, options = nil)\n  url = \"https://slack.com/api/#{api_method}?token=#{@team[:token]}#{options}\"\n  @content = JSON.parse(open(url).read)\n  return if @content['ok']\n  @output += \"🚫\\n\"\n  @output += \"#{api_method}: #{@content['error']} | color=red\"\nend\n\ndef load_team\n  load_content('team.info')\n  return unless @content['ok']\n  @team[:id] = @content['team']['id']\n  @team[:name] = @content['team']['name']\n  @team.merge!(unreads: 0, users: [], channels: [])\n  @teams \u003c\u003c @team\nend\n\ndef load_channels\n  load_content('users.conversations', '\u0026types=public_channel%2Cprivate_channel%2Cmpim%2Cim')\n  @content['channels'].each do |channel|\n    @team[:channels] \u003c\u003c\n      { id: channel['id'], name: channel['name'], user: channel['user'],\n        is_channel: channel['is_channel'], is_im: channel['is_im'] }\n  end\nend\n\ndef load_users\n  load_content('users.list')\n  @content['members'].each do |user|\n    @team[:users] \u003c\u003c { id: user['id'], name: user['name'] }\n  end\nend\n\ndef find_user(message)\n  return '...' unless message['type'] == 'message'\n  if message['user']\n    '@' + message['user']\n  elsif message['bot_id']\n    if message['attachments']\n      message['attachments'][0]['service_name']\n    else\n      'Bot'\n    end\n  end\nend\n\ndef find_text(message)\n  return '...' unless message['type'] == 'message'\n  if !message['text'].nil? \u0026\u0026 !message['text'].empty?\n    message['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  elsif message['attachments']\n    message['attachments'].first['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  end\nend\n\ndef handle_messages(channel, red_messages)\n  history = []\n  @content['messages'].each do |message|\n    color = red_messages \u003e 0 ? 'red' : COLOR\n    history \u003c\u003c \"--#{find_user(message)}: #{find_text(message)}|length=90 color=#{color}\\n\"\n    red_messages -= 1\n  end\n  history \u003c\u003c \"\\n-----\\n\"\n  history \u003c\u003c \"--🔗 open in Slack | href=slack://channel?id=#{channel}\u0026team=#{@team[:id]}\\n\"\nend\n\ndef marking_url(channel)\n  timestamp = @content['messages'].first['ts']\n  \"https://slack.com/api/channels.mark?token=#{@team[:token]}\u0026channel=#{channel[:id]}\u0026ts=#{timestamp}\"\nend\n\ndef load_history\n  @team[:channels].each do |channel|\n    method = channel[:is_im] ? 'im.history' : 'channels.history'\n    load_content(method, \"\u0026channel=#{channel[:id]}\u0026count=6\u0026unreads=true\")\n    channel[:unread] = @content['unread_count_display'].to_i\n\n    if channel[:unread] \u003e 0\n      @team[:unreads] += 1\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n      channel[:history] \u003c\u003c \"--✅ mark as read | bash='/usr/bin/curl' param1='#{marking_url(channel)}' refresh=true terminal=false\\n\"\n    elsif ALL_CHANNELS\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n    end\n  end\nend\n\n# everything starts here\n@teams = []\n@output = ''\n\nTOKENS.each do |token|\n  @team = { token: token }\n  load_team\nend\n\n@teams.each do |team|\n  @team = team\n  load_channels\n  load_history\n\n  @output += \"\\n---\\n#{@team[:name]}\\n\"\n\n  if @team[:unreads] \u003e 0 || ALL_CHANNELS\n    @team[:channels].each do |channel|\n      next unless channel[:unread] \u003e 0 || ALL_CHANNELS\n      @output += channel[:is_im] ? \"\u003c@#{channel[:user]}\u003e\" : \"##{channel[:name]}\"\n      @output += channel[:unread] \u003e 0 ? \" (#{channel[:unread]})|color=red\\n\" : \"\\n\"\n      channel[:history].each { |message| @output += message.to_s }\n    end\n\n    load_users\n    @team[:users].each do |user|\n      @output = @output.gsub(user[:id], user[:name]).gsub(\"\u003c@#{user[:name]}\u003e\", \"@#{user[:name]}\")\n      @output = @output.gsub('\u003c!channel\u003e', '@channel').gsub('\u003c!here\u003e','@here')\n    end\n  else\n    @output += ALL_DONE_MESSAGES.sample\n  end\nend\n\n@unread_channels = @teams.map { |t| t[:unreads] }.inject(0, :+)\n@unread_channels = '' if @unread_channels.zero?\n\nICON='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'.freeze\n\n# and finally print it!\nputs \"\n#{@unread_channels} | image=#{ICON}\n---\n#{@output}\n---\nSettings\n--Tokens: #{TOKENS.count}\n----Total: #{TOKENS.count}\n----Valid: #{@teams.count} | color=#{@teams.count \u003c TOKENS.count ? 'red' : 'green'}\n----Generate tokens | href=https://api.slack.com/custom-integrations/legacy-tokens\n--Show all channels: #{ALL_CHANNELS} | color=#{ALL_CHANNELS ? 'green' : 'red'}\n---\nRefresh ⟳| refresh=true\n\"\n"
				}
			],
			"path": "Tools/Slack/slack-multi-teams.1m.rb",
			"filename": "slack-multi-teams.1m.rb",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-multi-teams.1m.rb.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Multi-Teams Overview",
			"version": "v1.0",
			"author": "Harry Löwen",
			"authors": [
				{
					"name": "Harry Löwen",
					"githubUsername": "harryloewen",
					"imageURL": "https://avatars.githubusercontent.com/u/33319470?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Provides an overview of unread channels, unread messages and channel histories.",
			"imageURL": "https://xbarapp.com/docs/plugins/Tools/Slack/slack-multi-teams.1m.rb",
			"dependencies": null,
			"aboutURL": "https://github.com/harryloewen/bitbar-slack-multi-teams/",
			"lastUpdated": "2023-07-15T09:53:37.774263+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Cryptocurrency/nomics_bitbar.py",
					"filename": "nomics_bitbar.py",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python\n\n'''\n    All metadata is placed here\n'''\n# \u003cxbar.title\u003eNomics.com Cryptocurrency Tickers\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eDaniel Anderson\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003edtand\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eProvides price updates and 24h change for the top ten cryptocurrencies by marketcap.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.ibb.co/4SD8cZs/Screen-Shot-2019-11-25-at-6-16-56-PM.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython,requests\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://nomics.com\u003c/xbar.abouturl\u003e\nimport requests\n\n\n## Base url for api\nBASE_URL = 'https://api.nomics.com/v1'\n\n## Tickers endpoint\nENDPOINT = 'currencies/ticker'\n\n## FREE API key\nAPI_KEY = '4465bf5e9801e08b9a3e04084c7ea3c3'\n\n## Returns top ten cryptocurrencies\ndef get_top_ten():\n    url = \"{}/currencies/ticker?key={}\".format(BASE_URL, API_KEY)\n    response = requests.get(url)\n    data = response.json()\n    top_ten = []\n    i = 0 \n    for ticker in data:\n        if i \u003e= 10:\n            break\n        top_ten.append(ticker[\"id\"])\n        i = i + 1\n    return top_ten\n\n## Returns ticker for provided symbol\ndef get_tickers(symbols):\n    params = {\n        \"ids\": symbols\n    }\n    url = '{}/{}?key={}'.format(BASE_URL, ENDPOINT, API_KEY)\n    response = requests.get(url, params=params)\n    data = response.json()\n    return data\n\n## Pads string to certain length\ndef pad_string(string, length):\n    padding = length - len(string)\n    return string.ljust(padding)\n\n## Returns the string specification for stdout\n## for bitbar interpreter\ndef generate_bitbar_format(tickers):\n    std_out_strings = []\n    i = 1\n    for ticker in tickers:\n        symbol   = ticker['symbol']\n\n        price    = round(float(ticker['price']),4)\n\n        if price \u003c 1.00:\n            price = '${:,.4f}'.format(price)\n        else:\n            price = '${:,.2f}'.format(price)\n\n        p = abs(float(ticker['1d']['price_change_pct']))\n        percent  = round(p * 100, 2)\n        percent  = str(percent) + \"%\"\n\n        col_one = pad_string(symbol + \": \" + price, 24)\n\n        if float(ticker['1d']['price_change_pct']) \u003e= 0:\n            std_out_strings.append(col_one + \"\\t+\" + percent + \" | color=green\")\n        else:\n            std_out_strings.append(col_one + \"\\t-\" + percent + \" | color=red\")\n\n        i = i + 1\n\n    return std_out_strings\n\n## Print output with bitbar formatting between new lines\ndef output_values(values):\n    print(\" Nomics.com | image=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\")\n    print(\"Go to nomics.com for all assets | href=https://nomics.com\")\n    for i,value in enumerate(values):\n        print(value)\n    print('Refresh | refresh=true')\n\n## Wrapper method for generating output and printing it\ndef std_out(tickers):\n    output_values(generate_bitbar_format(tickers))\n\ndef main():\n    top_ten = get_top_ten()\n    tickers = get_tickers(\",\".join(top_ten))\n    std_out(tickers)\n\nif __name__ == \"__main__\":\n    main()\n\n"
				}
			],
			"path": "Cryptocurrency/nomics_bitbar.py",
			"filename": "nomics_bitbar.py",
			"dir": "Cryptocurrency",
			"docsPlugin": "Cryptocurrency/nomics_bitbar.py.html",
			"docsCategory": "Cryptocurrency.html",
			"pathSegments": [
				"Cryptocurrency"
			],
			"categoryPathSegments": [
				{
					"path": "Cryptocurrency",
					"text": "Cryptocurrency",
					"isLast": true
				}
			],
			"title": "Nomics.com Cryptocurrency Tickers",
			"version": "v1.0",
			"author": "Daniel Anderson",
			"authors": [
				{
					"name": "Daniel Anderson",
					"githubUsername": "dtand",
					"imageURL": "https://avatars.githubusercontent.com/u/8932569?v=4",
					"bio": "Your average pojo.",
					"primary": true
				}
			],
			"desc": "Provides price updates and 24h change for the top ten cryptocurrencies by marketcap.",
			"imageURL": "https://xbarapp.com/docs/plugins/Cryptocurrency/nomics_bitbar.py.png",
			"dependencies": [
				"python",
				"requests"
			],
			"aboutURL": "https://nomics.com",
			"lastUpdated": "2023-07-15T09:53:12.713897+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Cryptocurrency/Bitcoin/tr-markets.1m.py",
					"filename": "tr-markets.1m.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003eBTC Ticker for TR Markets\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eErhan BÜTE\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eerhan\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eTC Ticker for TR Markets(btcturk.com, koinim.com, paribu.com)\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/MUj8Bkb.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003epython3\u003c/xbar.dependencies\u003e\n\nimport json\nimport http.client\n\n\ndef get_btcturk_price():\n    try:\n        conn = http.client.HTTPSConnection(\"www.btcturk.com\")\n        conn.request(\"GET\", \"/api/ticker\")\n        res = conn.getresponse()\n        data = json.loads(res.read().decode(\"utf-8\"))\n        for item in data:\n            if item[\"pair\"] == \"BTCTRY\":\n                return item[\"ask\"]\n    except:\n        return 0\n    return 0\n\n\ndef get_koinim_price():\n    try:\n        conn = http.client.HTTPSConnection(\"koinim.com\")\n        conn.request(\"GET\", \"/ticker/\")\n        res = conn.getresponse()\n        data = json.loads(res.read().decode(\"utf-8\"))\n        return data[\"ask\"]\n    except:\n        return 0\n\ndef get_paribu_price():\n    try:\n        conn = http.client.HTTPSConnection(\"www.paribu.com\")\n        conn.request(\"GET\", \"/ticker\")\n        res = conn.getresponse()\n        data = json.loads(res.read().decode(\"utf-8\"))\n        return data[\"BTC_TL\"][\"last\"]\n    except:\n        return 0\n\n\nprint(\"BTCTURK : \" + \"{0:.2f}\".format(get_btcturk_price()) +\" TRY\")\nprint(\"---\")\nprint(\"KOINIM : \" + \"{0:.2f}\".format(get_koinim_price()) +\" TRY\")\nprint(\"PARIBU : \" + \"{0:.2f}\".format(get_paribu_price()) +\" TRY\")\n"
				}
			],
			"path": "Cryptocurrency/Bitcoin/tr-markets.1m.py",
			"filename": "tr-markets.1m.py",
			"dir": "Cryptocurrency/Bitcoin",
			"docsPlugin": "Cryptocurrency/Bitcoin/tr-markets.1m.py.html",
			"docsCategory": "Cryptocurrency/Bitcoin.html",
			"pathSegments": [
				"Cryptocurrency",
				"Bitcoin"
			],
			"categoryPathSegments": [
				{
					"path": "Cryptocurrency",
					"text": "Cryptocurrency",
					"isLast": false
				},
				{
					"path": "Cryptocurrency/Bitcoin",
					"text": "Bitcoin",
					"isLast": true
				}
			],
			"title": "BTC Ticker for TR Markets",
			"version": "v1.0",
			"author": "Erhan BÜTE",
			"authors": [
				{
					"name": "Erhan BÜTE",
					"githubUsername": "erhan",
					"imageURL": "https://avatars.githubusercontent.com/u/3872888?v=4",
					"bio": "Python - Flask",
					"primary": true
				}
			],
			"desc": "TC Ticker for TR Markets(btcturk.com, koinim.com, paribu.com)",
			"imageURL": "https://xbarapp.com/docs/plugins/Cryptocurrency/Bitcoin/tr-markets.1m.py.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:09.837965+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Things/thingstoday.6s.sh",
					"filename": "thingstoday.6s.sh",
					"content": "#!/bin/bash\n\n# Show tasks due Today in Things\n#\n# by Max Clayton Clowes (maxcc@me.com)\n#\n# Shows tasks due Today. Find/replace \"Today\" with a list of your choice - e.g \"Inbox\"\n# 60 second refresh might be too slow. Tweak to your liking.\n# Only shows 20 todos - too many stops todos from being completed\n\n# metadata\n# \u003cxbar.title\u003eThings 3 Today\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.1\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eMax Clayton Clowes\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003emcclowes\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay tasks due today in Things 3.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/2IvhNws.png\u003c/xbar.image\u003e\n\nfunction tellthings() {\n\tosascript -e \"tell application \\\"Things3\\\"\n\t$1\nend tell\"\n}\n\nif [ \"$1\" = 'launch' ]; then\n\ttellthings 'activate'\n\texit\nfi\n\ncase \"$1\" in\n\t'show quick entry panel' | 'log completed now' | 'empty trash')\n\t\ttellthings \"$1\"\n\t\texit\nesac\n\nif [ \"$1\" = 'complete' ]; then\n\ttellthings \"set toDo to to do named \\\"$2\\\" of list \\\"Today\\\"\n\tset status of toDo to completed\n\tdelay 1.3\"\n\texit\nfi\n\nif [ \"$(osascript -e 'application \"Things3\" is running')\" = \"false\" ]; then\n\techo \"☑\"\n\techo \"---\"\n\techo \"Things 3 is not running\"\n\techo \"Launch Things3 | bash='$0' param1=launch terminal=false\"\n\texit\nfi\n\necho \"☑\"\n\necho \"---\"\n\necho \"Today...\"\n\nitems=$(tellthings 'set targetList to {}\nrepeat with n from 1 to count of to dos of list \"Today\"\n\tset toDo to item n of to dos of list \"Today\"\n\tif activation date of toDo is equal to missing value then\n\telse\n\t\tcopy name of toDo \u0026 \"|\" \u0026 status of toDo to the end of the targetList\n\tend if\n\tif n \u003e 20 then\n\t\treturn targetList\n\tend if\nend repeat\nreturn targetList');\n\nIFS=\",\"\nfor i in $items; do\n\tIFS=\"|\";\n\t# shellcheck disable=SC2086\n\tset \"--\" ${i};\n\tif [ \"$2\" = \"open\" ]; then\n\t\titem=\"☐ ${1}\";\n\telse \n\t\titem=\"☑ ${1}\";\n\tfi\n\techo \"${item} | bash=$0 param1=complete param2='${1}' terminal=false\"\ndone\n\necho \"View more... | color=#aaaaaa bash='$0' param1=launch terminal=false\"\n\necho \"---\"\n\necho \"New to do | bash='$0' param1='show quick entry panel' terminal=false\"\n\necho \"Log completed | bash='$0' param1='log completed now' terminal=false\"\n\necho \"Empty trash | bash='$0' param1='empty trash' terminal=false\"\n\necho '---'\n\necho \"Open Things 3 | bash='$0' param1=launch terminal=false\"\n"
				}
			],
			"path": "Lifestyle/Things/thingstoday.6s.sh",
			"filename": "thingstoday.6s.sh",
			"dir": "Lifestyle/Things",
			"docsPlugin": "Lifestyle/Things/thingstoday.6s.sh.html",
			"docsCategory": "Lifestyle/Things.html",
			"pathSegments": [
				"Lifestyle",
				"Things"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Things",
					"text": "Things",
					"isLast": true
				}
			],
			"title": "Things 3 Today",
			"version": "v1.1",
			"author": "Max Clayton Clowes",
			"authors": [
				{
					"name": "Max Clayton Clowes",
					"githubUsername": "mcclowes",
					"imageURL": "https://avatars.githubusercontent.com/u/4573407?v=4",
					"bio": "Product Manager. Have been delivering websites and apps for 10+ years.",
					"primary": true
				}
			],
			"desc": "Display tasks due today in Things 3.",
			"imageURL": "https://xbarapp.com/docs/plugins/Lifestyle/Things/thingstoday.6s.sh.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2023-07-15T09:53:22.233371+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Tools/todolist.2m.sh",
					"filename": "todolist.2m.sh",
					"content": "#!/bin/sh\n# \u003cxbar.title\u003eTodo List for menu bar\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev1.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eJulian Naumann\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eJulianNaumann\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eDisplay a todo list in the menu bar with items taken from the macos' Reminders.app from the list called 'Today'. Click the item to complete the reminder and display the next one.\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://i.imgur.com/d4cBUKW.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ebash,osascript\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/JulianNaumann/bitbar-todolist\u003c/xbar.abouturl\u003e\n\n# Icon credit, all icons from \u003chttps://www.flaticon.com\u003e:\n# - Bell icon made by Nice And Serious \u003chttps://niceandserious.com\u003e\n# - Todo list icon made by Freepik \u003chttps://www.freepik.com\u003e\n# - Check icon made by Smashicons \u003chttps://smashicons.com\u003e\n\nif [ \"$1\" = \"done\" ]; then\n\tosascript -e \t'tell application \"Reminders\"\n\t\t\t\tset activeReminders to (reminders of list \"Today\" whose completed is false)\n\t\t\t\tset todo to first item of activeReminders\n\t\t\t\ttell todo\n\t\t\t\t\tset completed to true\n\t\t\t\tend tell\n\t\t\tend tell'\nfi\n\nreminder=$(osascript -e 'tell application \"Reminders\"\n\t\t\t\tset activeReminders to (reminders of list \"Today\" whose completed is false)\n\t\t\t\tif activeReminders is not {} then\n\t\t\t\t\treturn name of first item of activeReminders\n\t\t\t\telse\n\t\t\t\t\treturn \"No Todos!\"\n\t\t\t\tend if\n\t\t\tend tell')\n\n# Choose a different icon by uncommenting the appropriate line and commenting out all others:\n# todo list\nimage=iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADs0lEQVRIDbWWW4iNURSAz5mLGeM2TSnXcZkil5SSB28UESGS8ELjlgfxQIkHeUARHlxilFBKKF5mEiajSGZeeCMNRVPzgJLrYI7v+8+/z5zTOWbmhFXfWXvvf+2911p77d1JpFKppCQQ9EH4H3KbRcvcw58k0m0H6UqrxBX0R6iGX/FYMaoE4x9QCuugAsIeUWQleLAankI3nIUJGP2VsIbrvoTWnIUYKIN7oHxLq1S9RrT1tihhTpQ+dBW0w5OcBRjQk/FwA5QtMFQjdHTG/dXxHFPo3EGQs2Hw3qLZBvPhJ+yEOaBEBZVuFv6lBlLxFx0vof+9sGUiETb0+0Aojw2z227YK0bvpvALrIGaeB2LMN9hvYJauAZKPQyOJ/VLYV8Ow2A0tIGF55hF0xYWiQ6XjpFegHlgOs6Dqb2I8Vb0IMj2Vq+9LgMg2C+lfRhMbx3cgpCZkHKGEBY1wmXQCqakAfR0InyF3kT7aTADumLDvfG6FfRfQ6ZKQ4R+12Mvp14ZjZX2FpZBJRhx9nnotfONsIOz+8DCi2hPhZOgmIH8hwND72EzKOEebo6m9POHednOR7MY6/UejsPgOigboaiiyfaLuRtgHnhUryAvpaZqBywEU7cHOqAR4yq030O6aUZiSh0nm8nP2E2mPRcssKPQBI/A9TLXLy8NfFQ0sFiGo+/ACPgMPsaKG/k4D4F32C1Az4YzoLSDAWjj3c483GFDvT0BY2ElHIIHMBI6we9fwQ1DZHr+Cd7DQKK8zMZmaBasov+CvseS2Yx2WvhQqGg2he99aeYbsddrMIwJ9nG/HZ13hnpxDMy/qTkN98FFosVsFxIi8UnDLHpDjfgT7RrGjPwbZM7P+dkd02XflIW2FREt+CeNbSR89wEwwlEM3ESfQrtewaLxw3Yw/17kLfAYnjNxPdpKtQCyozUrA0D7S7Ac9oPj06ElbjvHIHqERb0vtRAe781+pT8J+vO0TcVuJgQ5EM+vZKDg06YXu2AJmIJ9GL4hTU3oNfQLPW1GYsl7Tp3Yej0W055G+whaybkSDoRrYduyN22OfYFImHwztHvTbIZpshEbH4tS2r6hee9o2NAcW5l1sAKOw0MwrXrZl0QLY2sthKJzLPvMe9bA0Ht4F5TweNdrQd9FihLmRIGg8x7vsJjn0QDPwMo7B83gtfBbUcIc60DxfJ2fidTI/NPj4FXaU9AzwCdpN/1qdN45MNaXGIj14H32mFrCPoZOOzpwc290ytq0+me/3lWd6P4NwGhT56kWXgsAAAAASUVORK5CYII=\n\n# bell\n#image=iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAYAAACpSkzOAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADiElEQVRIDZ2W24uNURTAv2PG/a6UcsllPAgppHgYUV4UpYmUSB4kbyKP/grxwgvlktyKF694QJoHlELGrVwyphnJbYzfb89en+9wztRY9Zu19tprrb2/fTtTFEPIwMBALbqx90E3hPRjnIOpxqBHROywNcktuUg79jc4AkthJWyAt3A8x9Swy4kNazASR+Uih7EfRHLFfwC7E9IA6KZf1RrJf2uSWmu12vfsd3mW4LuPngEjsZ+hZ8IH4gbQiivwK1l//Wn4qXmQn2rij8JOeAi34DFYrA3aYQWchX0M6PI6wZ+0hxYCY1/GYN+EHuholkXfengNd2GCcehUo1lO3ckh+CK8B5fHvmkwJ9ut2OWyY0+Ep3A9imM33S+LpWT0NlBW58KLsF/BodxORWh70sZm30LsL7Art8uJ2C6FgHIG2Lfhgp1oZ38P7sD47Ctjc3tk1seM01aw6+LCGXvTRsBH2JqD92D3wqzcTkVTUv5DXwy0Dtu7tSjHlntVHTFO4HyCPK6Pcp0t6BucJDe8Bf0j+6sqjvdTnF6JBbkzahbVgSJxIobHsyc7ZqPjspaJuS9UDPQZhxOxRp00GmgSEd6TvhzpZofdbKAcWnzDMNcadVIdKGblze9jifpcKmxPT7wQdcmVRsol5wu+XrCGEjXrli6cbnp3CiuKyWg3OtrZ/Y+KXDveQzo46NKfvoiZM5man6y0QZcGMhc80q9AKRMHm4N/yaVEeYGf451vjzWtrR1Llxo4fUIcyMdTmQcuhw+o0nCgwa4i1cDuhHnUcjWU8JP950VYg+2P2yoj0OPB356YkO6GQkx6CdCL4QOsNRCd7lgUiFE30feWT/aB9LfoIPTkJYhYXA2lXy+x3r+XsNk2klZhBAXTJcyFt9NxLXUXhcs4B7xHSnpIiavqlmjTrz0mRRbFFbTv5TgG9uempfw0GnvhBaT3LCf8l6KGP4xPYL8FbLuu6ZPR7fpgOR0um3fIk+iy+lJ44728cSBcSg+Ke2Ad/caq9Vt3DRzTNiD25yT2MrgMXlD9FjPBr3RZvCOxPF+xp4OvgU+PE3MQcfB3cAKUWhqEL2Ap012wYPqhQ5vgRD6BX3sedsMZUDrgFOyAm+D/FX65NeUNNT9HbdqDgsPZNxX6r8Ib2AwboQsuNU2gg/7GNenw5LiR1ZM12mL4psBpULzxpyBdSvRoqOZYw6Us5Teo4ooAlVO16wAAAABJRU5ErkJggg==\n\n# check icon\n#image=iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADHklEQVRIDbWWvWsUURTFN35iExXsFGtjoSgY+0WMtWAKsbARJVoJFv4TgmAQLIMI1hZ+FFpHIYIKiqmUpFHBYOn37zc7Z/I2u2a2MAfOzp377r3nvfvezOxYZxBjuLbAH/XQONcp2IUH4D64E4oVuAzfwafwMfwGxVb4E/7xJrB4Ce83wV9wG7wCz0GTX8J5+BZ+gWIPnIDH4RHoJO/CW/A73Ax/wz5R7isoJMUktPgbOAN3wTYYY6w55lpDlHV7Hn6zMh3T8BOchTtgYKIrtd0l9WWimFWOudawlnC86aaGSxcGfIUXvamxnasCbTDG2MAa1oqoGpWoMxST0FlFzMGMYY4MRbNia1nT2qKp5wGx77ZCKDbKqqrg4idCuqrVcLWmtdVocBXLzc6eNTNpItqNbIuR5qeGNa2tRgWfswU407vt24fa1Xopu3GH6At1RhZgbTXU6pyBziBHv0x2vA3lym4S/BEerJPSRmuroVbnNpzTAOUe9Dzr/xqfnOvYHpBDdUomnvE5/Gp1nsHLGiB913bTm6OsYw3Kg3WesRV4oo4p68RWQ63OIuxqgLWz6nlXn9PcK5ZCp7AV8xUorJETmnuvarzXWNuGBDvbswbUiIC3sY9if4bXdALbJ0tkEbZarQHBJDhzX9I3DKqhkA+22A8/wHK8PEDGiAHB9Vp6jATHH8HdMBjHeAXvxcE1hQtXZcZvSxddzRKcqIZWe+8nxbEX0NeS9nN4GIoH0Pak5a7cb98wZIvUWLKQH0+/Z8LvYKCoz5Ev4JPwIbwPX0OLnIZCMb+D/0JqqqFW64OfA2LsJfgEun+iHOt5+n/Tzr4H3/1YgDN1bA5FmZrE0md32pBa1lZDrQq+WNte3gpkP0YRy+p9n/a9vFV0r+bhrDfAwsNWpX/Y0TenhLmZnDWtrUaFzOR/fYCtF7GhH+By1tMEb/hfDJepaPZFUZ8xW2H/A8edve0qqS+5mO1/ogwSJiXR9tp3N9sT5rFugzHGmmOuNURZt+l1b2h1pRv2RzibG0Gv+mxZ3h4+O1OwC/2rvxdmxSvYy3Dkv/p/ATQejPjjKGMzAAAAAElFTkSuQmCC\n\necho \"$reminder | length=30 bash='$0' param1='done' terminal=false refresh=true templateImage=$image\"\n"
				}
			],
			"path": "Tools/todolist.2m.sh",
			"filename": "todolist.2m.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/todolist.2m.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Todo List for menu bar",
			"version": "v1.0",
			"author": "Julian Naumann",
			"authors": [
				{
					"name": "Julian Naumann",
					"githubUsername": "JulianNaumann",
					"imageURL": "https://avatars.githubusercontent.com/u/8291876?v=4",
					"bio": "CS/Machine Learning student in Germany",
					"primary": true
				}
			],
			"desc": "Display a todo list in the menu bar with items taken from the macos' Reminders.app from the list called 'Today'. Click the item to complete the reminder and display the next one.",
			"imageURL": "https://xbarapp.com/docs/plugins/Tools/todolist.2m.sh.png",
			"dependencies": [
				"bash",
				"osascript"
			],
			"aboutURL": "https://github.com/JulianNaumann/bitbar-todolist",
			"lastUpdated": "2023-07-15T09:53:38.888908+01:00",
			"vars": null,
			"processingNotes": null
		},
		{
			"files": [
				{
					"path": "Finance/hours.1m.py",
					"filename": "hours.1m.py",
					"content": "#!/usr/bin/env python3\n\n# \u003cxbar.title\u003ehours\u003c/xbar.title\u003e\n# \u003cxbar.version\u003ev2.0\u003c/xbar.version\u003e\n# \u003cxbar.author\u003eUdey Rishi\u003c/xbar.author\u003e\n# \u003cxbar.author.github\u003eudeyrishi\u003c/xbar.author.github\u003e\n# \u003cxbar.desc\u003eA simple command line tool for managing your work hours and the money you make\u003c/xbar.desc\u003e\n# \u003cxbar.image\u003ehttps://raw.githubusercontent.com/udeyrishi/hours/master/assets/shift_ongoing.png\u003c/xbar.image\u003e\n# \u003cxbar.dependencies\u003ePython3\u003c/xbar.dependencies\u003e\n# \u003cxbar.abouturl\u003ehttps://github.com/udeyrishi/hours\u003c/xbar.abouturl\u003e\n\nfrom argparse import ArgumentParser\nimport csv\nfrom enum import Enum, auto\nimport os\nfrom distutils.util import strtobool\nfrom math import isclose\nimport sys\nimport time\n\nLOG_FILE_PATH = os.path.join(os.path.expanduser('~'), '.hours', 'log.csv')\n\nclass ModeFailException(Exception):\n    pass\n\ndef prompt_until_success(question, parser_fn, default=None):\n    while True:\n        print(question, end='')\n        try:\n            return parser_fn(input())\n        except ValueError:\n            if default is None:\n                print('Not a valid response.')\n            else:\n                return default\n\ndef script_path():\n    return os.path.realpath(__file__)\n\ndef script_name():\n    return os.path.basename(__file__)\n\nclass LogEvent(Enum):\n    WAGE_SET = auto()\n    PAYMENT = auto()\n    START = auto()\n    END = auto()\n\ndef positive_float(val):\n    num = float(val)\n    if num \u003c 0:\n        raise ValueError(f'{val} is a negative number.')\n    return num\n\nclass LogReport:\n    def __init__(self, active_wage=None, current_shift_started_at=None, earned_past_shifts=0, total_paid=0):\n        self.active_wage = active_wage\n        self.current_shift_started_at = current_shift_started_at\n        self.earned_past_shifts = earned_past_shifts\n        self.total_paid = total_paid\n\n    @property\n    def total_earned(self):\n        return self.earned_past_shifts + (((time.time() - self.current_shift_started_at)/60/60*self.active_wage) if self.current_shift_started_at is not None else 0)\n\n    @property\n    def outstanding_payment(self):\n        return self.total_earned - self.total_paid\n\n    @property\n    def has_outstanding_payment(self):\n        return not isclose(self.total_earned, self.total_paid, abs_tol=0.01)\n\n    @property\n    def in_shift(self):\n        return self.current_shift_started_at != None\n\n    @property\n    def has_active_wage(self):\n        return self.active_wage != None\n\n    @property\n    def current_shift_duration(self):\n        if self.current_shift_started_at is None:\n            return None\n        else:\n            duration = time.time() - self.current_shift_started_at\n            if duration \u003c 0:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; the ongoing shift seems to have been started in the future.')\n            m, s = divmod(duration, 60)\n            h, m = divmod(m, 60)\n            return f'{int(h):02d}:{int(m):02d}:{int(s):02d}'\n\ndef prepare_report():\n    report = LogReport()\n    \n    for event, value in read_log():\n        if event == LogEvent.WAGE_SET:\n            report.active_wage = value\n        elif event == LogEvent.PAYMENT:\n            report.total_paid += value\n        elif event == LogEvent.START: \n            if report.in_shift:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found two successive {LogEvent.START.name}s without a {LogEvent.END.name} in between. Try fixing or deleting it.')\n            if report.active_wage is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift {event.name} event occurred before any {LogEvent.WAGE_SET.name} event.')\n            report.current_shift_started_at = value\n        elif event == LogEvent.END:\n            if not report.in_shift:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found two successive {LogEvent.END.name}s without a {LogEvent.START.name} in between. Try fixing or deleting it.')\n            if report.active_wage is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift {event.name} event occurred before any {LogEvent.WAGE_SET.name} event.')\n            \n            seconds = value - report.current_shift_started_at\n            report.current_shift_started_at = None\n            if (seconds \u003c 0):\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift\\'s duration cannot be negative. Try fixing or deleting it.')\n            \n            report.earned_past_shifts += (seconds/60/60) * report.active_wage\n        else:\n            assert False, f'Support for new LogEvent {event.name} not added.'\n\n    return report\n\n\ndef read_log():\n    with open(LOG_FILE_PATH, 'r') as log_file:\n        csv_reader = csv.reader(log_file)\n        for log in csv_reader:\n            event = next((e for e in LogEvent if e.name == log[0]), None)\n            if event is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found an unknown log event: {log}')\n            value = float(log[1])\n            yield event, value\n\ndef write_log(event, value):\n    with open(LOG_FILE_PATH, 'a') as log_file:\n        csv_writer = csv.writer(log_file)\n        csv_writer.writerow([event.name, value])\n\ndef read_sanitized_report(expected_in_shift=None, if_shift_err=None):\n    if (expected_in_shift is None and if_shift_err is not None) or (expected_in_shift is not None and if_shift_err is None):\n        raise ValueError('Either both, or neither of expected_in_shift and if_shift_err should be null.')\n\n    report = prepare_report()\n    if not report.has_active_wage:\n        raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; no {LogEvent.WAGE_SET.name} events found. Try fixing or deleting it.')\n\n    if expected_in_shift is not None and report.in_shift != expected_in_shift:\n        raise ModeFailException(if_shift_err)\n\n    return report\n\ndef configure_as_new(ask_permission=True):\n    if ask_permission:\n        should_configure = prompt_until_success(question=f'Looks like you have never configured {script_name()} before. Would you like to do so now? [Y/n] ', parser_fn=lambda x: strtobool(x) == 1, default=True)\n        if not should_configure:\n            raise ModeFailException(f'{script_name()} cannot run without configuring.')\n\n    wage = prompt_until_success(question='What is your hourly wage? ', parser_fn=positive_float)\n\n    if not os.path.exists(os.path.dirname(LOG_FILE_PATH)):\n        os.makedirs(os.path.dirname(LOG_FILE_PATH))\n\n    write_log(LogEvent.WAGE_SET, wage)\n    return LogReport(active_wage=wage)\n\nclass App:\n    class Mode:\n        def __init__(self, name, runner, help, is_default):\n            self.name = name\n            self.runner = runner\n            self.help = help\n            self.is_default = is_default\n\n    def __init__(self):\n        self.__registered_modes = []\n\n    def run(self):\n        assert len(self.__registered_modes) \u003e 0, 'No modes were registered'\n        default_modes = [mode for mode in self.__registered_modes if mode.is_default]\n        assert len(default_modes) == 1, 'Exactly 1 mode should be registered as the default'\n        default_mode = default_modes[0]\n\n        parser = ArgumentParser(description='A tool for managing your work hours and the money you make.')\n        group = parser.add_mutually_exclusive_group()\n\n        for mode in self.__registered_modes:\n            group.add_argument(f'-{mode.name[0]}', f'--{mode.name}', action='store_true', help=mode.help)\n\n        args = parser.parse_args()\n\n        matching_mode = next((mode for mode in self.__registered_modes if getattr(args, mode.name)), default_mode)\n        try:\n            matching_mode.runner()\n            return 0\n        except ModeFailException as e:\n            print(str(e))\n            return 3\n\n    def register_mode(self, expected_in_shift=None, if_shift_err=None, help=None, configure_if_needed=True, is_default=False):\n        def wrapper(mode_fn):\n            report_param_name = next((param[0] for param in mode_fn.__annotations__.items() if param[1] == LogReport), None)\n            num_other_params = len([param for param in mode_fn.__annotations__.items() if param[1] != LogReport])\n            assert num_other_params == 0, 'mode functions can only optionally request the current report. Everything else must be gathered via user input for bitbar compatibility.'\n\n            def mode_runner():\n                if os.path.isfile(LOG_FILE_PATH):\n                    report = read_sanitized_report(expected_in_shift, if_shift_err)\n                elif configure_if_needed:\n                    report = configure_as_new()\n                else:\n                    report = None\n\n                kwargs = dict()\n                if report_param_name is not None:\n                    kwargs[report_param_name] = report\n                \n                mode_fn(**kwargs)\n\n            self.__registered_modes.append(App.Mode(name=mode_fn.__name__, runner=mode_runner, help=help, is_default=is_default))\n            return mode_runner\n        return wrapper\n\napp = App()\n\n@app.register_mode(help='see the current status summary in a bitbar compatible syntax', configure_if_needed=False, is_default=True)\ndef bitbar(report: LogReport):\n    if report is None:\n        print(f'⚙️{script_name()} needs a one-time configuration.')\n        print(f'Configure | refresh=true bash=\"{script_path()}\" param1=-i terminal=true')\n        return 0\n\n    if report.in_shift:\n        print(f'🕒 {report.current_shift_duration}')\n    else:\n        print('🏠')\n\n    print('---')\n    if report.in_shift:\n        print(f'End Shift | refresh=true bash=\"{script_path()}\" param1=-e terminal=false')\n    else:\n        print(f'Start Shift | refresh=true bash=\"{script_path()}\" param1=-s terminal=false')\n\n    print('---')\n    if not report.in_shift:\n        print(f'Update wage | refresh=true bash=\"{script_path()}\" param1=-w terminal=true')\n    print(f'Receive payment | refresh=true bash=\"{script_path()}\" param1=-p terminal=true')\n\n    print(f'Open log | refresh=true bash=\"less\" param1={LOG_FILE_PATH} terminal=true')\n\n    if report.has_outstanding_payment:\n        print('---')\n        if report.outstanding_payment \u003e 0:\n            print(f'💰 {report.outstanding_payment:.2f} pending')\n        else:\n            print(f'💰 {-report.outstanding_payment:.2f} overpaid')\n\n@app.register_mode(help='see the current status summary info')\ndef info(report: LogReport):\n    if report.in_shift:\n        print(f'🕒 {report.current_shift_duration}', end='')\n    else:\n        print('🏠', end='')\n\n    if report.has_outstanding_payment:\n        print(' | ', end='')\n        if report.outstanding_payment \u003e 0:\n            print(f'💰 {report.outstanding_payment:.2f} pending', end='')\n        else:\n            print(f'💰 {-report.outstanding_payment:.2f} overpaid', end='')\n    print()\n\n@app.register_mode(expected_in_shift=False, if_shift_err='Cannot change the wage while a shift is ongoing.', help='update the hourly wage moving forward', configure_if_needed=False)\ndef wage(report: LogReport):\n    if report is None:\n        # User is trying to use this mode as the first-time setup itself. Do not ask for wage 2x\n        configure_as_new(ask_permission=False)\n    else:\n        wage = prompt_until_success(question='What is your new hourly wage? ', parser_fn=positive_float)\n        write_log(LogEvent.WAGE_SET, wage)\n\n@app.register_mode(help='add a received payment')\ndef payment():\n    amount = prompt_until_success(question='How much amount did you receive? ', parser_fn=positive_float)\n    write_log(LogEvent.PAYMENT, amount)\n\n@app.register_mode(expected_in_shift=False, if_shift_err='Cannot start a shift while one is ongoing.', help='start a shift')\ndef start():\n    write_log(LogEvent.START, time.time())\n\n@app.register_mode(expected_in_shift=True, if_shift_err='Cannot end a shift when none is ongoing.', help='end a shift')\ndef end():\n    write_log(LogEvent.END, time.time())\n\n@app.register_mode(help='prints the path to the log file')\ndef log():\n    print(LOG_FILE_PATH)\n\nif __name__ == '__main__':\n    sys.exit(app.run())"
				}
			],
			"path": "Finance/hours.1m.py",
			"filename": "hours.1m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/hours.1m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "hours",
			"version": "v2.0",
			"author": "Udey Rishi",
			"authors": [
				{
					"name": "Udey Rishi",
					"githubUsername": "udeyrishi",
					"imageURL": "https://avatars.githubusercontent.com/u/4692593?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A simple command line tool for managing your work hours and the money you make",
			"imageURL": "https://xbarapp.com/docs/plugins/Finance/hours.1m.py.png",
			"dependencies": [
				"Python3"
			],
			"aboutURL": "https://github.com/udeyrishi/hours",
			"lastUpdated": "2023-07-15T09:53:20.620311+01:00",
			"vars": null,
			"processingNotes": null
		}
	]
}